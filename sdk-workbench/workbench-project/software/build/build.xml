<!-- ======================================================================= -->
<!-- caCORE Workbench Portal build file                                  -->
<!-- ======================================================================= -->
<project name="caCORE Workbench" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle" default="run">

	<!--***********************************************************************
	*** Define the Environment Variable
	*********************************************************************** -->
	<property environment="env"/>

	<!--***********************************************************************
	*** Load the build properties for the project
	*********************************************************************** -->
	
	<!-- Set the path to the SDK installation home (trunk) directory prior to running !!!-->
	<property name="package.sdk.home" value="${basedir}/../../../../sdk-toolkit"  />
	
	<property file="build.properties" />
	
	<property name="project.home" location="${basedir}/.." />
	<property name="project.build.home" location="${project.home}/build" />
	<property name="project.common.dir" location="${project.home}/common" />
	<property name="project.common.resources.dir" location="${project.common.dir}/resources" />
	<property name="project.sdk.dist.dir" location="${project.common.resources.dir}/sdk-dist" />

	<property name="software.dir" location=".." />
	<property name="software.build.dir" location="${software.dir}/build" />
	<property name="software.modules.dir" location="${software.dir}/modules" />
	<property name="software.modules.workbench.dir" location="${software.dir}/modules/workbench" />
	<property name="software.modules.workbench-conf.dir" location="${software.dir}/modules/workbench-conf" />
	<property name="software.target.modules.workbench.lib.dir" location="${software.dir}/target/modules/sdk-workbench-module/lib" />

	<property name="project.target.dir" value="${project.home}/target"/>
	<property name="dist.dir" value="${project.target.dir}/dist"/>
	<property name="dist.exploded.dir" value="${dist.dir}/exploded"/>
	<property name="project.dist.dir" location="../target/dist" />
	<property name="project.dist.workbench.runtime.dir" location="${project.dist.dir}/workbench-runtime" />

	<property name="ivy.def.file" location="ivy.xml" />

	<property name="build.dir" location="${software.dir}/build" />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${target.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	<property name="working.dir" location="${target.dir}/working" />

	<property name="modules.build.file" value="build.xml" />
	<property name="modules.build.target" value="build:all" />
	<property name="workspace.dir" location="${software.dir}/workspace" />

	<property name="target.workspace.dir" location="${target.dir}/workspace" />

	<property file="${build.dir}/project.properties" />

	<import file="build-common.xml"/>  
	
	<property name="sdk.src.file" value="SDK-src.zip" />

	<!--***********************************************************************
	*** CLASSPATH AND UNIX-STYLE BASEDIR PROPERTIES
	*********************************************************************** -->
	<!-- set basedir.url = basedir as unix style pathname, regardless of platform -->
	<path id="basedir.path">
		<pathelement path="${basedir}" />
	</path>

	<pathconvert targetos="unix" property="basedir.unix" refid="basedir.path" />

	<macrodef name="SDKecho">
		<attribute name="message" default="..." />
		<sequential>
			<echo>*****************************************************************</echo>
			<echo>***  @{message}</echo>
			<echo>*****************************************************************</echo>
		</sequential>
	</macrodef>

	<!--***********************************************************************
	*** Prepares the directory structure
	*********************************************************************** -->
	<target name="init" >
		<SDKecho message="${ant.project.name}: Preparing directories"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<!--***********************************************************************
	*** Cleans the generated directories and files
	*********************************************************************** -->
	<target name="clean" description="Cleans the generated directories and files">
		<SDKecho message="${ant.project.name}: Cleaning directories and files"/>
		<delete dir="${dist.dir}"/>
	</target>

	<!--***********************************************************************
	*** Runs the Workbench 
	*********************************************************************** -->
	<target name="run" depends="build:all" description="Invoking the Workbench Script">
		<SDKecho message="${ant.project.name}: Invoking the Workbench Script"/>
		<ant antfile="${dist.exploded.dir}/build.xml" target="run" inheritall="false" inheritrefs="false">
			<property name="sdk.src.file" value="${sdk.src.file}" />
		</ant>
	</target>
	
	<!--***********************************************************************
	*** Compiles the workbench classes
	*********************************************************************** -->
	<target name="build:all" depends="package:sdk:src,build:workspace-modules,ivy:package-workbench,dist:workbench:artifacts" description="Call modules build target to produce artifacts">
		<SDKecho message="${ant.project.name}: Building the workbench source"/>
		<ant antfile="${software.modules.dir}/build.xml" target="build:all" inheritall="false" inheritrefs="false"/>
	</target>
	
	<!--***********************************************************************
	*** Compiles the workbench submodules
	*********************************************************************** -->
	<target name="build:workspace-modules" depends="clean,init" description="Call modules build target to produce artifacts">
		<SDKecho message="${ant.project.name}: Building the workbench source"/>
		<ant antfile="${software.modules.dir}/build.xml" target="build:all" inheritall="false" inheritrefs="false"/>
	</target>

	<target name="ivy:package-workbench" depends="ivy:init">
		<ivy:resolve refresh="true" conf="workbench-runtime" />
		<ivy:retrieve pattern="${project.dist.dir}/[conf]/[artifact]-[revision].[ext]" conf="workbench-runtime" />
	</target>

	<target name="dist:workbench:artifacts" description="Distributes the workbench artifacts to the dist/exploded folder">
		<copy toDir="${dist.exploded.dir}">
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ant-1.7.0.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ant-apache-log4j-1.7.0.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ant-jsch-1.7.0.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ant-launcher-1.7.0.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ant-nodeps-1.7.0.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/axis*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/caGrid*.jar" excludes="**/caGrid*portal*.jar"/>
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/commons*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/concurrent*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/jaxrpc*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/jaxrpc*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/jsch*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/log4j*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/ojdbc14*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/mysql-connector-java*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/postgresql-jdbc*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/saaj*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/sdk*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/spring*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/tools*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/validation*.jar" />
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/wsrf*.jar" excludes="**/*stubs*.jar" />
		</copy>
		<!-- cog-jglobus-1.2.jar contains a log4j.properties file; rename it here so  -->
		<!-- that the sdk log4j.properties file takes precedence -->
		<copy toFile="${dist.exploded.dir}/zcog-jglobus-1.2.jar">
			<fileset dir="${project.dist.workbench.runtime.dir}" includes="**/cog-jglobus-1.2.jar" />
		</copy>
		<copy toDir="${dist.exploded.dir}">
			<fileset dir="${tools.lib.dir}" includes="**/ant-contrib*" />
		</copy>
		<copy toDir="${dist.exploded.dir}">
			<fileset dir="${project.common.resources.dir}" includes="**/*" />
		</copy>
		<copy toFile="${dist.exploded.dir}/build.xml">
			<fileset dir="." includes="install.xml" />
		</copy>
	</target>
	
	<target name="package:sdk:src" description="Packages SDK Source Distribution, and copies to local resource folder ">
		<available file="${project.sdk.dist.dir}/${sdk.src.file}" property="sdk.src.file.exists"/>
		<if>
			<isset property="sdk.src.file.exists"/>
			<then>
				<echo message="SDK source file already exists; skipping SDK package step"/>
			</then>
			<else>
				<echo message="SDK source file does not exist; packaging now"/>
				
				<ant antfile="${package.sdk.home}/build.xml" target="package" inheritall="false" inheritrefs="false">
					<property name="sdk.src.file" value="${sdk.src.file}" />
					<property name="dist.dir" value="${package.sdk.home}/dist" />
					<property name="software.dir" value="${package.sdk.home}/software" />
				</ant>
				<copy file="${package.sdk.home}/dist/${sdk.src.file}" todir="${project.sdk.dist.dir}" />

			</else>
		</if>
	</target>

</project>
