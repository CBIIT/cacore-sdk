<?xml version="1.0" encoding="utf-8" ?>

<project name="caCORE Workbench - Installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="project.properties" />
	<property name="properties.template.file" value="${basedir}/properties.template" />
	<property name="bda-blueprints-webapp.name" value="${PROJECT_NAME}" />

	<import file="bda-master-install.xml" />

	<property name="SERVER_HOST_NAME" value="${tomcat.hostname}"/>
	<property name="SERVER_HTTP_PORT" value="${tomcat.port.http}"/>
	<property name="SERVER_URL" value="http://${SERVER_HOST_NAME}:${SERVER_HTTP_PORT}/${PROJECT_NAME}"/>
	<property name="application.url" value="${SERVER_URL}" />

	<target name="install:tomcat:project-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<copy file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:init,
		install:common:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:common:clean,
		install:tomcat,
		install:common:post,
		install:common:validation:post-install
		">
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
		install:tomcat:project-webapp,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="common:init" depends="common:init:pre">
	</target>

	<!-- Clean up destination directory -->
	<target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init,install:tomcat:clean">
	</target>

	<target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm">
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		upgrade-ncm:tomcat,
		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:project-webapp,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade:common:init" depends="upgrade:tomcat:init" unless="install.running">
	</target>

	<target name="upgrade:tomcat:readers:bda" depends="upgrade:tomcat:init:prep" if="tomcat.exists">
		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,tomcat.home" />
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family" />
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix" />
				<equals arg1="${os.family}" arg2="mac" />
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}" />
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows" />
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}" />
			</then>
		</if>
		<tomcat-read-ports tomcat.home="${read.tomcat.home}" />
		<tomcat-read-external-hostname tomcat.home="${read.tomcat.home}" />
	</target>
</project>