<?xml version="1.0" encoding="utf-8" ?>

<project name="caCORE Workbench - Installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Properties file related properties and tasks -->
	<property environment="env" />

	<property file="install.properties" />
	<property file="project.properties" />
	<property name="properties.file" value="${basedir}/install.properties" />
	
	<echo message="Using properties file of ${properties.file}." />
	<echo message="* * * PROJECT_NAME:  ${PROJECT_NAME}" />
	
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />

	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>

	<!--OS Temp dir -->
	<condition property="os.temp.dir" value="/tmp">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="os.temp.dir" value="c:/temp">
		<os family="windows" />
	</condition>

	<echo message="application.base.path=${application.base.path}" />
	<property name="deploy.tomcat.home" value="${application.base.path}/${tomcat.binaries.relative.dir}" />

	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />

	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="tools.lib.dir" location="${tools.dir}/lib" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />

	<property name="SERVER_HOST_NAME" value="${tomcat.hostname}"/>
	<property name="SERVER_HTTP_PORT" value="${tomcat.port.http}"/>
	<property name="SERVER_URL" value="http://${SERVER_HOST_NAME}:${SERVER_HTTP_PORT}/${PROJECT_NAME}"/>	

	<condition property="taskdef-file" value="build-load-taskdef.xml" else="build-no-taskdef.xml">
		<not>
			<typefound name="xmltask"/>
		</not>
	</condition>

	<import file="${basedir}/${taskdef-file}"/>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<property name="application.url" value="${SERVER_URL}" />

	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type" input="${properties.file}" regexp=".*(install|upgrade).*" select="\1" />
	<echo message="Properties file type = ${properties.file.type}" />
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>
		<default>
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file." />
		</default>
	</switch>

	<!-- #################################################################### -->
	<!-- ########################## TODO targets ############################ -->
	<!-- #################################################################### -->

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}" />
			<filter token="application.url" value="${SERVER_URL}" />
			<filter token="tomcat.home" value="${deploy.tomcat.home}" />
		</filterset>

		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}" />
		<mkdir dir="${working.dir}" />
	</target>

	<target name="upgrade:init">
	</target>

	<!-- ############################################## -->
	<!-- ############## RESTRUCTURED ################## -->
	<!-- ############################################## -->
	<target name="install" description="Installs and configures Tomcat, creates database, and deploys application" depends="
		install:server:stop,
		install:clean,
		install:init,
		install:server:binaries,
		install:server:configure,
		install:server:project-webapp,
		install:post,
		install:server:start
		" />

	<target name="install:server:stop" depends="install:tomcat:stop"/>
	<target name="install:server:start" depends="install:tomcat:start"/>
	<target name="install:clean" depends="install:clean:tomcat" />
	<target name="install:server:binaries" depends="install:tomcat:binaries"/>
	<target name="install:server:configure" depends="install:tomcat:configure"/>
	<target name="install:server:project-webapp" depends="install:tomcat:project-webapp"/>
	<target name="install:post" depends="install:post:tomcat" />

	<!-- #################################################################### -->
	<!-- ###################### Tomcat specific targets ###################### -->
	<!-- #################################################################### -->

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat">
		<if>
			<available file="${deploy.tomcat.home}/bin/shutdown.sh" />
			<then>
				<echo message="Shutting down tomcat" />
				<sequential>
					<echo message="Stopping Tomcat instance at ${deploy.tomcat.home}" />
					<exec executable="sh" osfamily="unix" dir="${deploy.tomcat.home}/bin" spawn="true">
						<env key="NOPAUSE" value="true" />
						<arg line="shutdown.sh" />
					</exec>
					<exec osfamily="windows" executable="cmd" dir="${deploy.tomcat.home}/bin" spawn="true" >
						<env key="NOPAUSE" value="true" />
						<env key="CATALINA_BASE" value="" />
						<env key="CATALINA_HOME" value="" />
						<env key="CATALINA_TMPDIR" value="" />
						<arg line="/c shutdown.bat" />
					</exec>
					<sleep seconds="5" />
				</sequential>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat">
		<if>
			<not>
				<isset property="exclude.start.servers" />
			</not>
			<then>
				<sequential>
					<echo message="Starting Tomcat instance at ${deploy.tomcat.home}" />
					<exec executable="sh" osfamily="unix" dir="${deploy.tomcat.home}/bin" spawn="true">
						<env key="NOPAUSE" value="true" />
						<arg line="startup.sh" />
					</exec>
					<echo message="executing ${bda-utils.dir}/resource/psexec.exe"/>
					<exec osfamily="windows" executable="${bda-utils.dir}/resource/psexec.exe" dir="${deploy.tomcat.home}/bin" spawn="true" >
						<env key="NOPAUSE" value="true" />
						<env key="CATALINA_BASE" value="" />
						<env key="CATALINA_HOME" value="" />
						<env key="CATALINA_TMPDIR" value="" />
						<arg line="-d -i -w ${deploy.tomcat.home}/bin ${deploy.tomcat.home}/bin/startup.bat" />
					</exec>
					<sleep seconds="5" />
				</sequential>
			</then>
		</if>
	</target>

	<target name="install:clean:tomcat" unless="exclude.tomcat">
		<sleep seconds="30" />
		<property name="backup.count" value="5" />
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true" />
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat" />

				<backup-dir src.dir="${deploy.tomcat.home}" backup.base.dir="${backup.tomcat.base.dir}" backup.count="${backup.count}" />
			</then>
		</if>
		<delete dir="${deploy.tomcat.home}" failonerror="no"/>
	</target>

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat">
		<delete dir="${deploy.tomcat.home}" failonerror="false"/>
		<unzip dest="${application.base.path}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>
			<os family="unix" />
			<then>
				<chmod dir="${deploy.tomcat.home}/bin" perm="ugo+rx" includes="**/*.sh" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports and login-config)" unless="exclude.tomcat" depends="
		install:tomcat:configure:ports
		">
	</target>

	<target name="install:tomcat:configure:ports" unless="exclude.tomcat" >
		<echo message="Updating Tomcat Ports" />
		<xmlconfig in="${deploy.tomcat.home}/conf/server.xml" verbose="false">
			<update path="(//Connector)[@port=8080]/@port" value="${tomcat.port.http}" />
			<update path="(//Connector)[@redirectPort=8443]/@redirectPort" value="${tomcat.port.ssl}" />
			<update path="(//Connector)[@port=8009]/@port" value="${tomcat.port.ajp}" />
			<update path="(//Connector)[@port=8443]/@port" value="${tomcat.port.ssl}" />
			<update path="(//Server)[@port=8005]/@port" value="${tomcat.port.shutdown}" />
		</xmlconfig>
	</target>

	<target name="install:tomcat:project-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<copy file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" todir="${deploy.tomcat.home}/webapps" overwrite="true" />
	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat">
		<!-- Tomcat		
		-->
	</target>

	<!-- #################################################################### -->
	<!-- ###################### Other specific targets ###################### -->
	<!-- #################################################################### -->

	<!-- Start logging -->
	<property name="install-logs.dir" location="${application.base.path}/change-logs" />
	<mkdir dir="${install-logs.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start" />

	<!-- Installer section -->
	<target name="diag">
		<echoproperties />
	</target>

	<!-- #################################################################### -->
	<!-- ###################### Unwanted targets ############################ -->
	<!-- #################################################################### -->

	<target name="print">
		<echoproperties destfile="antproperties.txt"/>
	</target>

</project>