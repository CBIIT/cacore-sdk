<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/cacore-sdk/LICENSE.txt for details.
L-->

<project name="caCORE Workbench - Installer" default="upgrade" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="project.properties" />
	<property name="properties.template.file" value="${basedir}/properties.template" />
	<property name="build-blueprints-webapp.name" value="${PROJECT_NAME}" />

	<import file="build-master-install.xml" />
	<import file="build-util-macros.xml"/>

	<property name="jar-signing.keystore.abs-location" location="${jar-signing.keystore.location}"/>

	<property name="SERVER_HOST_NAME" value="${tomcat.hostname}"/>
	<property name="SERVER_HTTP_PORT" value="${tomcat.port.http}"/>
	<property name="SERVER_URL" value="http://${SERVER_HOST_NAME}:${SERVER_HTTP_PORT}/${PROJECT_NAME}"/>
	<property name="application.url" value="${SERVER_URL}" />

	<target name="install:tomcat:project-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<delete dir="${tomcat.home}//webapps/${PROJECT_NAME}" quiet="true"/>
		<copy file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:init,
		install:common:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:common:clean,
		install:tomcat
		">
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:configure,
		install:tomcat:project-webapp:re-configure,
		install:tomcat:project-webapp,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="common:init" depends="common:init:pre">
	</target>

	<!-- Clean up destination directory -->
	<target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init,install:tomcat:clean">
	</target>

	<target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-ncm">
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
		common:init,
		common:tomcat:init,
		install:common:validation:pre-install,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		upgrade-ncm:tomcat
		">
	</target>

	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
		common:init,
		common:tomcat:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:project-webapp:re-configure,
		install:tomcat:project-webapp,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade:common:init" depends="upgrade:tomcat:init" unless="install.running">
	</target>

	<target name="upgrade:tomcat:readers:build" depends="upgrade:tomcat:init:prep" if="tomcat.exists">
		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,tomcat.home" />
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family" />
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix" />
				<equals arg1="${os.family}" arg2="mac" />
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}" />
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows" />
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}" />
			</then>
		</if>
		<tomcat-read-ports tomcat.home="${read.tomcat.home}" />
		<tomcat-read-external-hostname tomcat.home="${read.tomcat.home}" />
	</target>
	
	<!-- override the validation:pre-install targets due to the JDK 1.5 vs 1.6 issue -->
	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks build-utils" depends="common:init">
	<!--
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
	-->
	</target>
	
	<!-- override the validation:pre-install targets due to the JDK 1.5 vs 1.6 issue -->
	<target name="install:tomcat:validation:pre-install" description="Runs pre-install validation checks build-utils" 
		depends="
		common:tomcat:init,
		common:init,
		install:common:validation:pre-install
		">
		<!--
		<validate-pre-install-tomcat />
		-->
	</target>
		
	<target name="install:tomcat:project-webapp:re-configure" description="Configure build-blueprints-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
		<property name="workbench.temp.dir" value="${working.dir}/workbench-webapp"/>
		<delete dir="${workbench.temp.dir}"/>
		<unzip src="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" dest="${workbench.temp.dir}"/>
		
		<replace dir="${workbench.temp.dir}">
			<replacefilter token="@SERVER_HOSTNAME@" value="${tomcat.hostname}" />
			<replacefilter token="@SERVER_PORT@" value="${tomcat.port.http}" />
			<replacefilter token="@TOMCAT_EXTERNAL_HTTP_HOST@" value="${tomcat.external.http.host}" />
		</replace>
		<delete dir="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war"/>
		<war destfile="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" compress="false" webxml="${workbench.temp.dir}/WEB-INF/web.xml" >
			<fileset dir="${workbench.temp.dir}">
				<include name="*/**" />
			</fileset>
		</war>  

		<if>
			<equals arg1="${jar-signing.execution.time}" arg2="install"/>
			<then>
				<SDKecho message="${ant.project.name}: Creating Workbench WebStart Keystore; Required for Signing Jars"/>
				<generate-jar-signing-keystore />
				<echo message="jar-signing.execution.time set to install, signing jars"/>
				<sign-jars
                                jars.archive.file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war"
                                jars.archive.relative.dir="lib"
                                />
			</then>
			<else>
				<echo message="jar-signing.execution.time not set to install, not signing jars"/>
			</else>
		</if>
	</target>
</project>