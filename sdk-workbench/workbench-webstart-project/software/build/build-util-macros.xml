<?xml version="1.0" encoding="utf-8" ?>

<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/cacore-sdk/LICENSE.txt for details.
L-->

<project name="caCORE SDK - Utils-Macros" default="" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<macrodef name="sign-jars">
		<!-- jar related attribs -->
		<attribute name="jar-signing.keystore.abs-location" default="${jar-signing.keystore.abs-location}" />
		<attribute name="jar-signing.keystore.password" default="${jar-signing.keystore.password}" />
		<attribute name="jar-signing.keystore.alias" default="${jar-signing.keystore.alias}" />
		<attribute name="jar-signing.execution.time" default="${jar-signing.execution.time}" />
		<!-- if jar-signing.exection.time=build -->
		<attribute name="jars.dir" default="" />
		<!-- if jar-signing.exection.time=install -->
		<attribute name="jars.archive.file" default="" />
		<attribute name="jars.archive.relative.dir" default="." />
		<!-- global attribs -->
		<attribute name="working.dir" default="${working.dir}" />
		<attribute name="jar-signing.jar.list" default="${jar-signing.jar.list}" />
		<sequential>
			<var name="jars.dir.working" unset="true" />
			<if>
				<equals arg1="@{jar-signing.execution.time}" arg2="install" />
				<then>
					<echo message="Signing jars in an archive" />
					<var name="archive.working.dir" unset="true" />
					<property name="archive.working.dir"
						value="@{working.dir}/tmp/@{jars.archive.file}.dir" />
					<mkdir dir="${archive.working.dir}" />
					<delete dir="${archive.working.dir}" />
					<mkdir dir="${archive.working.dir}" />
					<unzip src="@{jars.archive.file}" dest="${archive.working.dir}" />
					<property name="jars.dir.working"
						value="${archive.working.dir}/@{jars.archive.relative.dir}" />
					<echo message="Signing jars in an archive - ${jars.dir.working}" />
				</then>
				<else>
					<property name="jars.dir.working" value="@{jars.dir}" />
				</else>
			</if>
			<echo message="Signing jars in a directory  - ${jars.dir.working}" />
			<!-- sign jars -->
			<for list="@{jar-signing.jar.list}" param="jar.file.name">
				<sequential>
					<echo message="Lookging for @{jar.file.name}" />
					<signjar destDir="${jars.dir.working}" alias="@{jar-signing.keystore.alias}"
						keystore="@{jar-signing.keystore.abs-location}" storepass="@{jar-signing.keystore.password}"
						keypass="@{jar-signing.keystore.password}" lazy="true">
						<path>
							<fileset dir="${jars.dir.working}" includes="@{jar.file.name}" />
						</path>
					</signjar>
				</sequential>
			</for>
			<if>
				<equals arg1="@{jar-signing.execution.time}" arg2="install" />
				<then>
					<!-- repackage archive -->
					<echo message="Re-creating Archive" />
					<move file="@{jars.archive.file}" tofile="@{jars.archive.file}.pre-signjar" />
					<zip destfile="@{jars.archive.file}" basedir="${archive.working.dir}" />
				</then>
			</if>
		</sequential>
	</macrodef>
	<macrodef name="generate-jar-signing-keystore">
		<attribute name="jar-signing.keystore.abs-location" default="${jar-signing.keystore.abs-location}" />
		<attribute name="jar-signing.keystore.password" default="${jar-signing.keystore.password}" />
		<attribute name="jar-signing.keystore.alias" default="${jar-signing.keystore.alias}" />
		<attribute name="jar-signing.generate-selfsigned" default="${jar-signing.generate-selfsigned}" />
		<attribute name="jar-signing.exection.time" default="${jar-signing.exection.time}" />
		<attribute name="jar-signing.keystore.cert.cn" default="${jar-signing.keystore.cert.cn}" />
		<attribute name="jar-signing.keystore.cert.ou" default="${jar-signing.keystore.cert.ou}" />
		<attribute name="jar-signing.keystore.cert.o" default="${jar-signing.keystore.cert.o}" />
		<attribute name="jar-signing.keystore.cert.c" default="${jar-signing.keystore.cert.c}" />
		<sequential>
			<tstamp>
				<format property="install.time" pattern="yyyy-MM-dd-HH-mm-ss" />
			</tstamp>
			<if>
				<equals arg1="@{jar-signing.generate-selfsigned}" arg2="true" />
				<then>
					<echo
						message="Generating self-signed certificate for use with jar signing." />
					<if>
						<available file="@{jar-signing.keystore.abs-location}" />
						<then>
							<move file="@{jar-signing.keystore.abs-location}"
								tofile="@{jar-signing.keystore.abs-location}-${install.time}" />
						</then>
					</if>
					<genkey alias="@{jar-signing.keystore.alias}" storepass="@{jar-signing.keystore.password}"
						keystore="@{jar-signing.keystore.abs-location}" validity="1825">
						<dname>
							<param name="CN" value="@{jar-signing.keystore.cert.cn}" />
							<param name="OU" value="@{jar-signing.keystore.cert.ou}" />
							<param name="O" value="@{jar-signing.keystore.cert.o}" />
							<param name="C" value="@{jar-signing.keystore.cert.c}" />
						</dname>
					</genkey>
				</then>
				<else>
					<echo message="Using existing certificate for jar signing." />
				</else>
			</if>
			<verify-jar-signing-keystore
				jar-signing.keystore.abs-location="@{jar-signing.keystore.abs-location}"
				jar-signing.keystore.password="@{jar-signing.keystore.password}"
				jar-signing.keystore.alias="@{jar-signing.keystore.alias}"
				jar-signing.keystore.cert.cn="@jar-signing.keystore.cert.cn}"
				jar-signing.keystore.cert.ou="@jar-signing.keystore.cert.ou}"
				jar-signing.keystore.cert.o="@jar-signing.keystore.cert.o}"
				jar-signing.keystore.cert.c="@jar-signing.keystore.cert.c}" />
		</sequential>
	</macrodef>
	<macrodef name="verify-jar-signing-keystore">
		<attribute name="jar-signing.keystore.abs-location" default="${jar-signing.keystore.abs-location}" />
		<attribute name="jar-signing.keystore.password" default="${jar-signing.keystore.password}" />
		<attribute name="jar-signing.keystore.alias" default="${jar-signing.keystore.alias}" />
		<attribute name="jar-signing.keystore.cert.cn" default="${jar-signing.keystore.cert.cn}" />
		<attribute name="jar-signing.keystore.cert.ou" default="${jar-signing.keystore.cert.ou}" />
		<attribute name="jar-signing.keystore.cert.o" default="${jar-signing.keystore.cert.o}" />
		<attribute name="jar-signing.keystore.cert.c" default="${jar-signing.keystore.cert.c}" />
		<sequential>
			<if>
				<available file="@{jar-signing.keystore.abs-location}" />
				<then>
					<echo
						message="Found signing jar file at @{jar-signing.keystore.abs-location}, validating." />
					<basename file="@{jar-signing.keystore.abs-location}"
						property="jar-signing.keystore.file" />
					<dirname file="@{jar-signing.keystore.abs-location}"
						property="jar-signing.keystore.dir" />
					<verify-keystore appserver.ssl.enable="true"
						appserver.ssl.keystore.file="${jar-signing.keystore.file}"
						appserver.ssl.keystore.dir="${jar-signing.keystore.dir}"
						appserver.ssl.keystore.pass="@{jar-signing.keystore.password}"
						appserver.ssl.keystore.alias="@{jar-signing.keystore.alias}"
						appserver.ssl.fullyqualified.hostname="" verify.url="false" />
				</then>
				<else>
					<echo
						message="Signing jar file at @{jar-signing.keystore.abs-location} not found, skipping validation." />
				</else>
			</if>
		</sequential>
	</macrodef>
	<macrodef name="verify-password-value">
		<sequential>
			<copy tofile="${os.temp.dir}/verifyPasswordValue.groovy"
				file="${build-utils.resource.dir}/groovy/verifyPasswordValue.groovy"
				overwrite="true" />
			<groovy src="${os.temp.dir}/verifyPasswordValue.groovy" />
		</sequential>
	</macrodef>	
	<macrodef name="verify-keystore" description="macro for verifying a keystore">
		<attribute name="appserver.ssl.enable" default="${jboss.ssl.enable}"/>
		<attribute name="appserver.ssl.keystore.file" default="${jboss.ssl.keystore.file}"/>
		<attribute name="appserver.ssl.keystore.dir" default="${jboss.ssl.keystore.dir}"/>
		<attribute name="appserver.ssl.keystore.pass" default="${jboss.ssl.keystore.pass}"/>
		<attribute name="appserver.ssl.keystore.alias" default="${jboss.ssl.keystore.alias}"/>
		<attribute name="appserver.ssl.fullyqualified.hostname" default="${jboss.ssl.fullyqualified.hostname}"/>
		<attribute name="verify.url" default="true"/>
		<sequential>
			<if>
				<equals arg1="@{appserver.ssl.enable}" arg2="true"/>
				<then>
					<var name="keytool.output" unset="true"/>
					<var name="keytool.error" unset="true"/>
					<var name="keytool.result" unset="true"/>
					<echo message="Validating keystore file"/>
					<osfamily property="os.family"/>
					<property name="os.tmp.dir" value="/tmp"/>
					<if>
						<and>
							<equals arg1="${os.family}" arg2="unix"/>
							<equals arg1="${os.family}" arg2="mac"/>
						</and>
						<then>
							<property name="os.tmp.dir" value="/tmp"/>
						</then>
					</if>
					<if>
						<equals arg1="${os.family}" arg2="windows"/>
						<then>
							<property name="os.tmp.dir" value="c:/tmp"/>
						</then>
					</if>
					<mkdir dir="${os.tmp.dir}"/>
					<copy file="@{appserver.ssl.keystore.dir}/@{appserver.ssl.keystore.file}" tofile="${os.tmp.dir}/@{appserver.ssl.keystore.file}"/>
					<exec executable="keytool" outputproperty="keytool.output" errorproperty="keytool.error" resultproperty="keytool.result">
						<arg value="-list"/>
						<arg value="-keystore"/>
						<arg value="${os.tmp.dir}/@{appserver.ssl.keystore.file}"/>
						<arg value="-storepass"/>
						<arg value="@{appserver.ssl.keystore.pass}"/>
						<arg value="-alias"/>
						<arg value="@{appserver.ssl.keystore.alias}"/>
						<arg value="-v"/>
					</exec>
					<if>
						<not>
							<equals arg1="${keytool.result}" arg2="0"/>
						</not>
						<then>
							<fail message="keytool failed - ${keytool.output} ${keytool.error}"/>
						</then>
						<else>
							<echo message="debug - ${keytool.result} ${keytool.output} ${keytool.error}"/>
							<if>
								<equals arg1="@{verify.url}" arg2="true"/>
								<then>
			<groovy>
				<arg line="${keytool.output} @{appserver.ssl.fullyqualified.hostname}"/>
				import java.util.regex.Pattern

				String keytoolOutput = args[0]
				String fqhn = args[3]

				keytoolOutput.eachLine
				{ cline ->
				//Owner: CN=*.nci.nih.gov, OU=National Cancer Institute, O=National Institute of Health, L=Rockville, ST=Maryland, C=US
				//m = java.util.regex.Pattern.compile(/^Owner:\s+CN=([\w\d\-\_\.\*]+).*/).matcher(cline)
				m = cline =~ /^Owner:\s+CN=([^\.]+)([\w\d\-\_\.]+).*/
				if (m.matches())
				{
				host = m.group(1)
				domain = m.group(2)
				certfqhn = host + domain
				println "Found host = '${host}' domain = '${domain}' in - ${cline}"
				if (host.equals('*'))
				{
				if (fqhn.indexOf(domain) > 0)
				{
				println "${fqhn} matches ${domain}"
				} else
				{
				System.err.println "${fqhn} FAILED MATCH ${domain}"
				System.exit(2)
				}
				} else
				{
				if (fqhn.equals(certfqhn))
				{
				println "${fqhn} matches ${certfqhn}"
				} else
				{
				System.err.println "${fqhn} FAILED MATCH ${certfqhn}"
				System.exit(2)
				}
				}
				}
				}
			</groovy>
								</then>
							</if>
						</else>
					</if>
				</then>
				<else>
					<echo message="appserver.ssl.enable not set or true so skipping ssl validation"/>
				</else>
			</if>
		</sequential>
	</macrodef>
	
	
	<macrodef name="SDKecho">
		<attribute name="message" default="..." />
		<sequential>
			<echo>*****************************************************************</echo>
			<echo>***  @{message}</echo>
			<echo>*****************************************************************</echo>
		</sequential>
	</macrodef>
</project>
