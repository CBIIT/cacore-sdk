<!-- ======================================================================= -->
<!-- caCore Workbench Portal build file                                  -->
<!-- ======================================================================= -->
<project name="caCORE Workbench Webstart" basedir="." default="deploy:local:install">

	<!--***********************************************************************
	*** Define the Environment Variable
	*********************************************************************** -->
	<property environment="env"/>

	<!--***********************************************************************
	*** Load the build properties for the project
	*********************************************************************** -->
	
	<property file="install.properties" />
	<property file="project.properties" />
	<property file="build.properties" />
	
	<property name="project.home" location="${basedir}/.." />
	<property name="project.build.home" location="${project.home}/build" />
	<property name="project.common.dir" location="${project.home}/common" />
	<property name="project.common.resources.dir" location="${project.common.dir}/resources" />
	
	<property name="workbench.project.dir" value="../../../workbench-project" />
	<property name="workbench.software.build.dir" location="${workbench.project.dir}/software/build" />
	<property name="workbench.dist.dir" value="${workbench.project.dir}/software/target/dist/exploded" />
	<property name="workbench.common.sdk.dist.dir" value="${workbench.project.dir}/software/common/resources/sdk-dist" />

	<import file="build-common.xml"/> 
	<import file="build-util-macros.xml"/> 

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />
	
	<property name="download.dir" location="${target.dir}/download" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="temp.dir" location="${target.dir}/temp" />
	
	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="tomcat.dest.file" value="${download.dir}/${tomcat.binaries.file}" />
	
	<property name="project.target.dir" value="${project.home}/target"/>
	<property name="lib.dir" location="${project.target.dir}/lib" />
	<property name="dist.dir" value="${project.target.dir}/dist"/>
	<property name="dist.exploded.dir" value="${dist.dir}/exploded"/>
	<property name="dist.exploded.common.dir" value="${dist.exploded.dir}/common"/>
	<property name="dist.exploded.common.sdk.dist.dir" value="${dist.exploded.common.dir}/resources/sdk-dist"/>
	
	<property name="keystore.dir" value="${dist.exploded.dir}/keystore"/>
	<property name="keystore.lib.dir" value="${keystore.dir}/lib"/>
	
	<property name="webstart.dir" value="${dist.exploded.dir}/common/resources/web"/>
	<property name="webstart.webinf.dir" value="${webstart.dir}/WEB-INF"/>
		
	<property name="download.dir" location="${target.dir}/download" />
	<property name="output.dir.location" value="${dist.exploded.dir}"/>
	<property name="output.dir" value="${output.dir.location}/output"/>
	<property name="output.war.dir" value="${dist.exploded.dir}/output/${PROJECT_NAME}/package/server/tomcat/webapps"/> 
	
	<property name="properties.file" value="install.properties"/>
	<property name="properties.file.name" value="install.properties"/>
	
	<property name="sdk.src.file" value="SDK-src.zip" />

	<!--***********************************************************************
	*** Packages the caCORE Workbench into a WebStart application
	*********************************************************************** -->
	<target name="package:webstart" depends="build:workbench-modules,-copy-webstart-jars,-create-webstart-keystore,-sign-webstart-jars,-package-webstart-webapp">
		<SDKecho message="${ant.project.name}: Completed Packaging the caCORE Workbench into a WebStart application"/>
	</target>

	<!--***********************************************************************
	*** Copies the Jar files required in the Workbench WebStart application
	*********************************************************************** -->
	<target name="-copy-webstart-jars">
		<delete dir="${keystore.dir}" failonerror=""/>
		<mkdir dir="${keystore.lib.dir}" />
		<copy toDir="${keystore.lib.dir}">
			<fileset dir="${workbench.dist.dir}" includes="**/*.jar" />
		</copy>
	</target>

	<!--***********************************************************************
	*** Make Workbench Workbench WebStart Application jars; required for full access
	*********************************************************************** -->
	<target name="-create-webstart-keystore">
		<SDKecho message="${ant.project.name}: Creating Workbench WebStart Keystore; Required for Signing Jars"/>
		<generate-jar-signing-keystore />
	</target>

	<!--***********************************************************************
	*** Sign Workbench WebStart Application jars; required for full access
	*********************************************************************** -->
	<target name="-sign-webstart-jars">
		<SDKecho message="${ant.project.name}: Sign Workbench WebStart Application jars; required for full client system access"/>
		<echoproperties prefix="jar-signing"/>
		<if>
			<equals arg1="${jar-signing.execution.time}" arg2="build"/>
			<then>
				<echo message="jar-signing.execution.time set to build, signing jars"/>
				<sign-jars jars.dir="${keystore.lib.dir}"
				/>
			</then>
			<else>
				<echo message="jar-signing.execution.time not set to build, not signing jars"/>
			</else> 
		</if>
		<flattenmapper/>
	</target>
	
	<!--***********************************************************************
	*** Package the Workbench files into WebStart Web Application
	*********************************************************************** -->
	<target name="-package-webstart-webapp">
		<SDKecho message="${ant.project.name}: Packaging the Workbench into WebStart Web Application"/>
		<mkdir dir="${output.war.dir}" />
		<war destfile="${output.war.dir}\${workbench.webstart.war.file}" webxml="${webstart.webinf.dir}\web.xml">
			<manifest>
				<attribute name="Generated-By" value="caCORE caCORE Workbench"/>
				<attribute name="Version" value="${VERSION}"/>
			</manifest>	
			<fileset dir="${keystore.dir}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${webstart.dir}">
				<include name="*"/>
			</fileset>
			<fileset dir="${dist.exploded.common.sdk.dist.dir}">
				<include name="*"/>
			</fileset>
		</war>
		
	</target>
	
	<!-- Wrapper build target, calls appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		-copy-project-properties,
		package:webstart
		" />
	
	<target name="deploy:local:install" depends="build:workbench-modules,build:all,dist:installer,dist:installer:prep" description="Installs and configures the application and required Webstart binaries on the local machine. Used for developer desktops and ci environments.">
		<deploy-local target.name="${install.target}" />
	</target> 
	
	<!-- ant -Dproperties.file=C:/devroot/scm-private/sdk/properties/dev-install.properties  deploy:remote:install 
		https://wiki.nci.nih.gov/display/BuildandDeploymentAutomation/AHP+-+Testing+command+line+build   -->
	<!-- In order to run this step, had to explicitly add jsch-0.1.34.jar to classpath via "External Tools" dialog in MyEclipse -->
	<target name="deploy:remote:install" depends="
		build:workbench-modules,
		build:all,
		dist:installer:prep,
		dist:installer"
		description="Installs and configures the web start version of the workbench on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" >
		
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${project-webapp.install.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>
	
	<target name="dist:installer:prep" depends="dist:tools:retrieve,dist:dependent:scripts" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<echo message="* * * dist:installer:prep dist.exploded.dir: ${dist.exploded.dir}" />
		<echo message="* * * dist:installer:prep build.dir: ${build.dir}" />
		<echo message="* * * dist:installer:prep bda-utils.dir: ${bda-utils.dir}" />
		<echo message="* * * dist:installer:prep common.dir: ${common.dir}" />
		<echo message="* * * dist:installer:prep download.dir: ${download.dir}" />
		<echo message="* * * dist:installer:prep copy.tools.flag: ${copy.tools.flag}" />
		<echo message="* * * dist:installer:prep default.target: ${default.target}" />

		<dist-prep />
	</target>
	
	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:workbench-modules,
		build:all,
		dist:upgrader
		">
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${project-webapp.upgrade.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>
	
	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${project-webapp.upgrade.zip.file}" />
		<obfuscate-properties-file properties.file="${dist.exploded.dir}/install.properties" required.property.list="application.base.path.linux,application.base.path.windows" optional.property.list="" delete.property.list="" />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>
		</copy>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		<zip destfile="${dist.dir}/${project-webapp.upgrade.zip.file}" basedir="${dist.exploded.dir}" />
	</target>
	
	<target name="dist:upgrader:prep" depends="" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<echo message="* * * dist:upgrader:prep dist.exploded.dir: ${dist.exploded.dir}" />
		<echo message="* * * dist:upgrader:prep build.dir: ${build.dir}" />
		<echo message="* * * dist:upgrader:prep bda-utils.dir: ${bda-utils.dir}" />
		<echo message="* * * dist:upgrader:prep common.dir: ${common.dir}" />
		<echo message="* * * dist:upgrader:prep download.dir: ${download.dir}" />
		<echo message="* * * dist:upgrader:prep copy.tools.flag: N" />
		<echo message="* * * dist:upgrader:prep default.target: upgrade" />
		
		<dist-prep copy.tools.flag="N" default.target="upgrade" />
	</target>

	<target name="build:workbench-modules" description="Call workbench modules build target to produce artifacts">
		<SDKecho message="${ant.project.name}: Building the workbench source"/>
		<ant antfile="${workbench.software.build.dir}/build.xml" target="build:all" inheritall="false" inheritrefs="false"/>
	</target>
	
	<target name="build:project-webapp" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<echo>Project Name = ${PROJECT_NAME}.........</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${codegen.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="build:project-webapp:dist" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${package.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="dist:installer" depends="-copy-project-properties" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${project-webapp.install.zip.file}" />
		<obfuscate-properties-file properties.file="${dist.exploded.dir}/install.properties" required.property.list="application.base.path.linux,application.base.path.windows" optional.property.list="" delete.property.list="" />
		<zip destfile="${dist.dir}/${project-webapp.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>
	
	<target name="dist:dependent:scripts" description="target to package-system">
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${basedir}" >
				<include name="*-reconfigure.xml"/>
				<include name="*-taskdef.xml"/>
				<include name="*.properties"/>
				<include name="tools/**/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:tomcat
		" />
	
	<target name="-copy-project-properties">
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${project.build.home}" includes="*.properties" />
		</copy>
		<!-- copy common/resources folder to exploded folder -->
		<echo>Copying dir from ${project.common.resources.dir} .......</echo>
		<copy todir="${dist.exploded.dir}/common">
			<fileset dir="${project.common.dir}" />
		</copy>
		<copy todir="${dist.exploded.common.sdk.dist.dir}">
			<fileset dir="${workbench.common.sdk.dist.dir}" />
		</copy>
		<replace dir="${dist.exploded.dir}/common">
			<replacefilter token="@PROJECT_NAME@" value="${PROJECT_NAME}" />
			<replacefilter token="@SERVER_HOSTNAME@" value="${tomcat.hostname}" />
			<replacefilter token="@SERVER_PORT@" value="${tomcat.port.http}" />
			<replacefilter token="@SDK_SRC_FILE@" value="${sdk.src.file}" />
		</replace>
	</target>

	<target name="dist:tools:retrieve:tomcat" unless="tomcat.tools.exists" description="Downloads TOMCAT from binary repository and verifies checksum">
		<get src="${tomcat.src.url}" dest="${tomcat.dest.file}" />
		<get src="${tomcat.src.url}.MD5" dest="${tomcat.dest.file}.MD5" />
		<checksum file="${tomcat.dest.file}" verifyProperty="tomcat.cksum.ok" />
		<if>
			<equals arg1="${tomcat.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded tomcat sucessfully" />
			</then>
			<else>
				<fail message="Failed to download tomcat file sucessfully." />
			</else>
		</if>
	</target>
	
	<target name="init" description="Sets up build are and initalizes variables">
		<echo message=" ______   ______   _______ " />
		<echo message="(____  \ (______) (_______)" />
		<echo message=" ____)  ) _     _  _______ " />
		<echo message="|  __  ( | |   | ||  ___  |" />
		<echo message="| |__)  )| |__/ / | |   | |" />
		<echo message="|______/ |_____/  |_|   |_|" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />

		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
	</target>
	
	<target name="clean">
		<delete dir="${dist.dir}" failonerror="false"/>
		<delete dir="${temp.dir}" />
	</target>
	
	<macrodef name="SDKecho">
		<attribute name="message" default="..." />
		<sequential>
			<echo>*****************************************************************</echo>
			<echo>***  @{message}</echo>
			<echo>*****************************************************************</echo>
		</sequential>
	</macrodef>

</project>
