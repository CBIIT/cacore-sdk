<?xml version="1.0" encoding="utf-8" ?>
<project name="caCORE SDK - Master Build" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

	<!-- Property file related properties and tasks -->
	<property environment="env" />
	<!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->

	<!-- BDA standard structure -->
	
	<property name="software.dir" location=".." />
	<property name="build.dir" location="${software.dir}/build" />
	<property name="common.dir" location="${software.dir}/common" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="bda-download.dir" location="${target.dir}/bda-download" />
	<property name="ivy.settings.dir" location="${common.dir}" />
	<property name="lib.dir" location="${target.dir}/lib" />
	<property name="temp.dir" location="${target.dir}/temp" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="bda-utils.dir" location="${target.dir}/bda-utils" />
	<property name="log.dir" location="${target.dir}/logs" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="download.dir" location="${target.dir}/download" />
	<property name="pt.dir" location="${target.dir}/persistent-transient" />
	<property name="working.dir" location="${target.dir}/working" />

	<property name="modules.build.file" value="build.xml" />
	<property name="modules.build.target" value="build:all" />
	<property name="workspace.dir" location="${software.dir}/workspace" />
	<property name="codegen.build.file" value="build-codegen.xml" />
	<property name="codegen.build.target" value="build:all" />
	<property name="package.build.target" value="package-system" />
	<property name="target.workspace.dir" location="${target.dir}/workspace" />

	<property file="${build.dir}/project.properties" />

	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
		<or>
			<os family="unix" />
			<os family="mac" />
		</or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
		<os family="windows" />
	</condition>
	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}" />
	<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}" />



	<!-- added for remote deployments since file is copied to root of install dir -->
	<basename property="properties.file.name" file="${properties.file}" />


	<!-- Ivy Related props -->
	<property name="ivy.settings.file" value="ivysettings.xml" />
	<property name="ivy.file" value="ivy-2.0.0-beta2.jar" />
	<property name="ivy-cacore.file" value="ivy-cacore-2.0.0-beta2.jar" />

	<!-- Properties that relate to how to call build targets from sub-projects-->
	<property name="bda-workspace-api.base.dir" value="${software.dir}/workspace" />
	<property name="db.src.dir" value="${bda-workspace-api.base.dir}/db" />
	<property name="db-install.src.dir" value="${db.src.dir}/db-install" />
	<property name="db-upgrade.src.dir" value="${db.src.dir}/db-upgrade" />


	<!-- Distribution Structure properties, used to copy files into the distribution area.
       		Use project.propertie relative dir names becasue they are used by install also-->
	<property name="dist.exploded.dir" value="${dist.dir}/exploded" />

	<property name="common.dist.dir" value="${dist.exploded.dir}/${common.dist.relative.dir}" />
	<property name="db-install.dist.dir" value="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dist.dir" value="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
	<property name="jboss-conf.dist.dir" value="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />


	<!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
	<property name="jboss.dest.file" value="${download.dir}/${jboss.binaries.file}" />
	<property name="tomcat.dest.file" value="${download.dir}/${tomcat.binaries.file}" />

	<!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
	<property name="install.target" value="install" />
	<property name="upgrade.target" value="upgrade" />


	<import file="${build.dir}/build-common.xml"/>

	<!-- Start logging -->
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start" />
	<!-- set some db variables -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect" />
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar" />
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver" />
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}" />
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}" />
			<property name="database.schema" value="${database.name}" />
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect" />
			<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar" />
			<property name="database.driver" value="com.mysql.jdbc.Driver" />
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}" />
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}" />
			<property name="database.schema" value="${database.name}" />
		</case>
		<default>
			<fail message="Invalid database type ${database.type}" />
		</default>
	</switch>

	<path id="jdbc.driver.classpath">
		<pathelement location="${database.driver.file}" />
	</path>


	<!-- Targets -->
	<target name="diagnostics" description="diagnostics">
		<echoproperties />
		<diagnostics />
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" failonerror="false"/>
		<delete dir="${temp.dir}" />
	</target>

	<target name="init" description="Sets up build are and initalizes variables">
		<echo message=" ______   ______   _______ " />
		<echo message="(____  \ (______) (_______)" />
		<echo message=" ____)  ) _     _  _______ " />
		<echo message="|  __  ( | |   | ||  ___  |" />
		<echo message="| |__)  )| |__/ / | |   | |" />
		<echo message="|______/ |_____/  |_|   |_|" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />

		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
		<!-- If jboss is required to build, then check for jboss in jboss.home, then check for in jboss in working directory, if not found then download it into this that directory.  If found at any point set local.jboss.home to where it is found.  This can be passed to sub-projects so then can compile code against distribution.  This is especially important on AntHillPro server which will not have jboss present, thus will have to use a copy in the working area.  This also makes it easier to start the project, if the developer does not yet have jboss installed, build will download it and install it so build can proceed. -->
		<if>
			<equals arg1="${require.jboss}" arg2="true" />
			<then>
				<available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists" />
				<if>
					<isset property="rt.jboss.exists" />
					<then>
						<property name="local.jboss.home" location="${jboss.home}" />
						<echo message="JBOSS_HOME exists ${jboss.home}" />
					</then>
					<else>
						<property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}" />
						<available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists" />
						<echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}" />
						<if>
							<not>
								<isset property="local.jboss.exists" />
							</not>
							<then>
								<echo message="LOCAL_JBOSS_HOME not found downloading." />
								<antcall target="dist:tools:retrieve:jboss" />
								<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
									<arg line="-installGroup ejb3 installpath=${local.jboss.home}" />
								</java>
							</then>
							<else>
								<echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}" />
							</else>
						</if>
					</else>
				</if>

			</then>
		</if>
	</target>

	<target name="ivy:clean" description="Cleans up the ivy cache of this project and all sub-projects">
		<ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-build.xml" target="ivy-cleancache" dir="${bda-download.dir}">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
			<property name="software.dir" value="${software.dir}" />
		</ant>
		<ant inheritAll="true" inheritRefs="false" antfile="${modules.build.file}" target="clean:dependencies" dir="${modules.dir}" />
	</target>

	<!-- Wrapper build target, call appropriate builds for sub-projects -->
	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		clean,
		init,
		build:project-webapp,
		build:project-webapp:dist,
		dist:installer
		" />

	<target name="build:workspace-modules" description="Call modules build target to produce artifiacts">
		<echo>target DIR = ${target.dir}</echo>
		<echo>modules DIR = ${modules.dir}</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${modules.build.file}" target="${modules.build.target}" dir="${modules.dir}">
		</ant>
	</target>


	<target name="build:project-webapp" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<echo>Project Name = ${PROJECT_NAME}.........</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${codegen.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="build:project-webapp:dist" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${package.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="dist:gui-installer" description="Makes Gui-Installer distribution">
		<delete>
			<fileset dir="${dist.dir}">
				<include name="*.jar" />
			</fileset>
		</delete>
		<gui-installer-prep />
		<ant inheritAll="false" inheritRefs="false" antfile="install.xml" target="build:installer" dir="${build.dir}/gui-installer">
			<property name="compile.jar.dir" value="${target.dir}/izpack-4.0.1" />
		</ant>
	</target>

	<!-- @TODO dist:gui-installer,dist:upgrader -->
	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:src
		" />

	<target name="dist:src" description="Makes source distribution">
		<!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
	</target>

	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:jboss,
		dist:tools:retrieve:tomcat
		" />

	<target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists" description="Downloads JBOSS from binary repository and verifies checksum">
		<get src="${jboss.src.url}" dest="${jboss.dest.file}" />
		<get src="${jboss.src.url}.MD5" dest="${jboss.dest.file}.MD5" />
		<checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok" />
		<if>
			<equals arg1="${jboss.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded jboss sucessfully" />
			</then>
			<else>
				<fail message="Failed to download jboss file sucessfully." />
			</else>
		</if>
	</target>
	<target name="dist:tools:retrieve:jboss-bindings" description="Downloads JBOSS bindings filefrom binary repository and verifies checksum">
		<get src="${jboss-bindings.src.url}" dest="${dist.exploded.dir}/${jboss-bindings.file}" />
	</target>

	<target name="dist:tools:retrieve:tomcat" unless="tomcat.tools.exists" description="Downloads TOMCAT from binary repository and verifies checksum">
		<get src="${tomcat.src.url}" dest="${tomcat.dest.file}" />
		<get src="${tomcat.src.url}.MD5" dest="${tomcat.dest.file}.MD5" />
		<checksum file="${tomcat.dest.file}" verifyProperty="tomcat.cksum.ok" />
		<if>
			<equals arg1="${tomcat.cksum.ok}" arg2="true" />
			<then>
				<echo message="Downloaded tomcat sucessfully" />
			</then>
			<else>
				<fail message="Failed to download tomcat file sucessfully." />
			</else>
		</if>
	</target>

	<target name="dist:installer:prep" depends="dist:tools:retrieve,dist:tools:retrieve:jboss-bindings" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<!-- Copy db-install and db-upgrade scripts from source into distribution area. The db files need to be under db-[install/upgard]/${database.type}. Because of this fact these files were not moved to the macro. -->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<dist-prep />

		<!-- copy install.properties to exploded folder -->
		<echo>Copying files from ${project.build.home} .......</echo>
		<copy todir="${dist.exploded.dir}" >
			<fileset dir="${project.build.home}" includes="*.properties" />
		</copy>
		<!-- copy common/resources folder to exploded folder -->
		<echo>Copying dir from ${project.common.resources.dir} .......</echo>
		<copy todir="${dist.exploded.dir}/common" >
			<fileset dir="${project.common.dir}"/>
		</copy>
	</target>

	<target name="dist:installer" depends="dist:installer:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${project-webapp.install.zip.file}" />
		<obfuscate-properties-file properties.file="${dist.exploded.dir}/install.properties" required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname" optional.property.list="ldap.url,ldap.basedn" delete.property.list="exclude.jboss.backup" />
		<zip destfile="${dist.dir}/${project-webapp.install.zip.file}" basedir="${dist.exploded.dir}" />
	</target>

	<target name="dist:upgrader:prep" depends="dist:tools:retrieve:jboss-bindings" description="Copies artifacts not generated by sub-project builds into the install distribution area">
		<!-- Copy db-upgrade scripts from source into distribution area. The db files need to be under db-upgrade/${database.type}. This has not been moved to the macro because the source and dest structure may not be the same and thus this would need to be custom. -->
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<dist-prep copy.tools.flag="N" default.target="upgrade" />

	</target>

	<target name="dist:upgrader" depends="dist:upgrader:prep" description="Produces zip file based on installer distribution area. Zip is used by deploy:remote:* or external installations">
		<delete file="${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}" />
		<obfuscate-properties-file properties.file="${dist.exploded.dir}/install.properties" required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname" optional.property.list="ldap.url,ldap.basedn" delete.property.list="exclude.jboss.backup" />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="upgrade.properties" />
			</fileset>
		</copy>
		<replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />
		<zip destfile="${dist.dir}/${bda-blueprints-webapp.upgrade.zip.file}" basedir="${dist.exploded.dir}" />

	</target>

	<target name="deploy:local:install:re-configure">
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${project.build.home}" includes="*.properties" />
		</copy>
		<deploy-local target.name="install:re-configure" />
	</target>

	<target name="deploy:local:install:nocodegen">
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${project.build.home}" includes="*.properties" />
		</copy>
		<deploy-local target.name="${install.target}" />
	</target>

	<target name="deploy:local:upgrade:nocodegen">
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${project.build.home}" includes="*.properties" />
		</copy>
		<deploy-local target.name="${upgrade.target}" />
	</target>

	<!-- build:all,  -->
	<target name="deploy:local:install" depends="build:all,dist:installer:prep,deploy:local:install:nocodegen" description="Installs and configures the application and required binaries and re-creates the datbase  on the local machine. Used for developer desktops and ci environments.">
	</target>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep,deploy:local:upgrade:nocodegen" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
	</target>

	<!-- ant -Dproperties.file=C:/devroot/scm-private/sdk/properties/dev-install.properties  deploy:remote:install 
		https://wiki.nci.nih.gov/display/BuildandDeploymentAutomation/AHP+-+Testing+command+line+build   -->
	<target name="deploy:remote:install" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:installer
		">
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${project-webapp.install.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		build:all,
		dist:upgrader
		">
		<!-- Call macro to deploy files on desired server -->
		<deploy-files dist.file="${bda-blueprints-webapp.upgrade.zip.file}" />
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${upgrade.target}" />
	</target>
	
	<target name="clean:software:target">
		<delete dir="${target.dir}" failonerror="false"/>
	</target>

	<target name="clean:target">
		<delete dir="${target.dir}" failonerror="false"/>
	</target>
	

	<!-- These targets are for adding files to ivy -->
	<target name="ivy:module:add2repo" >
		<!-- you would want to use this value instead and you can get rid of the mkdir below
		<property name="ivy-repo.base.dir" location="${software.dir}/../../ivy-repo"/>
		-->
		<property name="svn.user.name" value="garmillas"></property>
		<property name="svn.user.pass" value="kiran819"></property>
		
		<mkdir dir="${user.home}/tmp"/>
		<ivy-module-add2repo
			ivy-repo.base.dir="${user.home}/tmp/ivy-repo"
			ivy.add.org="ncicb"
			ivy.add.module="ssaksa-test-module3"
			ivy.add.version="0.1.0"
			ivy.add.module.src.dir="${build.dir}"
			ivy.add.module.src.file.list="build.xml"
			ivy.add.xml.src.location="${build.dir}/install.xml"
			/>
	</target>
</project>
