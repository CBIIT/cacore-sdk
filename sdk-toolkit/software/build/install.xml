<?xml version="1.0" encoding="utf-8" ?>

<project name="caCORE SDK - Installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="codegen.properties" />
	<property name="project.name" value="${PROJECT_NAME}"/>

	<import file="bda-master-install.xml"/>

	<!-- Grid related properties -->
	<property name="grid.secure.key.file.location" value="${security.dir.src}/${grid.secure.key.file}" />
	<property name="grid.secure.cert.file.location" value="${security.dir.src}/${grid.secure.cert.file}" />

	<property name="jboss.server.name" value="default"/>
	<property name="grid.secure.cert.location" value="${security.dist.relative.dir}/${grid.secure.cert.file}"/>
	<property name="grid.secure.key.location" value="${security.dist.relative.dir}/${grid.secure.key.file}"/>

	<property name="database.type" value="${DB_TYPE}"/>
	<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${PROJECT_NAME}"/>
	<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${PROJECT_NAME}"/>

	<switch value="${SERVER_TYPE}">
		<case value="jboss">
			<property name="SERVER_HOST_NAME" value="${jboss.server.hostname}"/>
			<property name="SERVER_HTTP_PORT" value="${jboss.server.port}"/>
			<property name="SERVER_SSL_PORT" value="${jboss.server.ssl.port}"/>
			<property name="exclude.tomcat" value="true"/>
		</case>
		<case value="tomcat">
			<property name="SERVER_HOST_NAME" value="${tomcat.hostname}"/>
			<property name="SERVER_SSL_PORT" value="${tomcat.port.ssl}"/>
			<property name="SERVER_HTTP_PORT" value="${tomcat.port.http}"/>
			<property name="exclude.jboss" value="true"/>
		</case>
		<default>
			<fail message="Invalid server type ${SERVER_TYPE}" />
		</default>
	</switch>

	<import file="build-reconfigure.xml" />

	<echo message="${SERVER_URL}"/>
	<property name="application.url" value="${SERVER_URL}" />

	<!-- webapp can use either Oracle or MySQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${DB_TYPE}">
		<case value="oracle">
			<property name="DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
			<property name="DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
			<property name="DB_CONNECTION_URL" value="jdbc:oracle:thin:@${DB_SERVER}:${DB_SERVER_PORT}:${DB_NAME}" />
		</case>
		<case value="mysql">
			<property name="DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
			<property name="DB_DRIVER" value="com.mysql.jdbc.Driver" />
			<property name="DB_CONNECTION_URL" value="jdbc:mysql://${DB_SERVER}:${DB_SERVER_PORT}/${DB_NAME}" />
		</case>
		<case value="postgresql">
			<property name="DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="DB_DRIVER" value="org.postgresql.Driver" />
			<property name="DB_CONNECTION_URL" value="jdbc:postgresql://${DB_SERVER}:${DB_SERVER_PORT}/${DB_NAME}" />
		</case>			
		<default>
			<fail message="Invalid database type ${DB_TYPE}" />
		</default>
	</switch>

	<if>
		<equals arg1="${SECURITY_ENABLED}" arg2="true"/>
		<then>
			<switch value="${CSM_DB_TYPE}">
				<case value="oracle">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
					<property name="CSM_DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:oracle:thin:@${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}:${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>
				<case value="mysql">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
					<property name="CSM_DB_DRIVER" value="com.mysql.jdbc.Driver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:mysql://${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}/${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>
				<case value="postgresql">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
					<property name="CSM_DB_DRIVER" value="org.postgresql.Driver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:postgresql://${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}/${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>		
				<default>
					<fail message="Invalid database type ${CSM_DB_TYPE}" />
				</default>
			</switch>
		</then>
	</if>

	<if>
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
		<then>
			<switch value="${CLM_DB_TYPE}">
				<case value="oracle">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
					<property name="CLM_DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:oracle:thin:@${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}:${CLM_DB_NAME}" />
				</case>
				<case value="mysql">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
					<property name="CLM_DB_DRIVER" value="com.mysql.jdbc.Driver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:mysql://${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}/${CLM_DB_NAME}" />
				</case>
				<case value="postgresql">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
					<property name="CLM_DB_DRIVER" value="org.postgresql.Driver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:postgresql://${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}/${CLM_DB_NAME}" />
				</case>	
				<default>
					<fail message="Invalid database type ${CLM_DB_TYPE}" />
				</default>
			</switch>
		</then>
	</if>

	<if>
		<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" />
		<then>
			<switch value="${TARGET_GRID}">
				<case value="training-1.3">
					<property name="CAGRID_AUTHENTICATION_SERVICE_URL" value="https://dorian.training.cagrid.org:8443/wsrf/services/cagrid/Dorian" />
					<property name="CAGRID_DORIAN_SERVICE_URL" value="${CAGRID_AUTHENTICATION_SERVICE_URL}" />
				</case>
				<case value="nci_qa-1.3">
					<property name="CAGRID_AUTHENTICATION_SERVICE_URL" value="https://cagrid-dorian-qa.nci.nih.gov:8443/wsrf/services/cagrid/Dorian" />
					<property name="CAGRID_DORIAN_SERVICE_URL" value="${CAGRID_AUTHENTICATION_SERVICE_URL}" />
				</case>
				<case value="nci_stage-1.3">
					<property name="CAGRID_AUTHENTICATION_SERVICE_URL" value="https://cagrid-dorian-stage.nci.nih.gov:8443/wsrf/services/cagrid/Dorian" />
					<property name="CAGRID_DORIAN_SERVICE_URL" value="${CAGRID_AUTHENTICATION_SERVICE_URL}" />
				</case>
				<case value="nci_prod-1.3">
					<property name="CAGRID_AUTHENTICATION_SERVICE_URL" value="https://cagrid-dorian.nci.nih.gov:8443/wsrf/services/cagrid/Dorian" />
					<property name="CAGRID_DORIAN_SERVICE_URL" value="${CAGRID_AUTHENTICATION_SERVICE_URL}" />
				</case>
				<default>
					<fail message="Invalid target grid ${TARGET_GRID}." />
				</default>
			</switch>
		</then>
	</if>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:init,
		install:common:validation:pre-install,
		install:database:validation:pre-install,
		install:re-configure,
		install:database,
		install:tomcat,
		install:jboss,
		install:common:post,
		install:common:validation:post-install
		">
	</target>

	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:project-webapp,
		install:jboss:grid-login-webapp,
		install:server:root-certs,
		install:jboss:configure,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="		
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:project-webapp,		
		install:tomcat:grid-login-webapp,
		install:server:root-certs,
		install:tomcat:configure,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="install:jboss:clean" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false" />
			<then>
				<sleep seconds="5" />
				<property name="backup.count" value="5" />
				<if>
					<not>
						<equals arg1="${exclude.jboss.backup}" arg2="true" />
					</not>
					<then>
						<!-- Jboss backup, do not compress until install is finished -->
						<property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss" />

						<!-- So these directories won't be included in the backup, they are not needed to use jboss -->
						<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
						<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />

						<backup-dir src.dir="${jboss.home}" backup.base.dir="${backup.jboss.base.dir}" backup.count="${backup.count}" />
					</then>
				</if>
				<delete dir="${jboss.home}" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="common:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false" />
			<then>
				<delete dir="${tomcat.home}" />
				<dirname file="${tomcat.home}" property="tomcat.base.dir" />
				<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
				<if>
					<os family="unix" />
					<then>
						<chmod dir="${tomcat.home}/bin" perm="ugo+rx" includes="**/*.sh" />
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="install:tomcat:clean" unless="exclude.tomcat" depends="common:tomcat:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false"/>
			<then>
				<sleep seconds="20" />
				<property name="backup.count" value="5"/>
				<if>
					<not>
						<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
					</not>
					<then>
						<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>

						<backup-dir
							src.dir="${tomcat.home}"
							backup.base.dir="${backup.tomcat.base.dir}"
							backup.count="${backup.count}"
							/>
					</then>
				</if>
				<delete dir="${tomcat.home}"/>
			</then>
		</if>
	</target>

	<target name="install:re-configure" description="Configure example-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration">
		<antcall target="package-install-system"/>
	</target>

	<target name="install:server:root-certs" >
		<if>
			<istrue value="${GRID_LOGIN_MODULE_ENABLED}"/>
			<then>
				<mkdir dir="${user.home}/.globus/certificates"/>
				<copy todir="${user.home}/.globus/certificates" overwrite="true">
					<fileset dir="${grid.dist.relative.dir}/${TARGET_GRID}/certificates">
						<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss" depends="
		install:jboss:configure:bindings,
		install:jboss:configure:grid-ports,
		install:jboss:configure:login-config,
		install:jboss:configure:login-config-grid,
		install:jboss:configure:datasource,
		install:jboss:configure:libraries,
		install:jboss:configure:log4j
		">
	</target>

	<!-- bug in BDA macro -->
	<target name="install:jboss:configure:log4j" unless="exclude.jboss">
		<property name="log4j.template.file" value="${system.config.client.webapp.dir}/WEB-INF/classes/log4j-jboss.xml" />
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.bak" overwrite="true" />
		<copy file="${log4j.template.file}" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" overwrite="true">
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>
	</target>

	<target name="install:jboss:configure:bindings" unless="exclude.jboss">
		<echo message="Configuring JBoss ports (bindings)"/>
		<jboss-bindings jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml" jboss.server.binding.template.location="${jboss-bindings.file}" jboss.server.ports.name="${jboss.server.ports.name}" />
		<echo message="Updating JBoss shutdown.jar to allow shutdown without command line args"/>
		<jboss-update-shutdown
				jboss.home="${jboss.home}"
				jboss.server.hostname="${jboss.server.hostname}"
				jboss.server.jndi.port="${jboss.server.jndi.port}"
		/>
	</target>
	
	<target name="install:jboss:configure:grid-ports" unless="exclude.jboss" >
		<echo message="Configuring secure grid in JBoss"/>
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="modifying ${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"/>
				<echo message="modifying server.xml adding https connector"/>
				<grid-secure-configure-connector
						appserver.conf.dir="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar"
						appserver.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
						appserver.server-xml.service.name="jboss.web"
						grid.secure.dir="${grid.dist.relative.dir}/${TARGET_GRID}"
						grid.secure.enable="${GRID_LOGIN_MODULE_ENABLED}"
						grid.secure.port="${jboss.server.ssl.port}" 
						grid.secure.key.file="host-key.pem"
						grid.secure.cert.file="host-cert.pem"
				/>
				<echo message="configuring https valve and connector "/>
				<grid-secure-configure-valve
						appserver.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
						appserver.server-xml.service.name="jboss.web"
				/>
				<xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
					dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml">
					<remove path="/Server/Service[@name='jboss.web']/ConnenctorEngine[@name='jboss.web']/Valve[@className='org.globus.tomcat.coyote.valves.HTTPSValve55']" />
					<insert path="/Server/Service[@name='jboss.web']/Engine[@name='jboss.web']">
						<![CDATA[                               
						<Valve className="org.globus.tomcat.coyote.valves.HTTPSValve55"/>
						]]>                                     
					</insert>
				</xmltask>
			</then>
		</if>
	</target>


	<target name="install:jboss:configure:login-config" unless="exclude.jboss" >
		<if>
			<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<switch value="${database.type}">
					<case value="oracle">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar "/>
					</case>
					<case value="mysql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
					</case>
					<case value="postgresql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
					</case>
					<case value="hsqldb">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/hsqldb-1.8.0.7.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<echo message="${csm.database.driver.file}"/>
				<echo message="${jboss.home}/server/${jboss.server.name}/lib"/>
				<copy file="${csm.database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" failonerror="false"/>
				<echo message="Inserting ${login-config.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
				<jboss-login-config authentication.type="db" login-config.db.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" login-config.ldap.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" jboss.server.name="${jboss.server.name}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:login-config-grid" unless="exclude.jboss" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="Inserting ${login-config.grid.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
				<jboss-login-config authentication.type="db" login-config.db.file="${package.client.jboss.default.conf.dir}/${login-config.grid.block.file}" login-config.ldap.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" jboss.server.name="${jboss.server.name}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:datasource"  unless="exclude.jboss"  >
		<if>
			<equals arg1="${USE_DATA_SOURCE}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.jboss.default.deploy.dir}/${PROJECT_NAME}-ds.xml" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
				<echo message="Copying libraries to JBoss" />
				<copy todir="${jboss.home}/server/${jboss.server.name}/lib">
					<fileset dir="${package.client.jboss.default.lib.dir}">
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:libraries" unless="exclude.jboss">
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="Copying libraries to JBoss" />
				<copy todir="${jboss.home}/server/${jboss.server.name}/lib">
					<fileset dir="${package.client.jboss.default.lib.dir}">
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="Copying libraries to JBoss" />
				<switch value="${database.type}">
					<case value="oracle">
						<property name="clm.database.driver.file" value="ojdbc14-*.jar "/>
					</case>
					<case value="mysql">
						<property name="clm.database.driver.file" value="mysql-connector-java-*.jar"/>
					</case>
					<case value="postgresql">
						<property name="clm.database.driver.file" value="postgresql-jdbc3-*.jar"/>
					</case>
					<case value="hsqldb">
						<property name="clm.database.driver.file" value="hsqldb-*.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<copy todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" failonerror="false">
					<fileset dir="${bda-utils.dir}">
						<include name="${clm.database.driver.file}" />
					</fileset>
				</copy>
				<copy todir="${jboss.home}/server/${jboss.server.name}/lib">
					<fileset dir="${package.client.jboss.default.lib.dir}">
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="install:jboss:project-webapp" description="Deploy example-webapp and common libraries to jboss installation" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<copy file="${package.client.jboss.default.deploy.dir}/${PROJECT_NAME}.war" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
	</target>

	<target name="install:jboss:grid-login-webapp" description="Deploy grid-webapp and default/lib libraries to jboss installation" unless="exclude.jboss">
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.jboss.default.deploy.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.war" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure"  description="Configure tomcat (change ports and login-config)" unless="exclude.tomcat" depends="
		install:tomcat:configure:ports,
		install:tomcat:configure:grid-ports,
		install:tomcat:configure:login-config,
		install:tomcat:configure:project-context,
		install:tomcat:configure:grid-login-project-context,
		install:tomcat:configure:global-resource,
		install:tomcat:configure:libraries
		">
	</target>

	<target name="install:tomcat:configure:ports" unless="exclude.tomcat" >
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Updating Tomcat Ports"/>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml" failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog"/>
					<replace path="(//Connector)[1]/@port" withtext="${tomcat.port.http}" />
					<replace path="(//Connector)/@redirectPort" withtext="${tomcat.port.ssl}" />
					<replace path="(//Connector)[@protocol='AJP/1.3']/@port" withtext="${tomcat.port.ajp}" />
					<replace path="(//Server)/@port" withtext="${tomcat.port.shutdown}" />
				</xmltask>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:grid-ports" unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="configuring https valve and connector "/>
				<grid-secure-configure-connector 
					appserver.conf.dir="${tomcat.home}/conf" 
					appserver.server-xml.file="${tomcat.home}/conf/server.xml" 
					appserver.server-xml.service.name="Catalina" 
					grid.secure.enable="${GRID_LOGIN_MODULE_ENABLED}" 
					grid.secure.port="${tomcat.port.ssl}" 
					grid.secure.dir="${grid.dist.relative.dir}/${TARGET_GRID}" 
					grid.secure.key.file="host-key.pem" 
					grid.secure.cert.file="host-cert.pem" />
				<grid-secure-configure-valve 
					appserver.server-xml.file="${tomcat.home}/conf/server.xml" 
					appserver.server-xml.service.name="Catalina" />
					
				<!-- 	
				<xmltask source="${tomcat.home}/conf/server.xml"
					dest="${tomcat.home}/conf/server.xml">
					<remove path="/Server/Service[@name='Catalina']/ConnenctorEngine[@name='Catalina']/Valve[@className='org.globus.tomcat.coyote.valves.HTTPSValve']" />
					<insert path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']">
						<![CDATA[                               
						<Valve className="org.globus.tomcat.coyote.valves.HTTPSValve"/>
						]]>                                     
					</insert>
				</xmltask>
				 -->
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:login-config" unless="exclude.tomcat" >
		<if>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<switch value="${database.type}">
					<case value="oracle">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar "/>
					</case>
					<case value="mysql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.5.jar"/>
					</case>
					<case value="postgresql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
					</case>
					<case value="hsqldb">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/hsqldb-1.8.0.7.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<copy file="${csm.database.driver.file}" todir="${catalina.home}/server/lib" overwrite="true" failonerror="false"/>
				<copyfile src="${package.client.tomcat.serverxml.dir}/login.config" dest="${tomcat.home}/conf/login.config"/>
				<propertyfile file="${tomcat.home}/conf/catalina.properties" comment="append login.config file path">
					<entry key="java.security.auth.login.config" value="${catalina.home}/conf/login.config" />
				</propertyfile>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:project-context"  unless="exclude.tomcat" >
		<if>
			<or>
				<equals arg1="${USE_DATA_SOURCE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</or>
			<then>
				<copy file="${package.client.tomcat.context.dir}/${PROJECT_NAME}.xml" todir="${tomcat.home}/conf/Catalina/localhost" overwrite="true"  />
			</then>
			<else>
				<delete file="${tomcat.home}/conf/Catalina/localhost/${PROJECT_NAME}.xml" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:configure:grid-login-project-context"  unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.tomcat.context.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.xml" todir="${tomcat.home}/conf/Catalina/localhost" overwrite="true"  />
			</then>
			<else>
				<delete file="${tomcat.home}/conf/Catalina/localhost/${SDK_GRID_LOGIN_SERVICE_NAME}.xml" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:configure:global-resource" unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<property name="naming.resource.server.xml" value="${package.client.tomcat.serverxml.dir}/server-global-naming-resource-block.xml" />
				<property name="naming.resource.param.server.xml" value="${package.client.tomcat.serverxml.dir}/server-global-naming-resource-params-block.xml" />
				<echo message="configuring global resources and resource params"/>

				<echo message="Inserting ${naming.resource.server.xml} into ${tomcat.home}/conf/server.xml" />
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="//GlobalNamingResources/Resource[2]"/>
				</xmltask>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml" failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog" />
					<insert path="//GlobalNamingResources/Resource" file="${naming.resource.server.xml}" position="after" />
				</xmltask>
				
				<!-- 
				<echo message="Inserting ${naming.resource.param.server.xml} into ${tomcat.home}/conf/server.xml" />
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="//GlobalNamingResources/ResourceParams[2]"/>
				</xmltask>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml"
					dest="${tomcat.home}/conf/server.xml"
					failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog"/>
					<insert path="//GlobalNamingResources/ResourceParams" file="${naming.resource.param.server.xml}" position="after"/>
				</xmltask>
				 -->
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:libraries" description="Deploy grid-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<echo message="copying jars into tomcat common and server folder "/>
		<if>
			<available file="${package.client.tomcat.dir}/common/endorsed/xercesImpl-2.7.1.jar"/>
			<then>
				<delete file="${tomcat.home}/common/endorsed/xercesImpl.jar"/>
			</then>
		</if>
		<copy todir="${tomcat.home}">
			<fileset dir="${package.client.tomcat.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="install:tomcat:project-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<delete dir="${tomcat.home}//webapps/${PROJECT_NAME}" quiet="true"/>
		<copy file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
	</target>

	<target name="install:tomcat:grid-login-webapp" description="Deploy grid-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<delete dir="${tomcat.home}//webapps/${SDK_GRID_LOGIN_SERVICE_NAME}" quiet="true"/>
				<copy file="${package.client.tomcat.webapps.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
			</then>
		</if>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database" depends="		
		common:init,
		install:database:prep
		">
		<if>
			<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
			<then>
				<switch value="${DB_TYPE}">
					<case value="oracle">
						<property name="TEMP_DB_SCHEMA" value="${DB_USERNAME}" />
					</case>
					<case value="mysql">
						<property name="TEMP_DB_SCHEMA" value="${DB_NAME}" />
					</case>
					<case value="postgresql">
						<property name="TEMP_DB_SCHEMA" value="public" />
					</case>			
					<default>
						<fail message="Invalid database type ${DB_TYPE}" />
					</default>
				</switch>
				<database-clean database.driver="${DB_DRIVER}" database.url="${DB_CONNECTION_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" database.schema="${TEMP_DB_SCHEMA}" database.re-create="false" database.drop-schema="${DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${DB_TYPE}" database.url="${DB_CONNECTION_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" db.install.create.oracle.file.list="${db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${db.install.create.mysql.file.list}" db.install.create.postgresql.file.list="${db.install.create.postgresql.file.list}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CSM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			</and>
			<then>
				<switch value="${DB_TYPE}">
					<case value="oracle">
						<property name="CSM_TEMP_DB_SCHEMA" value="${CSM_DB_USERNAME}" />
					</case>
					<case value="mysql">
						<property name="CSM_TEMP_DB_SCHEMA" value="${DB_NAME}" />
					</case>
					<case value="postgresql">
						<property name="CSM_TEMP_DB_SCHEMA" value="public" />
					</case>			
					<default>
						<fail message="Invalid database type ${DB_TYPE}" />
					</default>
				</switch>
				<database-clean database.driver="${CSM_DB_DRIVER}" database.url="${CSM_DB_CONNECTION_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" database.schema="${CSM_TEMP_DB_SCHEMA}" database.re-create="false" database.drop-schema="${CSM_DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${CSM_DB_TYPE}" database.url="${CSM_DB_CONNECTION_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" db.install.create.oracle.file.list="${csm.db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${csm.db.install.create.mysql.file.list}" db.install.create.postgresql.file.list="${db.install.create.postgresql.file.list}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CLM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
			</and>
			<then>
				<database-clean database.driver="${CLM_DB_DRIVER}" database.url="${CLM_DB_CONNECTION_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" database.schema="${CLM_DB_NAME}" database.re-create="false" database.drop-schema="${CLM_DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${CLM_DB_TYPE}" database.url="${CLM_DB_CONNECTION_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" db.install.create.oracle.file.list="${clm.db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${clm.db.install.create.mysql.file.list}" />
			</then>
		</if>
		<!--
		<database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml" />
		<database-tag/>-->
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:init,
		install:common:validation:pre-install
		">
		<!--  database-pre-install needs system user name and password
		<if>
			<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
			<then>
				<validate-pre-install-database database.driver="${DB_DRIVER}" database.system.url="${DB_SYSTEM_URL}}" database.system.user="${DB_SYSTEM_USERNAME}" database.system.password="${DB_SYSTEM_PASSWORD}" database.url="${DB_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" database.name="${DB_NAME}" database.type="${DB_TYPE}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CSM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			</and>
			<then>
				<validate-pre-install-database database.driver="${CSM_DB_DRIVER}" database.system.url="${CSM_DB_SYSTEM_URL}}" database.system.user="${CSM_DB_SYSTEM_USERNAME}" database.system.password="${CSM_DB_SYSTEM_PASSWORD}" database.url="${CSM_DB_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" database.name="${CSM_DB_NAME}" database.type="${CSM_DB_TYPE}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CLM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
			</and>
			<then>
				<validate-pre-install-database database.driver="${CLM_DB_DRIVER}" database.system.url="${CLM_DB_SYSTEM_URL}}" database.system.user="${CLM_DB_SYSTEM_USERNAME}" database.system.password="${CLM_DB_SYSTEM_PASSWORD}" database.url="${CLM_DB_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" database.name="${CLM_DB_NAME}" database.type="${CLM_DB_TYPE}" />
			</then>
		</if>-->
	</target>
	
	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">		
		<!-- Removed JDK version check
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
		-->
	</target>

	<macrodef name="execute-database-install">
		<attribute name="database.url"/>
		<attribute name="database.user"/>
		<attribute name="database.password"/>
		<attribute name="db.install.create.oracle.file.list" />
		<attribute name="db.install.create.mysql.file.list" />
		<attribute name="db.install.create.postgresql.file.list" />
		<attribute name="database.type" />
		<sequential>
			<echo message="@{database.type}"/>
			<switch value="@{database.type}">
				<case value="oracle">
					<database-install db.install.create.file.list="@{db.install.create.oracle.file.list}"  database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}" sql.delimiter="/" sql.delimitertype="row"/>
				</case>
				<case value="mysql">
					<database-install db.install.create.file.list="@{db.install.create.mysql.file.list}" database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}"/>
				</case>
				<case value="postgresql">
					<database-install db.install.create.file.list="@{db.install.create.postgresql.file.list}" database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}"/>
				</case>				
			</switch>
		</sequential>
	</macrodef>
</project>