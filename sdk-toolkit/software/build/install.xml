<?xml version="1.0" encoding="utf-8" ?>

<project name="caCORE SDK - Installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="codegen.properties" />
	<property name="project.name" value="${PROJECT_NAME}"/>

	<import file="bda-master-install.xml"/>

	<!-- Grid related properties -->
	<property name="grid.secure.key.file.location" value="${security.dir.src}/${grid.secure.key.file}" />
	<property name="grid.secure.cert.file.location" value="${security.dir.src}/${grid.secure.cert.file}" />

	<property name="jboss.server.name" value="default"/>
	<property name="grid.secure.cert.location" value="${security.dist.relative.dir}/${grid.secure.cert.file}"/>
	<property name="grid.secure.key.location" value="${security.dist.relative.dir}/${grid.secure.key.file}"/>

	<property name="database.type" value="${DB_TYPE}"/>
	<property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${PROJECT_NAME}"/>
	<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${PROJECT_NAME}"/>
	
	<!-- Set application.base.path based on platform -->
	<condition property="application.base.path" value="${application.base.path.linux}">
	    <or>
		<os family="unix"/>
		<os family="mac"/>
	    </or>
	</condition>

	<condition property="application.base.path" value="${application.base.path.windows}">
	    <os family="windows"/>
	</condition>
	<echo message="application.base.path=${application.base.path}"/>

	<property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
                <jboss-version
                        />
        <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
                <tomcat-version
                        />
                        
	<switch value="${SERVER_TYPE}">
		<case value="jboss">
			<property name="SERVER_HOST_NAME" value="${jboss.server.hostname}"/>
			<property name="SERVER_HTTP_PORT" value="${jboss.server.port}"/>
			<property name="SERVER_SSL_PORT" value="${jboss.server.ssl.port}"/>
			<property name="exclude.tomcat" value="true"/>
		</case>
		<case value="tomcat">
			<property name="SERVER_HOST_NAME" value="${tomcat.hostname}"/>
			<property name="SERVER_SSL_PORT" value="${tomcat.port.ssl}"/>
			<property name="SERVER_HTTP_PORT" value="${tomcat.port.http}"/>
			<property name="exclude.jboss" value="true"/>
		</case>
		<default>
			<fail message="Invalid server type ${SERVER_TYPE}" />
		</default>
	</switch>

	<import file="build-reconfigure.xml" />

	<echo message="${SERVER_URL}"/>
	<property name="application.url" value="${SERVER_URL}" />

	<!-- webapp can use either Oracle or MySQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${DB_TYPE}">
		<case value="oracle">
			<property name="DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
			<property name="DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
			<property name="DB_CONNECTION_URL" value="jdbc:oracle:thin:@${DB_SERVER}:${DB_SERVER_PORT}:${DB_NAME}" />
		</case>
		<case value="mysql">
			<property name="DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
			<property name="DB_DRIVER" value="com.mysql.jdbc.Driver" />
			<property name="DB_CONNECTION_URL" value="jdbc:mysql://${DB_SERVER}:${DB_SERVER_PORT}/${DB_NAME}" />
		</case>
		<case value="postgresql">
			<property name="DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
			<property name="DB_DRIVER" value="org.postgresql.Driver" />
			<property name="DB_CONNECTION_URL" value="jdbc:postgresql://${DB_SERVER}:${DB_SERVER_PORT}/${DB_NAME}" />
		</case>
		<default>
			<fail message="Invalid database type ${DB_TYPE}" />
		</default>
	</switch>

	<if>
		<equals arg1="${SECURITY_ENABLED}" arg2="true"/>
		<then>
			<switch value="${CSM_DB_TYPE}">
				<case value="oracle">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
					<property name="CSM_DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:oracle:thin:@${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}:${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>
				<case value="mysql">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
					<property name="CSM_DB_DRIVER" value="com.mysql.jdbc.Driver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:mysql://${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}/${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>
				<case value="postgresql">
					<property name="CSM_DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
					<property name="CSM_DB_DRIVER" value="org.postgresql.Driver" />
					<property name="CSM_DB_CONNECTION_URL" value="jdbc:postgresql://${CSM_DB_SERVER}:${CSM_DB_SERVER_PORT}/${CSM_DB_NAME}" />
					<echo message="${CSM_DB_DRIVER}  driver"/>
				</case>
				<default>
					<fail message="Invalid database type ${CSM_DB_TYPE}" />
				</default>
			</switch>
		</then>
	</if>

	<if>
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
		<then>
			<switch value="${CLM_DB_TYPE}">
				<case value="oracle">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.OracleDialect" />
					<property name="CLM_DB_DRIVER" value="oracle.jdbc.driver.OracleDriver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:oracle:thin:@${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}:${CLM_DB_NAME}" />
				</case>
				<case value="mysql">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.MySQLDialect" />
					<property name="CLM_DB_DRIVER" value="com.mysql.jdbc.Driver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:mysql://${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}/${CLM_DB_NAME}" />
				</case>
				<case value="postgresql">
					<property name="CLM_DB_DIALECT" value="org.hibernate.dialect.PostgreSQLDialect" />
					<property name="CLM_DB_DRIVER" value="org.postgresql.Driver" />
					<property name="CLM_DB_CONNECTION_URL" value="jdbc:postgresql://${CLM_DB_SERVER}:${CLM_DB_SERVER_PORT}/${CLM_DB_NAME}" />
				</case>
				<default>
					<fail message="Invalid database type ${CLM_DB_TYPE}" />
				</default>
			</switch>
		</then>
	</if>

	<if>
		<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" />
		<then>
			<if>
				<or>
					<equals arg1="${TARGET_GRID}" arg2="${TRAINING_TARGET_GRID}" />
					<equals arg1="${TARGET_GRID}" arg2="${NCI_QA_TARGET_GRID}" />
					<equals arg1="${TARGET_GRID}" arg2="${NCI_STAGE_TARGET_GRID}" />
					<equals arg1="${TARGET_GRID}" arg2="${NCI_PROD_TARGET_GRID}" />
				</or>
				<then>
					<property file="${grid.dist.relative.dir}/${TARGET_GRID}/service_urls.properties" />
					<property name="CAGRID_AUTHENTICATION_SERVICE_URL" value="${cagrid.master.dorian.service.url}" />
					<property name="CAGRID_DORIAN_SERVICE_URL" value="${CAGRID_AUTHENTICATION_SERVICE_URL}" />
				</then>
				<else>
					<fail message="Invalid target grid ${TARGET_GRID}." />
				</else>
			</if>
		</then>
	</if>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:init,
		install:common:validation:pre-install,
		install:database:validation:pre-install,
		install:re-configure,
		install:database
		">
		<if>
			<or>
				<equals arg1="${REMOTE_JAVA_INTERFACE_ENABLED}" arg2="true" />
				<equals arg1="${WEBSERVICE_INTERFACE_ENABLED}" arg2="true" />
				<equals arg1="${RESTFUL_XML_INTERFACE_ENABLED}" arg2="true" />
				<equals arg1="${RESTFUL_HTML_INTERFACE_ENABLED}" arg2="true" />
				<equals arg1="${RESTFUL_JSON_INTERFACE_ENABLED}" arg2="true" />
			</or>
			<then>
				<antcall target="install:tomcat" />
				<antcall target="install:jboss" />
				<antcall target="install:common:post" />
				<antcall target="install:common:validation:post-install" />
			</then>
		</if>
	</target>

	<target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:init,
		install:jboss:validation:pre-install,
		install:jboss:stop,
		install:jboss:validation:pre-install:ports,
		install:jboss:clean,
		install:jboss:binaries,
		install:jboss:project-webapp,
		install:jboss:coberturaflush-webapp,
		install:jboss:grid-login-webapp,
		install:server:root-certs,
		install:jboss:configure,
		install:post:jboss,
		install:jboss:start,
		install:jboss:validation:post-install
		" >
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="		
		common:tomcat:init,
		common:init,
		install:tomcat:validation:pre-install,
		install:tomcat:stop,
		install:tomcat:validation:pre-install:ports,
		install:tomcat:clean,
		install:tomcat:binaries,
		install:tomcat:project-webapp,
		install:tomcat:coberturaflush-webapp,
		install:tomcat:grid-login-webapp,
		install:server:root-certs,
		install:tomcat:configure,
		install:post:tomcat,
		install:tomcat:start,
		install:tomcat:validation:post-install
		">
	</target>

	<target name="install:jboss:clean" unless="exclude.jboss" depends="common:jboss:init,common:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<sleep seconds="5" />
				<property name="backup.count" value="5" />
				<if>
					<not>
						<equals arg1="${exclude.jboss.backup}" arg2="true" casesensitive="false" trim="true" />
					</not>
					<then>
						<!-- Jboss backup, do not compress until install is finished -->
						<property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss" />

						<!-- So these directories won't be included in the backup, they are not needed to use jboss -->
						<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
						<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />

						<backup-dir src.dir="${jboss.home}" backup.base.dir="${backup.jboss.base.dir}" backup.count="${backup.count}" />
					</then>
				</if>
				<delete dir="${jboss.home}" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="common:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false" trim="true"  />
			<then>
				<delete dir="${tomcat.home}" />
				<dirname file="${tomcat.home}" property="tomcat.base.dir" />
				<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
				<if>
					<os family="unix" />
					<then>
						<chmod dir="${tomcat.home}/bin" perm="ugo+rx" includes="**/*.sh" />
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="install:tomcat:clean" unless="exclude.tomcat" depends="common:tomcat:init">
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<sleep seconds="20" />
				<property name="backup.count" value="5"/>
				<if>
					<not>
						<equals arg1="${exclude.tomcat.backup}" arg2="true" casesensitive="false" trim="true" />
					</not>
					<then>
						<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>

						<backup-dir
							src.dir="${tomcat.home}"
							backup.base.dir="${backup.tomcat.base.dir}"
							backup.count="${backup.count}"
							/>
					</then>
				</if>
				<delete dir="${tomcat.home}"/>
			</then>
		</if>
	</target>

	<target name="install:re-configure" description="Configure example-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration">
		<antcall target="package-install-system"/>
	</target>

	<target name="install:server:root-certs" >
		<if>
			<istrue value="${GRID_LOGIN_MODULE_ENABLED}"/>
			<then>
				<mkdir dir="${user.home}/.globus/certificates"/>
				<copy todir="${user.home}/.globus/certificates" overwrite="true">
					<fileset dir="${grid.dist.relative.dir}/${TARGET_GRID}/certificates">
						<include name="*"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>


	<target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss" depends="
		install:jboss:configure:grid-ports,
		install:jboss:configure:login-config,
		install:jboss:configure:login-config-grid,
		install:jboss:configure:datasource,
		install:jboss:configure:libraries,
		install:jboss:configure:log4j
		">
		
                <jboss-configure
                        jboss.grid.configure="false"
                        jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                        jboss.server.binding.template.location="${jboss.server.binding.template.location}"
                        jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"
                        proxy.update.connector.port.ssl="${jboss.ssl.port}"/>
	</target>



	<target name="common:jboss:grid:init" depends="common:init:pre" unless="exclude.jboss">
                <if>
                        <isset property="exclude.jboss.grid"/>
                        <then>
                                <property name="jboss.grid.enable" value="false"/>
                        </then>
                        <else>
                                <property name="jboss.grid.enable" value="true"/>
                        </else>
                </if>
        </target>
        <target name="common:tomcat:grid:init" depends="common:init:pre" unless="exclude.tomcat">
                <if>
                        <isset property="exclude.tomcat.grid"/>
                        <then>
                                <property name="tomcat.grid.enable" value="false"/>
                        </then>
                        <else>
                                <property name="tomcat.grid.enable" value="true"/>
                        </else>
                </if>
        </target>	
        
        
        
	<target name="deploy:remote:upgrade:ahp" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" >
		<!--
		  * Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).
		  * Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into.
		  * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
		-->
		<!-- Call macro to deploy files on desired server -->
		<echoproperties  prefix="ssh"> <propertyset negate="yes" > <propertyref regex="passw" /> </propertyset> </echoproperties>
		<deploy-files dist.file="${bda-blueprints-webapp.upgrade.zip.file}" />
		<override-properties-prep
			override.properties="@{override.properties}"
			override.properties.string.property.name="override.properties.string"
			/>
		<!-- SSH to machine ant run ant command line to install application -->
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} ${upgrade.target}" />
	</target>
	
	
	<!-- bug in BDA macro -->
	<target name="install:jboss:configure:log4j" depends="common:init:pre" unless="exclude.jboss">
		<property name="log4j.template.file" value="${system.config.client.webapp.dir}/WEB-INF/classes/log4j-jboss.xml" />
		<copy file="${jboss.home}/server/${jboss.server.name}/conf/jboss-log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.bak" overwrite="true" />
		<copy file="${log4j.template.file}" tofile="${jboss.home}/server/${jboss.server.name}/conf/jboss-log4j.xml" overwrite="true">
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>
	</target>

	<target name="install:jboss:configure:bindings" unless="exclude.jboss">
		<echo message="Configuring JBoss ports (bindings)"/>
		<jboss-bindings jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml" jboss.server.binding.template.location="${jboss-bindings.file}" jboss.server.ports.name="${jboss.server.ports.name}" />
		<echo message="Updating JBoss shutdown.jar to allow shutdown without command line args"/>
		<jboss-update-shutdown
				jboss.home="${jboss.home}"
				jboss.server.hostname="${jboss.server.hostname}"
				jboss.server.jndi.port="${jboss.server.jndi.port}"
		/>
	</target>

	<target name="install:jboss:configure:grid-ports" unless="exclude.jboss" >
		<echo message="Configuring secure grid in JBoss"/>
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="modifying ${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"/>
				<echo message="modifying server.xml adding https connector"/>
				<grid-secure-configure-connector
						appserver.conf.dir="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar"
						appserver.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
						appserver.server-xml.service.name="jboss.web"
						grid.secure.dir="${grid.dist.relative.dir}/${TARGET_GRID}"
						grid.secure.enable="${GRID_LOGIN_MODULE_ENABLED}"
						grid.secure.port="${jboss.server.ssl.port}" 
						grid.secure.key.file="host-key.pem"
						grid.secure.cert.file="host-cert.pem"
				/>
				<echo message="configuring https valve and connector "/>
				<grid-secure-configure-valve
						appserver.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
						appserver.server-xml.service.name="jboss.web"
				/>
				<xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
					dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml">
					<remove path="/Server/Service[@name='jboss.web']/ConnenctorEngine[@name='jboss.web']/Valve[@className='org.globus.tomcat.coyote.valves.HTTPSValve55']" />
					<insert path="/Server/Service[@name='jboss.web']/Engine[@name='jboss.web']">
						<![CDATA[                               
						<Valve className="org.globus.tomcat.coyote.valves.HTTPSValve55"/>
						]]>                                     
					</insert>
				</xmltask>
			</then>
		</if>
	</target>


	<target name="install:jboss:configure:login-config" unless="exclude.jboss" >
		<if>
			<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<switch value="${database.type}">
					<case value="oracle">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
					</case>
					<case value="mysql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.1.13.jar"/>
					</case>
					<case value="postgresql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
					</case>
					<case value="hsqldb">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/hsqldb-1.8.0.7.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<echo message="${csm.database.driver.file}"/>
				<echo message="${jboss.home}/server/${jboss.server.name}/lib"/>
				<copy file="${csm.database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" failonerror="false"/>
				<echo message="Inserting ${login-config.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
				<jboss-login-config authentication.type="db" login-config.db.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" login-config.ldap.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" jboss.server.name="${jboss.server.name}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:login-config-grid" unless="exclude.jboss" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="Inserting ${login-config.grid.block.file} into ${jboss.home}/server/${jboss.server.name}/conf/login-config.xml" />
				<jboss-login-config authentication.type="db" login-config.db.file="${package.client.jboss.default.conf.dir}/${login-config.grid.block.file}" login-config.ldap.file="${package.client.jboss.default.conf.dir}/${login-config.block.file}" jboss.server.name="${jboss.server.name}"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:datasource"  unless="exclude.jboss"  >
		<if>
			<equals arg1="${USE_DATA_SOURCE}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.jboss.default.deploy.dir}/${PROJECT_NAME}-ds.xml" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
				<echo message="Copying libraries to JBoss" />
			</then>
		</if>
	</target>

	<target name="install:jboss:configure:libraries" unless="exclude.jboss">
		<available file="${package.client.jboss.default.lib.dir}" type="dir" property="package.client.jboss.default.lib.dir.present"/>

		<if>
			<equals arg1="${package.client.jboss.default.lib.dir.present}" arg2="true"/>
			<then>
				<echo message="Copying libraries to JBoss" />
				<copy todir="${jboss.home}/server/${jboss.server.name}/lib">
					<fileset dir="${package.client.jboss.default.lib.dir}">
						<include name="**/*.*"/>
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="Copying libraries to JBoss" />
				<switch value="${database.type}">
					<case value="oracle">
						<property name="clm.database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
					</case>
					<case value="mysql">
						<property name="clm.database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.1.13.jar"/>
					</case>
					<case value="postgresql">
						<property name="clm.database.driver.file" value="${bda-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<echo message="${clm.database.driver.file}"/>
				<echo message="${jboss.home}/server/${jboss.server.name}/lib"/>
				<copy file="${clm.database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" failonerror="true"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:project-webapp" description="Deploy example-webapp and common libraries to jboss installation" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<copy file="${package.client.jboss.default.deploy.dir}/${PROJECT_NAME}.war" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
	</target>

	<target name="install:jboss:coberturaflush-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.jboss">
		<if>
			<equals arg1="${test.cobertura.lib.exist}" arg2="true" />
			<then>
				<copy file="${common.dist.relative.dir}/cobertura/coberturaFlush.war" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
			</then>
		</if>
	</target>

	<target name="install:jboss:grid-login-webapp" description="Deploy grid-webapp and default/lib libraries to jboss installation" unless="exclude.jboss">
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp" />
		<delete dir="${jboss.home}/server/${jboss.server.name}/work" />
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.jboss.default.deploy.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.war" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
			</then>
		</if>
	</target>

<!--	<target name="install:tomcat:configure"  description="Configure tomcat (change ports and login-config)" unless="exclude.tomcat" depends="
		install:tomcat:configure:ports,
		install:tomcat:configure:grid-ports,
		install:tomcat:configure:login-config,
		install:tomcat:configure:project-context,
		install:tomcat:configure:grid-login-project-context,
		install:tomcat:configure:global-resource,
		install:tomcat:configure:libraries
		">
	</target>
-->
	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat" depends="common:init">

		<!-- need to pass ports for new override functionality.  It appears macros attribute defaults get initialized at load time not and invoke.  When I changed the value of the property then called the macro the old values were being used. -->

		<tomcat-configure

			tomcat.port.http="${tomcat.port.http}"

			tomcat.port.ajp="${tomcat.port.ajp}"

			tomcat.port.ssl="${tomcat.port.ssl}"

			tomcat.port.shutdown="${tomcat.port.shutdown}"

			tomcat.grid.configure="${tomcat.grid.enable}"

			/>

	</target>
	
	<target name="install:tomcat:configure:ports" unless="exclude.tomcat" >
		<if>
			<equals arg1="${INSTALL_CONTAINER}" arg2="true" casesensitive="false"/>
			<then>
				<echo message="Updating Tomcat Ports"/>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml" failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog"/>
					<replace path="(//Connector)[1]/@port" withtext="${tomcat.port.http}" />
					<replace path="(//Connector)/@redirectPort" withtext="${tomcat.port.ssl}" />
					<replace path="(//Connector)[@protocol='AJP/1.3']/@port" withtext="${tomcat.port.ajp}" />
					<replace path="(//Server)/@port" withtext="${tomcat.port.shutdown}" />
				</xmltask>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:grid-ports" unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<echo message="configuring https valve and connector "/>
				<grid-secure-configure-connector 
					appserver.conf.dir="${tomcat.home}/conf" 
					appserver.server-xml.file="${tomcat.home}/conf/server.xml" 
					appserver.server-xml.service.name="Catalina" 
					grid.secure.enable="${GRID_LOGIN_MODULE_ENABLED}" 
					grid.secure.port="${tomcat.port.ssl}" 
					grid.secure.dir="${grid.dist.relative.dir}/${TARGET_GRID}" 
					grid.secure.key.file="host-key.pem" 
					grid.secure.cert.file="host-cert.pem" />
				<grid-secure-configure-valve 
					appserver.server-xml.file="${tomcat.home}/conf/server.xml" 
					appserver.server-xml.service.name="Catalina" />

				<!-- 	
				<xmltask source="${tomcat.home}/conf/server.xml"
					dest="${tomcat.home}/conf/server.xml">
					<remove path="/Server/Service[@name='Catalina']/ConnenctorEngine[@name='Catalina']/Valve[@className='org.globus.tomcat.coyote.valves.HTTPSValve']" />
					<insert path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']">
						<![CDATA[                               
						<Valve className="org.globus.tomcat.coyote.valves.HTTPSValve"/>
						]]>                                     
					</insert>
				</xmltask>
				 -->
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:login-config" unless="exclude.tomcat" >
		<if>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<switch value="${database.type}">
					<case value="oracle">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
					</case>
					<case value="mysql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.1.13.jar"/>
					</case>
					<case value="postgresql">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
					</case>
					<case value="hsqldb">
						<property name="csm.database.driver.file" value="${bda-utils.dir}/hsqldb-1.8.0.7.jar"/>
					</case>
					<default>
						<fail message="Invalid or unsupported database type ${database.type}"/>
					</default>
				</switch>
				<copy file="${csm.database.driver.file}" todir="${catalina.home}/server/lib" overwrite="true" failonerror="false"/>
				<copyfile src="${package.client.tomcat.serverxml.dir}/login.config" dest="${tomcat.home}/conf/login.config"/>
				<propertyfile file="${tomcat.home}/conf/catalina.properties" comment="append login.config file path">
					<entry key="java.security.auth.login.config" value="${catalina.home}/conf/login.config" />
				</propertyfile>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:project-context"  unless="exclude.tomcat" >
		<if>
			<or>
				<equals arg1="${USE_DATA_SOURCE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</or>
			<then>
				<copy file="${package.client.tomcat.context.dir}/${PROJECT_NAME}.xml" todir="${tomcat.home}/conf/Catalina/localhost" overwrite="true"  />
			</then>
			<else>
				<delete file="${tomcat.home}/conf/Catalina/localhost/${PROJECT_NAME}.xml" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:configure:grid-login-project-context"  unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<copy file="${package.client.tomcat.context.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.xml" todir="${tomcat.home}/conf/Catalina/localhost" overwrite="true"  />
			</then>
			<else>
				<delete file="${tomcat.home}/conf/Catalina/localhost/${SDK_GRID_LOGIN_SERVICE_NAME}.xml" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:configure:global-resource" unless="exclude.tomcat" >
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<property name="naming.resource.server.xml" value="${package.client.tomcat.serverxml.dir}/server-global-naming-resource-block.xml" />
				<property name="naming.resource.param.server.xml" value="${package.client.tomcat.serverxml.dir}/server-global-naming-resource-params-block.xml" />
				<echo message="configuring global resources and resource params"/>

				<echo message="Inserting ${naming.resource.server.xml} into ${tomcat.home}/conf/server.xml" />
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="//GlobalNamingResources/Resource[2]"/>
				</xmltask>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml" failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog" />
					<insert path="//GlobalNamingResources/Resource" file="${naming.resource.server.xml}" position="after" />
				</xmltask>

				<!-- 
				<echo message="Inserting ${naming.resource.param.server.xml} into ${tomcat.home}/conf/server.xml" />
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="//GlobalNamingResources/ResourceParams[2]"/>
				</xmltask>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml"
					dest="${tomcat.home}/conf/server.xml"
					failWithoutMatch="true">
					<xmlcatalog refid="bda.xml.catalog"/>
					<insert path="//GlobalNamingResources/ResourceParams" file="${naming.resource.param.server.xml}" position="after"/>
				</xmltask>
				 -->
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure:libraries" description="Deploy grid-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<echo message="copying jars into tomcat common and server folder "/>
		<if>
			<available file="${package.client.tomcat.dir}/common/endorsed/xercesImpl-2.7.1.jar"/>
			<then>
				<delete file="${tomcat.home}/common/endorsed/xercesImpl.jar"/>
			</then>
		</if>
		<copy todir="${tomcat.home}">
			<fileset dir="${package.client.tomcat.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="install:tomcat:project-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<delete dir="${tomcat.home}//webapps/${PROJECT_NAME}" quiet="true"/>
		<copy file="${package.client.tomcat.webapps.dir}/${PROJECT_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
	</target>

	<target name="install:tomcat:coberturaflush-webapp" description="Deploy example-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<delete dir="${tomcat.home}/webapps/coberturaFlush" quiet="true"/>
		<if>
			<equals arg1="${test.cobertura.lib.exist}" arg2="true"/>
			<then>
				<copy file="${common.dist.relative.dir}/cobertura/coberturaFlush.war" todir="${tomcat.home}/webapps" overwrite="true" />
			</then>
		</if>
	</target>

 	<target name="install:tomcat:grid" description="Deploy grid to tomcat" unless="exclude.tomcat" depends="common:init">
                <mkdir dir="${tomcat.home}/webapps/${grid.dir.dest}"/>
                <unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" />
                <unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" />
                <unzip dest="${tomcat.home}/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" />
                <!-- Needed for Valve on tomcat 6.0.x -->
                <copy todir="${tomcat.home}/lib">
                        <fileset dir="${bda-utils.dir}">
                                <include name="commons-logging*"/>
                        </fileset>
                </copy>
                <unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.resource.dir}/${resource.file.jboss-globus-war}" />
                <unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" />
        </target>
        
	<target name="install:tomcat:grid-login-webapp" description="Deploy grid-webapp and common libraries to tomcat installation" unless="exclude.tomcat">
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<then>
				<delete dir="${tomcat.home}//webapps/${SDK_GRID_LOGIN_SERVICE_NAME}" quiet="true"/>
				<copy file="${package.client.tomcat.webapps.dir}/${SDK_GRID_LOGIN_SERVICE_NAME}.war" todir="${tomcat.home}/webapps" overwrite="true" />
			</then>
		</if>
	</target>

	<target name="install:jboss:validation:post-install" description="Run post-install checks from bda-utils" unless="exclude.jboss"
		depends="
		common:jboss:init,
		common:init,
		install:jboss:start
		">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-jboss />
			</then>
		</if>
	</target>

	<target name="install:jboss:init" depends="common:init:pre"  unless="exclude.jboss">
		<!-- determine if port configurations or port lists are being called -->
		<if>
			<isset property="jboss.ncicb-standard.port-config"/>
			<then>
				<!-- Read some port properties from standard bindings file -->
				<echo message="Using JBoss NCICB Standard port configurations"/>
				<if>
					<equals arg1="${jboss.major.version}" arg2="4"/>
					<then>
						<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
						
						<jboss-read-ports
							jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
							/>
						<jboss-bindings-validate
							jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
					/>
					</then>
					<elseif>
						<equals arg1="${jboss.major.version}" arg2="5"/>
						<then>
			                        	<property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
			                        	<property name="jboss.server.bindingfile.location" value="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"/>
							<property name="temp.ejb.file" value="${temp.dir}/ejb3-connectors-jboss-beans.xml"/>
							<copy tofile="${temp.ejb.file}" file="${bda-utils.dir}/resource/jboss-5.1.0.GA/ejb3-connectors-jboss-beans.xml"/>
							<jboss51-bindings-nci
								jboss.server.bindingfile.location="${basedir}/${jboss-bindings.file}"
								jboss.server.binding.template.location="${basedir}/${jboss-bindings.file}"
								
								/>
							<jboss51-read-ports-nci
								jboss.server.bindingfile.location="${basedir}/${jboss-bindings.file}"
								jboss.server.ejbfile.location="${temp.ejb.file}"
								/>
						</then>
					</elseif>
				</if>
				<echo message="http -${jboss.server.port} "/>
				<echo message="http -${jboss.server.jndi.port} "/>
                                <if>
                                        <equals arg1="${jboss.major.version}" arg2="4"/>
                                        <then>
                                                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
                                        </then>
                                        <else>
                                                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml"/>

                                        </else>
                                </if>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
					/>
			</then>
			<else>
				<!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
				<echo message="Using custom JBoss port configurations"/>
				<property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
				<properties-exist
					properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port,jboss.unifiedinvoker.port,jboss.hajndi.auto.port,jboss.ssl.port,jboss.jms2.netty.port,jboss.jms2.netty-ssl.port,jboss.transaction.recovery.port,jboss.transaction.status.port,jboss.transaction.processid.port"
					/>
			</else>
		</if>
	</target>
	
	<target name="install:jboss:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop" unless="exclude.jboss"
		depends="
		common:init,
		install:jboss:stop
		">
		<validate-pre-jboss-ports
			/>
	</target>

	<target name="install:jboss:validation:pre-install" description="Runs pre-install validation checks bda-utils"  unless="exclude.jboss"
		depends="
		common:jboss:init,common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-jboss
			/>
	</target>


	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database" depends="		
		common:init,
		install:database:prep
		">
		<if>
			<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
			<then>
				<switch value="${DB_TYPE}">
					<case value="oracle">
						<property name="TEMP_DB_SCHEMA" value="${DB_USERNAME}" />
					</case>
					<case value="mysql">
						<property name="TEMP_DB_SCHEMA" value="${DB_NAME}" />
					</case>
					<case value="postgresql">
						<property name="TEMP_DB_SCHEMA" value="public" />
					</case>
					<default>
						<fail message="Invalid database type ${DB_TYPE}" />
					</default>
				</switch>
				<database-clean database.driver="${DB_DRIVER}" database.url="${DB_CONNECTION_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" database.schema="${TEMP_DB_SCHEMA}" database.re-create="false" database.drop-schema="${DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${DB_TYPE}" database.url="${DB_CONNECTION_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" db.install.create.oracle.file.list="${db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${db.install.create.mysql.file.list}" db.install.create.postgresql.file.list="${db.install.create.postgresql.file.list}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${SECURITY_ENABLED}" arg2="true" />
				<equals arg1="${ENABLE_INSTANCE_LEVEL_SECURITY}" arg2="true"/>
				<not>
					<and>
						<equals arg1="${DB_SERVER}" arg2="${CSM_DB_SERVER}"/>
						<equals arg1="${DB_SERVER_PORT}" arg2="${CSM_DB_SERVER_PORT}"/>
						<equals arg1="${DB_NAME}" arg2="${CSM_DB_NAME}"/>
						<equals arg1="${DB_USERNAME}" arg2="${CSM_DB_USERNAME}"/>
					</and>
				</not>
			</and>
			<then>
				<fail message="if ENABLE_INSTANCE_LEVEL_SECURITY=true in codegen.properties then app database and csm database schema tables must be present in the app database schema.
					Please make sure the properties DB_SERVER and CSM_DB_SERVER, DB_SERVER_PORT and CSM_DB_SERVER_PORT, DB_NAME and CSM_DB_NAME, DB_USERNAME and CSM_DB_USERNAME have same property value in install.properties"/>
			</then>
		</if>

		<if>
			<and>
				<equals arg1="${CSM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			</and>
			<then>
				<if>
					<not>
						<and>
							<equals arg1="${DB_TYPE}" arg2="${CSM_DB_TYPE}" />
						</and>
					</not>
					<then>
						<fail message="invalid database type configuration. Please make sure DB_TYPE and CSM_DB_TYPE properties are same in install.properties" />
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
						<equals arg1="${DB_SERVER}" arg2="${CSM_DB_SERVER}" />
						<equals arg1="${DB_SERVER_PORT}" arg2="${CSM_DB_SERVER_PORT}" />
						<equals arg1="${DB_NAME}" arg2="${CSM_DB_NAME}" />
						<equals arg1="${DB_USERNAME}" arg2="${CSM_DB_USERNAME}" />
					</and>
					<then>
						<fail message="if DB_DROP_SCHEMA=true and CSM_DB_DROP_SCHEMA=true then app db and csm db must have different database server configurations. Please make sure the properties 1.)DB_SERVER and CSM_DB_SERVER 2.) DB_SERVER_PORT and CSM_DB_SERVER_PORT 3.)DB_NAME and CSM_DB_NAME 4.)DB_USERNAME and CSM_DB_USERNAME have different properties in install.properties" />
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${CLM_DB_DROP_SCHEMA}" arg2="true" />
						<equals arg1="${CLM_DB_SERVER}" arg2="${CSM_DB_SERVER}" />
						<equals arg1="${CLM_DB_SERVER_PORT}" arg2="${CSM_DB_SERVER_PORT}" />
						<equals arg1="${CLM_DB_NAME}" arg2="${CSM_DB_NAME}" />
						<equals arg1="${CLM_DB_USERNAME}" arg2="${CSM_DB_USERNAME}" />
					</and>
					<then>
						<fail message="if CLM_DB_DROP_SCHEMA=true and CSM_DB_DROP_SCHEMA=true then clm db and csm db must have different database server configurations. 
							Please make sure the properties 1.)CSM_DB_SERVER and CLM_DB_SERVER 2.) CSM_DB_SERVER_PORT and CLM_DB_SERVER_PORT 3.)CSM_DB_NAME and CLM_DB_NAME 4.)CSM_DB_USERNAME and CLM_DB_USERNAME have different properties in install.properties"/>
					</then>
				</if>
				<switch value="${DB_TYPE}">
					<case value="oracle">
						<property name="CSM_TEMP_DB_SCHEMA" value="${CSM_DB_USERNAME}" />
					</case>
					<case value="mysql">
						<property name="CSM_TEMP_DB_SCHEMA" value="${CSM_DB_NAME}" />
					</case>
					<case value="postgresql">
						<property name="CSM_TEMP_DB_SCHEMA" value="public" />
					</case>
					<default>
						<fail message="Invalid database type ${DB_TYPE}" />
					</default>
				</switch>

				<database-clean database.driver="${CSM_DB_DRIVER}" database.url="${CSM_DB_CONNECTION_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" database.schema="${CSM_TEMP_DB_SCHEMA}" database.re-create="false" database.drop-schema="${CSM_DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${CSM_DB_TYPE}" database.url="${CSM_DB_CONNECTION_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" db.install.create.oracle.file.list="${csm.db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${csm.db.install.create.mysql.file.list}" db.install.create.postgresql.file.list="${db.install.create.postgresql.file.list}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CLM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
			</and>
			<then>
				<if>
					<not>
						<and>
							<equals arg1="${DB_TYPE}" arg2="${CLM_DB_TYPE}" />
						</and>
					</not>
					<then>
						<fail message="invalid database type configuration. Please make sure DB_TYPE and CLM_DB_TYPE properties are same in install.properties" />
					</then>
				</if>
				<if>
					<and>
						<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
						<equals arg1="${DB_SERVER}" arg2="${CLM_DB_SERVER}" />
						<equals arg1="${DB_SERVER_PORT}" arg2="${CLM_DB_SERVER_PORT}" />
						<equals arg1="${DB_NAME}" arg2="${CLM_DB_NAME}" />
						<equals arg1="${DB_USERNAME}" arg2="${CLM_DB_USERNAME}" />
					</and>
					<then>
						<fail message="if DB_DROP_SCHEMA=true and CLM_DB_DROP_SCHEMA=true then app db and clm db must have different database server configurations. 
							Please make sure the properties 1.)DB_SERVER and CLM_DB_SERVER 2.) DB_SERVER_PORT and CLM_DB_SERVER_PORT 3.)DB_NAME and CLM_DB_NAME 4.)DB_USERNAME and CLM_DB_USERNAME have different properties in install.properties"/>
					</then>
				</if>
				<if>
					<equals arg1="${CSM_DB_DROP_SCHEMA}" arg2="true" />
					<and>
						<equals arg1="${CSM_DB_SERVER}" arg2="${CLM_DB_SERVER}" />
						<equals arg1="${CSM_DB_SERVER_PORT}" arg2="${CLM_DB_SERVER_PORT}" />
						<equals arg1="${CSM_DB_NAME}" arg2="${CLM_DB_NAME}" />
						<equals arg1="${CSM_DB_USERNAME}" arg2="${CLM_DB_USERNAME}" />
					</and>
					<then>
						<fail message="if CLM_DB_DROP_SCHEMA=true and CSM_DB_DROP_SCHEMA=true then clm db and csm db must have different database server configurations. 
							Please make sure the properties 1.)CSM_DB_SERVER and CLM_DB_SERVER 2.) CSM_DB_SERVER_PORT and CLM_DB_SERVER_PORT 3.)CSM_DB_NAME and CLM_DB_NAME 4.)CSM_DB_USERNAME and CLM_DB_USERNAME have different properties in install.properties"/>
					</then>
				</if>
				<switch value="${DB_TYPE}">
					<case value="oracle">
						<property name="CLM_TEMP_DB_SCHEMA" value="${CLM_DB_USERNAME}" />
					</case>
					<case value="mysql">
						<property name="CLM_TEMP_DB_SCHEMA" value="${CLM_DB_NAME}" />
					</case>
					<case value="postgresql">
						<property name="CLM_TEMP_DB_SCHEMA" value="public" />
					</case>
					<default>
						<fail message="Invalid database type ${DB_TYPE}" />
					</default>
				</switch>
				<database-clean database.driver="${CLM_DB_DRIVER}" database.url="${CLM_DB_CONNECTION_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" database.schema="${CLM_TEMP_DB_SCHEMA}" database.re-create="false" database.drop-schema="${CLM_DB_DROP_SCHEMA}" />
				<execute-database-install database.type="${CLM_DB_TYPE}" database.url="${CLM_DB_CONNECTION_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" db.install.create.oracle.file.list="${clm.db.install.create.oracle.file.list}" db.install.create.mysql.file.list="${clm.db.install.create.mysql.file.list}" />
			</then>
		</if>
		<!--
		<database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml" />
		<database-tag/>-->
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:init,
		install:common:validation:pre-install
		">
		<!--  database-pre-install needs system user name and password
		<if>
			<equals arg1="${DB_DROP_SCHEMA}" arg2="true" />
			<then>
				<validate-pre-install-database database.driver="${DB_DRIVER}" database.system.url="${DB_SYSTEM_URL}}" database.system.user="${DB_SYSTEM_USERNAME}" database.system.password="${DB_SYSTEM_PASSWORD}" database.url="${DB_URL}" database.user="${DB_USERNAME}" database.password="${DB_PASSWORD}" database.name="${DB_NAME}" database.type="${DB_TYPE}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CSM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			</and>
			<then>
				<validate-pre-install-database database.driver="${CSM_DB_DRIVER}" database.system.url="${CSM_DB_SYSTEM_URL}}" database.system.user="${CSM_DB_SYSTEM_USERNAME}" database.system.password="${CSM_DB_SYSTEM_PASSWORD}" database.url="${CSM_DB_URL}" database.user="${CSM_DB_USERNAME}" database.password="${CSM_DB_PASSWORD}" database.name="${CSM_DB_NAME}" database.type="${CSM_DB_TYPE}" />
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${CLM_DB_DROP_SCHEMA}" arg2="true" />
				<equals arg1="${CLM_DB_TYPE}" arg2="mysql" />
				<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
			</and>
			<then>
				<validate-pre-install-database database.driver="${CLM_DB_DRIVER}" database.system.url="${CLM_DB_SYSTEM_URL}}" database.system.user="${CLM_DB_SYSTEM_USERNAME}" database.system.password="${CLM_DB_SYSTEM_PASSWORD}" database.url="${CLM_DB_URL}" database.user="${CLM_DB_USERNAME}" database.password="${CLM_DB_PASSWORD}" database.name="${CLM_DB_NAME}" database.type="${CLM_DB_TYPE}" />
			</then>
		</if>-->
	</target>

	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
		<!-- Removed JDK version check
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
		-->
	</target>

	<macrodef name="jboss-configure2">
		<!-- jboss-bindings -->
		<attribute name="jboss.home" default="${jboss.home}"/>
		<attribute name="jboss.server.name" default="${jboss.server.name}"/>
		<attribute name="jboss.server.ports.name" default="${jboss.server.ports.name}"/>
		<attribute name="jboss.server.bindingfile.location" default="${jboss.home}/bindings/bindings.xml"/>
		<attribute name="jboss.server.binding.template.location" default="${jboss.server.binding.template.location}"/>
		<!-- jboss-login-config -->
		<attribute name="exclude.jboss-login-config" default="${exclude.jboss-login-config}"/>
		<attribute name="authentication.type" default="${authentication.type}"/>
		<attribute name="login-config.ldap.file" default="${jboss-conf.dir.dest}/login-config.ldap-block.xml"/>
		<attribute name="login-config.db.file" default="${jboss-conf.dir.dest}/login-config.db-block.xml"/>
		<!-- secure-jboss-console -->
		<attribute name="jboss.web.user" default="${jboss.web.user}"/>
		<attribute name="jboss.web.password" default="${jboss.web.password}"/>
		<!-- jboss-update-shutdown -->
		<attribute name="jboss.server.jndi.port" default="${jboss.server.jndi.port}"/>
		<attribute name="jboss.server.port" default="${jboss.server.port}"/>
		<attribute name="jboss.cobraorb.port" default="${jboss.cobraorb.port}"/>
		<attribute name="jboss.ejbinvoker.port" default="${jboss.ejbinvoker.port}"/>
		<attribute name="jboss.hajndi.port" default="${jboss.hajndi.port}"/>
		<attribute name="jboss.hajrmi.port" default="${jboss.hajrmi.port}"/>
		<attribute name="jboss.jms.port" default="${jboss.jms.port}"/>
		<attribute name="jboss.jmx-rmi.port" default="${jboss.jmx-rmi.port}"/>
		<attribute name="jboss.messaging.port" default="${jboss.messaging.port}"/>
		<attribute name="jboss.pooledha.port" default="${jboss.pooledha.port}"/>
		<attribute name="jboss.remoting.port" default="${jboss.remoting.port}"/>
		<attribute name="jboss.server.bind.port" default="${jboss.server.bind.port}"/>
		<attribute name="jboss.server.rmi.port" default="${jboss.server.rmi.port}"/>
		<attribute name="jboss.service.rmiobject.port" default="${jboss.service.rmiobject.port}"/>
		<attribute name="jboss.snmp.port" default="${jboss.snmp.port}"/>
		<attribute name="jboss.snmp-trapd.port" default="${jboss.snmp-trapd.port}"/>
		<attribute name="jboss.web.service.port" default="${jboss.web.service.port}"/>
		<!-- new with 5.1.0-->
		<attribute name="jboss.unifiedinvoker.port" default="${jboss.unifiedinvoker.port}"/>
		<attribute name="jboss.hajndi.auto.port" default="${jboss.hajndi.auto.port}"/>
		<attribute name="jboss.ssl.port" default="${jboss.ssl.port}"/>
		<attribute name="jboss.jms2.netty.port" default="${jboss.jms2.netty.port}"/>
		<attribute name="jboss.jms2.netty-ssl.port" default="${jboss.jms2.netty-ssl.port}"/>
		<attribute name="jboss.transaction.recovery.port" default="${jboss.transaction.recovery.port}"/>
		<attribute name="jboss.transaction.status.port" default="${jboss.transaction.status.port}"/>
		<attribute name="jboss.transaction.processid.port" default="${jboss.transaction.processid.port}"/>

		<!-- appserver-ssl-configure -->
		<attribute name="jboss.conf.dir" default="${jboss.home}/server/${jboss.server.name}/conf"/>
		<attribute name="jboss.server-xml.file" default="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"/>
		<attribute name="jboss.server-xml.service.name" default="jboss.web"/>
		<attribute name="jboss.ssl.enable" default="${jboss.ssl.enable}"/>
		<!-- This is the value inserted into the connector in server.xml, bindings updates this the real port at runtime. You could use the real value then the bindings would not match  and it would update, so this may change in the future. -->
		<!--<attribute name="jboss.ssl.port" default="8443"/>-->
		<attribute name="jboss.ssl.keystore.file" default="${jboss.ssl.keystore.file}"/>
		<attribute name="jboss.ssl.keystore.dir" default="${jboss.ssl.keystore.dir}"/>
		<attribute name="jboss.ssl.keystore.pass" default="${jboss.ssl.keystore.pass}"/>
		<attribute name="jboss.ssl.keystore.alias" default="${jboss.ssl.keystore.alias}"/>
		<attribute name="jboss.ssl.fullyqualified.hostname" default="${jboss.ssl.fullyqualified.hostname}"/>
		<!-- appserver-configure-external-hostname -->
		<attribute name="jboss.external.ssl.host" default="${jboss.external.ssl.host}"/>
		<attribute name="jboss.external.ssl.port" default="${jboss.external.ssl.port}"/>
		<attribute name="proxy.update.connector.port.ssl" default="8443"/>
		<attribute name="jboss.external.http.host" default="${jboss.external.http.host}"/>
		<attribute name="jboss.external.http.port" default="${jboss.external.http.port}"/>
		<attribute name="proxy.update.connector.port.http" default="8080"/>
		<attribute name="jboss.external.grid.secure.host" default="${jboss.external.grid.secure.host}"/>
		<attribute name="jboss.external.grid.secure.port" default="${jboss.external.grid.secure.port}"/>
		<!--appserver-configure-hostname -->
		<attribute name="jboss.server.hostname" default="${jboss.server.hostname}"/>
		<!-- grid-secure-configure-connector -->
		<attribute name="jboss.grid.configure" default="false"/>
		<attribute name="jboss.grid.secure.dir" default="${jboss.grid.secure.dir}"/>
		<attribute name="jboss.grid.secure.enable" default="${jboss.grid.secure.enable}"/>
		<attribute name="jboss.grid.secure.port" default="${jboss.grid.secure.port}"/>
		<attribute name="jboss.grid.secure.key.file" default="${jboss.grid.secure.key.file}" />
		<attribute name="jboss.grid.secure.cert.file" default="${jboss.grid.secure.cert.file}" />
		<!--jboss-configure-java_opts -->
		<attribute name="jboss.java.opts" default="${jboss.java.opts}"/>
		<attribute name="jboss.logs.dir" default="${jboss.home}/server/${jboss.server.name}/log"/>
		<attribute name="jboss.http-connector.remove" default="${jboss.http-connector.remove}"/>
		<sequential>
			<var name="jboss.is.51" unset="true"/>
			<propertyregex property="jboss.is.51"
				input="@{jboss.binaries.file}"
				regexp=".*jboss-5.1.*"
				select="true"
				/>
			<if>
				<not>
					<equals arg1="${exclude.jboss-config}" arg2="true"/>
				</not>
				<then>
					<if>
						<not>
							<equals arg1="${exclude.jboss-bindings}" arg2="true"/>
						</not>
						<then>
							<echo message="Configuring JBoss ports (bindings)"/>
							<jboss-bindings
								jboss.home="@{jboss.home}"
								jboss.server.name="@{jboss.server.name}"
								jboss.server.ports.name="@{jboss.server.ports.name}"
								jboss.server.bindingfile.location="@{jboss.server.bindingfile.location}"
								jboss.server.binding.template.location="@{jboss.server.binding.template.location}"
								jboss.server.jndi.port="@{jboss.server.jndi.port}"
								jboss.server.port="@{jboss.server.port}"
								jboss.cobraorb.port="@{jboss.cobraorb.port}"
								jboss.ejbinvoker.port="@{jboss.ejbinvoker.port}"
								jboss.hajndi.port="@{jboss.hajndi.port}"
								jboss.hajrmi.port="@{jboss.hajrmi.port}"
								jboss.jms.port="@{jboss.jms.port}"
								jboss.jmx-rmi.port="@{jboss.jmx-rmi.port}"
								jboss.messaging.port="@{jboss.messaging.port}"
								jboss.pooledha.port="@{jboss.pooledha.port}"
								jboss.remoting.port="@{jboss.remoting.port}"
								jboss.server.bind.port="@{jboss.server.bind.port}"
								jboss.server.rmi.port="@{jboss.server.rmi.port}"
								jboss.service.rmiobject.port="@{jboss.service.rmiobject.port}"
								jboss.snmp.port="@{jboss.snmp.port}"
								jboss.snmp-trapd.port="@{jboss.snmp-trapd.port}"
								jboss.web.service.port="@{jboss.web.service.port}"
								jboss.unifiedinvoker.port="@{jboss.unifiedinvoker.port}"
								jboss.hajndi.auto.port="@{jboss.hajndi.auto.port}"
								jboss.ssl.port="@{jboss.ssl.port}"
								jboss.jms2.netty.port="@{jboss.jms2.netty.port}"
								jboss.jms2.netty-ssl.port="@{jboss.jms2.netty-ssl.port}"
								jboss.transaction.recovery.port="@{jboss.transaction.recovery.port}"
								jboss.transaction.status.port="@{jboss.transaction.status.port}"
								jboss.transaction.processid.port="@{jboss.transaction.processid.port}"
								jboss.http-connector.remove="@{jboss.http-connector.remove}"
								grid.secure.port="@{jboss.grid.secure.port}"
								/>
						</then>
						<else>
							<echo message="Skipping configuring JBoss ports (bindings) because exclude.jboss-bindings is set"/>
						</else>
					</if>
<echo message="***************@{exclude.jboss-login-config}"/>
<echo message="***************@{authentication.type}"/>
					<if>
						<not>
							<equals arg1="@{exclude.jboss-login-config}" arg2="true"/>
						</not>
						<then>
							<echo message="Configuring JBoss authentication settins (login-config.xml)"/>
							<jboss-login-config
								authentication.type="@{authentication.type}"
								jboss.home="@{jboss.home}"
								jboss.server.name="@{jboss.server.name}"
								login-config.ldap.file="@{login-config.ldap.file}"
								login-config.db.file="@{login-config.db.file}"
								/>
						</then>
						<else>
							<echo message="Skipping configuring JBoss login-config.xml because exclude.jboss-login-config is set"/>
						</else>
					</if>

					<echo message="Adding user and password to JBoss console apps"/>
					<secure-jboss-console
						jboss.home="@{jboss.home}"
						jboss.server.name="@{jboss.server.name}"
						jboss.web.user="@{jboss.web.user}"
						jboss.web.password="@{jboss.web.password}"
						jboss.ssl.enable="@{jboss.ssl.enable}"
						/>

					<echo message="Updating JBoss shutdown.jar to allow shutdown without command line args"/>
					<jboss-update-shutdown
						jboss.home="@{jboss.home}"
						jboss.server.hostname="@{jboss.server.hostname}"
						jboss.server.jndi.port="@{jboss.server.jndi.port}"
						/>

					<echo message="Enableing SSL for JBoss"/>
					<appserver-ssl-configure
						appserver.conf.dir="@{jboss.conf.dir}"
						appserver.server-xml.file="@{jboss.server-xml.file}"
						appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
						appserver.ssl.enable="@{jboss.ssl.enable}"
						appserver.ssl.port="@{jboss.ssl.port}"
						appserver.ssl.keystore.file="@{jboss.ssl.keystore.file}"
						appserver.ssl.keystore.dir="@{jboss.ssl.keystore.dir}"
						appserver.ssl.keystore.pass="@{jboss.ssl.keystore.pass}"
						appserver.ssl.keystore.alias="@{jboss.ssl.keystore.alias}"
						appserver.ssl.fullyqualified.hostname="@{jboss.ssl.fullyqualified.hostname}"
						/>

					<echo message="Configuring JBoss proxy settings for ssl"/>
					<appserver-configure-external-hostname
						appserver.server-xml.file="@{jboss.server-xml.file}"
						appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
						appserver.external.host="@{jboss.external.ssl.host}"
						appserver.external.port="@{jboss.external.ssl.port}"
						proxy.update.connector.port="@{jboss.ssl.port}"
						/>
					<echo message="Configuring JBoss proxy settings for http"/>
					<appserver-configure-external-hostname
						appserver.server-xml.file="@{jboss.server-xml.file}"
						appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
						appserver.external.host="@{jboss.external.http.host}"
						appserver.external.port="@{jboss.external.http.port}"
						proxy.update.connector.port="@{proxy.update.connector.port.http}"
						/>
					<!--
					<echo message="Configuring JBoss hostname in server.xml"/>
					<appserver-configure-hostname
						appserver.server-xml.file="@{jboss.server-xml.file}"
						appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
						appserver.hostname="@{jboss.server.hostname}"
						/>
					-->

					<echo message="Configuring secure grid in JBoss"/>
					<if>
						<and>
							<equals arg1="@{jboss.grid.configure}" arg2="true"/>
							<equals arg1="@{jboss.grid.secure.enable}" arg2="true"/>
						</and>
						<then>
							<echo message="Configuring grid on JBoss"/>
							<grid-secure-configure-connector
								appserver.conf.dir="@{jboss.conf.dir}"
								appserver.server-xml.file="@{jboss.server-xml.file}"
								appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
								grid.secure.port="@{jboss.grid.secure.port}"
								grid.secure.dir="@{jboss.grid.secure.dir}"
								grid.secure.enable="@{jboss.grid.secure.enable}"
								grid.secure.key.file="@{jboss.grid.secure.key.file}"
								grid.secure.cert.file="@{jboss.grid.secure.cert.file}"
								/>
							<grid-secure-configure-valve
								appserver.server-xml.file="@{jboss.server-xml.file}"
								appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
								/>

							<appserver-delete-http-connector
								appserver.server-xml.file="@{jboss.server-xml.file}"
								appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
								appserver.http.port="@{proxy.update.connector.port.http}"
								appserver.http-connector.remove="@{jboss.http-connector.remove}"
								/>
							<!-- needs to be done after adding connector -->
							<if>
								<equals arg1="@{jboss.grid.secure.enable}" arg2="true"/>
										<then>
									<echo message="Configuring jboss proxy settings for secure grid"/>
									<appserver-configure-external-hostname
										appserver.server-xml.file="@{jboss.server-xml.file}"
										appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
										appserver.external.host="@{jboss.external.grid.secure.host}"
										appserver.external.port="@{jboss.external.grid.secure.port}"
										proxy.update.connector.port="@{jboss.grid.secure.port}"
										/>
								</then>
								<else>
									<echo message="Skipping configuring jboss proxy settings for secure grid since secure grid is not set."/>
								</else>
							</if>
						</then>
						<else>
							<echo message="Skipping configuration of GRID on JBos"/>
						</else>
					</if>
					<if>
						<not>
							<equals arg1="${exclude.access-logs}" arg2="true"/>
						</not>
						<then>
							<appserver-accesslog-configure
								appserver.conf.dir="@{jboss.conf.dir}"
								appserver.server-xml.file="@{jboss.server-xml.file}"
								appserver.server-xml.service.name="@{jboss.server-xml.service.name}"
								appserver.hostname="localhost"
								appserver.logs.dir="@{jboss.logs.dir}"
								/>
						</then>
						<else>
							<echo message="Skipping configuring access logs for jboss because exclude.access-logs is set."/>
						</else>
					</if>
					<jboss-configure-java_opts
						jboss.bin.dir="@{jboss.home}/bin"
						jboss.java.opts="@{jboss.java.opts}"
						/>
					<jboss-configure-java_opts
						jboss.bin.dir="@{jboss.home}/server/@{jboss.server.name}/bin"
						jboss.java.opts="@{jboss.java.opts}"
						/>
					<replaceregexp
						file="@{jboss.server-xml.file}"
						byline="true"
						match="emptySessionPath=&quot;true&quot;"
						replace="emptySessionPath=&quot;false&quot;"
						/>
				</then>
				<else>
					<echo message="Skipping jboss configuraiton because exclude.jboss-config is set"/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="execute-database-install">
		<attribute name="database.url"/>
		<attribute name="database.user"/>
		<attribute name="database.password"/>
		<attribute name="db.install.create.oracle.file.list" />
		<attribute name="db.install.create.mysql.file.list" />
		<attribute name="db.install.create.postgresql.file.list" />
		<attribute name="database.type" />
		<sequential>
			<echo message="@{database.type}"/>
			<switch value="@{database.type}">
				<case value="oracle">
					<database-install db.install.create.file.list="@{db.install.create.oracle.file.list}"  database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}" sql.delimiter="/" sql.delimitertype="row"/>
				</case>
				<case value="mysql">
					<database-install db.install.create.file.list="@{db.install.create.mysql.file.list}" database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}"/>
				</case>
				<case value="postgresql">
					<database-install db.install.create.file.list="@{db.install.create.postgresql.file.list}" database.url="@{database.url}" database.user="@{database.user}" database.password="@{database.password}"/>
				</case>
			</switch>
		</sequential>
	</macrodef>

	<!--
	tomcat-stop macro stops the tomcat instance and can be used in both linux and windows platforms
	usage: <tomcat-stop tomcat.home="${tomcat.home}"/>
		The tomcat.home must be set and passed when calling this macro
	-->
	<macrodef name="tomcat-stop" description="Stops a local tomcat instance">
		<attribute name="tomcat.home" />
		<sequential>
			<echo message="Overriding bda-master-util tomcat-stop"/>
			<echo message="Stopping Tomcat instance at @{tomcat.home}" />
			<exec executable="sh" osfamily="unix" dir="@{tomcat.home}/bin" spawn="true">
				<env key="NOPAUSE" value="true" />
				<arg line="shutdown.sh" />
			</exec>
			<exec osfamily="windows" executable="cmd" dir="@{tomcat.home}/bin" spawn="true" >
				<env key="NOPAUSE" value="true" />
				<env key="CATALINA_BASE" value=""/>
				<env key="CATALINA_HOME" value=""/>
				<env key="CATALINA_TMPDIR" value=""/>

				<arg line="/c shutdown.bat" />
			</exec>
			<sleep seconds="5" />
		</sequential>
	</macrodef>

</project>