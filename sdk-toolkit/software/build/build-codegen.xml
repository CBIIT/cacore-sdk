<!-- *********************************************************************** -->
<!-- ** PROJECT:   BDA Blueprints Web Application                         ** -->
<!-- *********************************************************************** -->

<project name="caCORE SDK - Codegen" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<property name="root.dir" location="${basedir}/../.." />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="build.dir" location="${software.dir}\build" /> 
	<property name="modules.dir" location="${software.dir}/modules" />
	<property name="workspace.dir" location="${software.dir}/workspace" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="target.workspace.dir" location="${target.dir}/workspace" />
	<property name="target.module.dir" location="${target.dir}/modules" />
	<property name="test.cobertura.lib.dir" location="${target.module.dir}/lib/test-cobertura" />
	<property name="output.dir.location" value="../target/workspace" />

	<property name="ivy.def.file" location="ivy.xml" />

	<property file="project.properties" />

	<property name="codegen.lib.dir" location="${target.module.dir}/lib" />
	<property name="codegen.runtime.lib.dir" location="${target.module.dir}/lib/runtime" />

	<property name="src.java.dir" value="${output.src.dir}" />
	<property name="src.javadoc.dir" value="${output.javadoc.dir}" />
	<property name="systemdoc.dir" value="${src.javadoc.dir}/system" />
	<property name="build.classes.dir" value="${output.classes.dir}" />


	<!--
		***********************************************************************
		*** HIDE/SHOW DB CONNECTION PROPERTIES TO BE USED IN HIBERNATE
		CONFIGURATION
		***********************************************************************
	-->
	<condition property="ISO21090_DATATYPES_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_ISO21090_DATATYPES}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_ISO21090_DATATYPES}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>

	<condition property="SECURITY_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_SECURITY}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>

	<condition property="CLASS_LEVEL_SECURITY_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_CLASS_LEVEL_SECURITY}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_CLASS_LEVEL_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>

	<condition property="SECURITY_START" value="" else="${xml.comment.start}">
		<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SECURITY_END" value="" else="${xml.comment.end}">
		<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>

	<condition property="CLASS_LEVEL_SECURITY_START" value="${xml.comment.start}" else="">
		<and>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${CLASS_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="CLASS_LEVEL_SECURITY_END" value="${xml.comment.end}" else="">
		<and>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${CLASS_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="INSTANCE_LEVEL_SECURITY_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_INSTANCE_LEVEL_SECURITY}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_INSTANCE_LEVEL_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_ATTRIBUTE_LEVEL_SECURITY}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_ATTRIBUTE_LEVEL_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_START" value="" else="${xml.comment.start}">
		<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_END" value="" else="${xml.comment.end}">
		<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="CACHE_PROTECTION_ELEMENTS_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${CACHE_PROTECTION_ELEMENTS}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${CACHE_PROTECTION_ELEMENTS}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="WRITABLE_API_EXTENSION_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="SERVICE_INTERFACE" value="${extension.api.interface}" else="${sdk.api.interface}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SERVICE_IMPL" value="${extension.api.impl}" else="${sdk.api.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="DAO_IMPL" value="${extension.dao.impl}" else="${sdk.dao.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SERVICE_METHOD_HELPER" value="${extension.sdk.security.writable.applicationservice.method.impl}" else="${sdk.security.readable.applicationservice.method.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_WRITABLE_API_EXTENSION_VALIDATOR" value="true" else="false">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_START" value="" else="${xml.comment.start}">
		<equals arg1="${HBM2DDL_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_END" value="" else="${xml.comment.end}">
		<equals arg1="${HBM2DDL_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_TYPE_REVISED" value="${HBM2DDL_TYPE}" else="validate">
		<equals arg1="${DB_DIALECT}" arg2="org.hibernate.dialect.HSQLDialect" casesensitive="false" trim="true" />
	</condition>
	<condition property="WRITABLE_APPLICATION_SERVICE_INTERFACE" value="${extension.api.security}" else="">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="WRITABLE_APPLICATION_SERVICE_CLASS_LEVEL_SECURITY_INTERFACE" value="${extension.api.classlevel.security}" else="">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR" value="true" else="false">
		<and>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR_START" value="" else="${xml.comment.start}">
		<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR_END" value="" else="${xml.comment.end}">
		<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_LOGICAL_MODEL_VALIDATOR" value="true" else="false">
		<or>
			<equals arg1="${VALIDATE_LOGICAL_MODEL}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${VALIDATE_LOGICAL_MODEL}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_MODEL_MAPPING_VALIDATOR" value="true" else="false">
		<or>
			<equals arg1="${VALIDATE_MODEL_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${VALIDATE_MODEL_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_HIBERNATE_MAPPING_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_HIBERNATE_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_HIBERNATE_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_BEANS_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_BEANS}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_BEANS}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>

	<condition property="ENABLE_ISO_CONSTANT_GENERATION" value="true" else="false">
		<and>
			<equals arg1="${ISO21090_DATATYPES_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_HIBERNATE_MAPPING_GENERATION}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="ENABLE_CASTOR_MAPPING_GENERATION" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_CASTOR_MAPPING}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_CASTOR_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<not>
				<equals arg1="${ISO21090_DATATYPES_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
		</and>
	</condition>

	<condition property="ENABLE_JAXB_MAPPING_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_JAXB_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_JAXB_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_XSD_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_XSD}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_XSD}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_GENERATE_XSD_WITH_GME_TAGS" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_XSD_WITH_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_XSD_WITH_GME_TAGS}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
			<not>
				<equals arg1="${ISO21090_DATATYPES_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
		</and>
	</condition>
	<condition property="ENABLE_GME_TAGS_VALIDATOR" value="true" else="false">
		<and>
			<or>
				<equals arg1="${VALIDATE_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${VALIDATE_GME_TAGS}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_GENERATE_XSD_WITH_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_VALIDATOR_CFG_TRANSFORMER" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="true" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_WSDD_GENERATION" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_WSDD}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_WSDD}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<not>
				<equals arg1="${ISO21090_DATATYPES_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
		</and>
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_COMMON_LOGGING_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_COMMON_LOGGING_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION_START" value="" else="${xml.comment.start}">
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION_END" value="" else="${xml.comment.end}">
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_EMPTY_INTERCEPTOR_START" value="" else="${xml.comment.start}">
		<and>
			<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_EMPTY_INTERCEPTOR_END" value="" else="${xml.comment.end}">
		<and>
			<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="GRID_LOGIN_MODULE_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_GRID_LOGIN_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_GRID_LOGIN_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="GRID_LOGIN_MODULE_START" value="${xml.comment.start}" else="">
		<and>
			<not>
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="GRID_LOGIN_MODULE_END" value="${xml.comment.end}" else="">
		<and>
			<not>
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="CSM_LOGIN_MODULE_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_CSM_LOGIN_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_CSM_LOGIN_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="CSM_LOGIN_MODULE_START" value="${xml.comment.start}" else="">
		<and>
			<not>
				<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="CSM_LOGIN_MODULE_END" value="${xml.comment.end}" else="">
		<and>
			<not>
				<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="MODEL_FILE_IN_DIRECTORY" value="${MODEL_FILE_PATH}" else="models/${MODEL_FILE}">
		<isset property="MODEL_FILE_PATH" />
	</condition>


	<target name="-replace-templates-filter-tokens" depends="">
		<echo>path == ${MODEL_FILE_PATH} ${MODEL_FILE_IN_DIRECTORY}</echo>
		<filterset id="filtertoken1" begintoken="@" endtoken="@" onmissingfiltersfile="fail">
			<filter token="PROJECT_NAME" value="${PROJECT_NAME}" />
			<filter token="SDK_GRID_LOGIN_SERVICE_NAME" value="${SDK_GRID_LOGIN_SERVICE_NAME}" />
			<filter token="OUTPUTDIR" value="${output.src.dir}" />
			<filter token="VALIDATOR_OUTPUTDIR" value="${output.codegen.config.dir}" />
			<filter token="MODEL_FILE_IN_DIRECTORY" value="${MODEL_FILE_IN_DIRECTORY}" />
			<filter token="MODEL_FILE_TYPE" value="${MODEL_FILE_TYPE}" />
			<filter token="LOGICAL_MODEL" value="${LOGICAL_MODEL}" />
			<filter token="DATA_MODEL" value="${DATA_MODEL}" />
			<filter token="INCLUDE_PACKAGE" value="${INCLUDE_PACKAGE}" />
			<filter token="EXCLUDE_PACKAGE" value="${EXCLUDE_PACKAGE}" />
			<filter token="EXCLUDE_NAME" value="${EXCLUDE_NAME}" />
			<filter token="EXCLUDE_NAMESPACE" value="${EXCLUDE_NAMESPACE}" />
			<filter token="NAMESPACE_PREFIX" value="${NAMESPACE_PREFIX}" />

			<filter token="WEBSERVICE_NAME" value="${WEBSERVICE_NAME}" />
			<filter token="VALIDATE_LOGICAL_MODEL" value="${ENABLE_LOGICAL_MODEL_VALIDATOR}" />
			<filter token="VALIDATE_MODEL_MAPPING" value="${ENABLE_MODEL_MAPPING_VALIDATOR}" />
			<filter token="VALIDATE_GME_TAGS" value="${ENABLE_GME_TAGS_VALIDATOR}" />
			<filter token="VALIDATE_WRITABLE_API_EXTENSION" value="${ENABLE_WRITABLE_API_EXTENSION_VALIDATOR}" />
			<filter token="GENERATE_HIBERNATE_MAPPING" value="${ENABLE_HIBERNATE_MAPPING_GENERATION}" />
			<filter token="GENERATE_ISO_CONSTANT" value="${ENABLE_ISO_CONSTANT_GENERATION}" />
			<filter token="GENERATE_BEANS" value="${ENABLE_BEANS_GENERATION}" />
			<filter token="GENERATE_CASTOR_MAPPING" value="${ENABLE_CASTOR_MAPPING_GENERATION}" />
			<filter token="GENERATE_JAXB_MAPPING" value="${ENABLE_JAXB_MAPPING_GENERATION}" />
			<filter token="GENERATE_XSD" value="${ENABLE_XSD_GENERATION}" />
			<filter token="GENERATE_XSD_WITH_GME_TAGS" value="${ENABLE_GENERATE_XSD_WITH_GME_TAGS}" />
			<filter token="GENERATE_XSD_WITH_PERMISSIBLE_VALUES" value="${ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" />
			<filter token="ENABLE_VALIDATOR_CFG_TRANSFORMER" value="${ENABLE_VALIDATOR_CFG_TRANSFORMER}" />
			<filter token="GENERATE_WSDD" value="${ENABLE_WSDD_GENERATION}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR" value="${ENABLE_HIBERNATE_VALIDATOR}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR_START" value="${ENABLE_HIBERNATE_VALIDATOR_START}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR_END" value="${ENABLE_HIBERNATE_VALIDATOR_END}" />
			<filter token="CADSR_CONNECTION_URL" value="${CADSR_CONNECTION_URL}" />

			<filter token="CSM_PROJECT_NAME" value="${CSM_PROJECT_NAME}" />
			<filter token="INSTANCE_LEVEL_SECURITY_ENABLED" value="${INSTANCE_LEVEL_SECURITY_ENABLED}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_ENABLED" value="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" />
			<filter token="SECURITY_ENABLED" value="${SECURITY_ENABLED}" />
			<filter token="IDENTITY_GENERATOR_TAG" value="${IDENTITY_GENERATOR_TAG}" />
			<filter token="DATABASE_TYPE" value="${DATABASE_TYPE}" />
			<filter token="SERVICE_INTERFACE" value="${SERVICE_INTERFACE}" />
			<filter token="SERVICE_IMPL" value="${SERVICE_IMPL}" />
			<filter token="DAO_IMPL" value="${DAO_IMPL}" />
			<filter token="HBM2DDL_TYPE" value="${HBM2DDL_TYPE_REVISED}" />
			<filter token="SERVICE_METHOD_HELPER" value="${SERVICE_METHOD_HELPER}" />
			<filter token="CACHE_PROTECTION_ELEMENTS_ENABLED" value="${CACHE_PROTECTION_ELEMENTS_ENABLED}" />
			<filter token="GENERATE_CLM_LOGGER_CFG" value="${ENABLE_CLM_LOGGER_CFG_GENERATION}" />
			<filter token="READABLE_APPLICATION_SERVICE_INTERFACE" value="${sdk.api.interface}" />
			<filter token="WRITABLE_APPLICATION_SERVICE_INTERFACE" value="${WRITABLE_APPLICATION_SERVICE_INTERFACE}" />
			<filter token="WRITABLE_APPLICATION_SERVICE_CLASS_LEVEL_SECURITY_INTERFACE" value="${WRITABLE_APPLICATION_SERVICE_CLASS_LEVEL_SECURITY_INTERFACE}" />
			<filter token="ENABLE_EMPTY_INTERCEPTOR_START" value="${ENABLE_EMPTY_INTERCEPTOR_START}" />
			<filter token="ENABLE_EMPTY_INTERCEPTOR_END" value="${ENABLE_EMPTY_INTERCEPTOR_END}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_START" value="${ATTRIBUTE_LEVEL_SECURITY_START}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_END" value="${ATTRIBUTE_LEVEL_SECURITY_END}" />
			<filter token="ENABLE_CLM_LOGGER_CFG_GENERATION_START" value="${ENABLE_CLM_LOGGER_CFG_GENERATION_START}" />
			<filter token="ENABLE_CLM_LOGGER_CFG_GENERATION_END" value="${ENABLE_CLM_LOGGER_CFG_GENERATION_END}" />

			<filter token="HIBERNATE_SHOW_SQL" value="${HIBERNATE_SHOW_SQL}" />
			<filter token="CAGRID_LOGIN_MODULE_NAME" value="${CAGRID_LOGIN_MODULE_NAME}" />
			<filter token="CLASS_LEVEL_SECURITY_START" value="${CLASS_LEVEL_SECURITY_START}" />
			<filter token="CLASS_LEVEL_SECURITY_END" value="${CLASS_LEVEL_SECURITY_END}" />
			<filter token="ISO21090_DATATYPES_ENABLED" value="${ISO21090_DATATYPES_ENABLED}" />

		</filterset>
		<filterset id="filtertoken2" begintoken="${xml.comment.start}@" endtoken="@${xml.comment.end}" onmissingfiltersfile="fail">
			<filter token="SECURITY_START" value="${SECURITY_START}" />
			<filter token="SECURITY_END" value="${SECURITY_END}" />
			<filter token="HBM2DDL_START" value="${HBM2DDL_START}" />
			<filter token="HBM2DDL_END" value="${HBM2DDL_END}" />
			<filter token="GRID_LOGIN_MODULE_START" value="${GRID_LOGIN_MODULE_START}" />
			<filter token="GRID_LOGIN_MODULE_END" value="${GRID_LOGIN_MODULE_END}" />
			<filter token="CSM_LOGIN_MODULE_START" value="${CSM_LOGIN_MODULE_START}" />
			<filter token="CSM_LOGIN_MODULE_END" value="${CSM_LOGIN_MODULE_END}" />
		</filterset>
	</target>
	<target name="replacetoken-contents-preconfigure" depends="-replace-templates-filter-tokens">

		<delete dir="${output.codegen.config.dir}" />
		<delete dir="${system.config.template.dir}" />

		<copy todir="${output.codegen.config.dir}" filtering="true">
			<fileset dir="${codegen.config.dir}" />
			<globmapper from="*-template.xml" to="*.xml" />
			<filterset refid="filtertoken1" />
			<filterset refid="filtertoken2" />
		</copy>
		<copy todir="${output.codegen.config.dir}">
			<fileset dir="${codegen.config.dir}">
				<include name="**/*.*" />
				<exclude name="**/*-template*.*" />
			</fileset>
		</copy>

		<copy todir="${system.config.template.dir}" filtering="true">
			<fileset dir="${system.orig.config.dir}" />
			<filterset refid="filtertoken1" />
			<filterset refid="filtertoken2" />
		</copy>
	</target>


	<target name="replacetoken-contents" depends="replacetoken-contents-preconfigure" />


	<!-- ******************************************************************* -->
	<!-- ** CODEGEN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<path id="codegen.runtime.classpath">
		<fileset dir="${codegen.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${codegen.runtime.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${target.module.dir}/lib">
			<include name="sdk-codegen-*.jar" />
		</fileset>
		<pathelement path="${output.codegen.config.dir}" />
		<pathelement path="${output.codegen.validator.config.dir}" />
	</path>

	<available file="${test.cobertura.lib.dir}" property="test.cobertura.lib.exist" />
	<if>
		<equals arg1="${test.cobertura.lib.exist}" arg2="true" />
		<then>
			<path id="cobertura.runtime.classpath">
				<fileset dir="${test.cobertura.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</path>
		</then>
		<else>
			<path id="cobertura.runtime.classpath">
			</path>
		</else>
	</if>

	<target name="-pre-clean">
		<delete dir="${build.classes.dir}" quiet="true" />
		<delete file="${target.dir}/${jar.name}" quiet="false" />
	</target>

	<target name="-init" depends="-pre-clean">
		<mkdir dir="${src.java.dir}" />
		<mkdir dir="${src.javadoc.dir}" />
	</target>

	<target name="-copy-iso-constants-template-file" depends="">
		<copy todir="${output.src.dir}">
			<fileset dir="${codegen.config.dir}">
				<include name="IsoConstants-*.xml" />
			</fileset>
			<globmapper from="*-template.xml" to="*.xml" />
		</copy>
	</target>

	<target name="-compile:application-code" depends="-init,-generate-codegen" description="Compiles all subproject code">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" debug="true">
			<classpath refid="codegen.runtime.classpath" />
			<classpath refid="cobertura.runtime.classpath" />
		</javac>
	</target>

	<target name="-package-bean-jar" depends="-compile:application-code,-generate-codegen" description="Prepares Java Beans distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${bean.file}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<fileset dir="${src.java.dir}">
				<include name="**/*.java" />
				<include name="**/jaxb.index" />
			</fileset>
		</jar>
	</target>

	<target name="-package-orm-jar" depends="-generate-codegen" description="Prepares ORM distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${orm.file}" basedir="${src.java.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<include name="**/*.hbm.xml" />
			<include name="*.cfg.xml" />
			<include name="ehcache.xml" />
			<exclude name="${csm.security.config.file}" />
		</jar>
	</target>

	<target name="-package-xml-jar" depends="-generate-codegen" description="Prepares XML distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${schema.file}" basedir="${src.java.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<include name="**/*.xsd" />
			<include name="unmarshaller-xml-mapping.xml" />
			<include name="xml-mapping.xml" />
			<fileset dir="${iso21090.dist.relative.dir}">
				<include name="${iso21090.datatype.xsd.file}" />
			</fileset>
		</jar>
	</target>

	<target name="-package-codegen-artifacts" depends="-package-bean-jar,-package-orm-jar,-package-xml-jar" description="Prepares distribution files">
	</target>


	<target name="-generate-codegen" depends="replacetoken-contents,-copy-iso-constants-template-file,-generate-codegen-validator" description="Runs the Code Generator">
		<echo>${ant.project.name}: Running the Code Generator</echo>
		<fail unless="IDENTITY_GENERATOR_TAG">IDENTITY_GENERATOR property must be set in codegen.properties</fail>
		<java classname="gov.nih.nci.codegen.Generator" failonerror="true" fork="true">
			<arg value="${codegen.config.file}" />
			<jvmarg value="-Xms256M" />
			<jvmarg value="-Xmx512M" />
			<classpath refid="codegen.runtime.classpath" />
			<classpath refid="cobertura.runtime.classpath" />
		</java>
	</target>

	<target name="-generate-codegen-validator" description="Runs the Hibernate Validator Code Generator">
		<echo>${ant.project.name}: Running the Hibernate Validator Code Generator</echo>
		<java classname="gov.nih.nci.codegen.Generator" failonerror="true" fork="true">
			<arg value="${codegen.config.validator.file}" />
			<jvmarg value="-Xms256M" />
			<jvmarg value="-Xmx512M" />
			<classpath refid="codegen.runtime.classpath" />
			<classpath refid="cobertura.runtime.classpath" />
		</java>
	</target>

	<target name="-codegen-doc" description="Generates javadocs for the domain Java beans">
		<javadoc packagenames="*" destdir="${src.javadoc.dir}" author="true"
			private="true" version="true" use="true" windowtitle="${PROJECT_NAME} API Documentation"
			doctitle="${PROJECT_NAME} API Documentation" useexternalfile="yes" verbose="false">
			<classpath refid="codegen.runtime.classpath" />
			<classpath refid="cobertura.runtime.classpath" />
			<bottom>This API was generated by the caCORE Software Development Kit (SDK)</bottom>
			<fileset dir="${src.java.dir}" includes="**/*.java"/>
		</javadoc>
	</target>

	<target name="-system-doc" description="Generates javadocs for the entire system">
		<javadoc packagenames="*" destdir="${systemdoc.dir}" author="true"
					private="true" version="true" use="true" windowtitle="${VERSION} API Documentation"
					doctitle="${VERSION} API Documentation" useexternalfile="yes" verbose="false" failonerror="false">
			<bottom>This API was generated by the caCORE Software Development Kit (SDK)</bottom>
			<fileset dir="${modules.dir}" includes="**/*.java"/>
		</javadoc>
	</target>

	<target name="post-clean">
		<delete dir="${build.classes.dir}" quiet="false" />
		<echo message="Writable API ${WRITABLE_API_EXTENSION_ENABLED}"/>
		<echo message="Attribute API ${ATTRIBUTE_LEVEL_SECURITY_ENABLED}"/>
		<echo message="Instance level security ${INSTANCE_LEVEL_SECURITY_ENABLED}"/>
		<echo message="Castor ${ENABLE_CASTOR_MAPPING_GENERATION}"/>
		<echo message="Permissible ${ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES}"/>
		<echo message="Hibernate Validator ${ENABLE_HIBERNATE_VALIDATOR}"/>
	</target>

	<target name="build:all" depends="-pre-clean,-init,-generate-codegen,-package-codegen-artifacts,-codegen-doc,-system-doc,post-clean" description="Default target">
	</target>

	<target name="package-system" depends="-package-web,dist" description="Packages the system">
		<mkdir dir="${output.project.dir}/lib" />
		<copy todir="${output.project.dir}/lib">
			<fileset dir="${target.module.dir}/lib">
				<exclude name="**/compile/**" />
			</fileset>
		</copy>
	</target>

	<target name="-package-web">
		<mkdir dir="${output.project.dir}/web" />
		<copy todir="${output.project.dir}/web">
			<fileset dir="${workspace.dir}/web">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="dist" description="target to package-system">
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${basedir}">
				<include name="*-reconfigure.xml" />
				<include name="*-taskdef.xml" />
				<include name="*.properties" />
				<include name="tools/**/*" />
			</fileset>
			<fileset dir="${target.dir}/dist/exploded">
				<include name="ncicb-jboss*.xml" />
			</fileset>
		</copy>
	</target>

</project>
