<?xml version="1.0" encoding="utf-8" ?>
<project name="caCORE SDK - Master Build" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>
		This build file is part of the bda-build-template project.  This is the master build file for the project.  It should be placed in project/software/.  This script wrappers sub projects to build, test and inspect code.  Additionally this project manges creation of distributions and deployment locally or remotely.  Deployments will call the install.xml from the distribution to install or upgrade the application.  Lastly this script will run include targets that require manipulation of containers (selenium tests because they require starting the application server container (and require a fully deployed application which this process is responsible for). This build script assumes two sub-projects bda-blueprints-webapp and bda-blueprints-api. The API targets are commented out and can be removed if not needed.  Also support for both tomcat and jboss download, install and configure are included.  These scripts require Java, Ant, Database and SVN to work.
	</description>

	<property name="software.dir" location=".." />
	<property name="build.dir" location="${software.dir}/build" />
	<property name="modules.dir" value="${software.dir}/modules"/>
	<property name="common.dir" location="${software.dir}/common" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="shared.local.repo.dir" location="${target.dir}/shared-local-ivy-repo" />
	<property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

	<property name="ivy.settings.dir" value="${common.dir}"/>
	<property name="ivy.settings.file" value="ivysettings.xml" />

	<property name="modules.build.file" value="build.xml" />
	<property name="modules.build.target" value="build:all" />
	<property name="modules.build.static-analysis.target" value="static-analysis:sub-projects" />
	<property name="workspace.dir" location="${software.dir}/workspace" />
	<property name="codegen.build.file" value="build-codegen.xml" />
	<property name="codegen.build.target" value="build:all" />
	<property name="package.build.target" value="package-system" />
	<property name="target.workspace.dir" location="${target.dir}/workspace" />

	<property file="${build.dir}/project.properties" />

	<property name="bda-blueprints-webapp.install.zip.file" value="${project-webapp.install.zip.file}"/>
	<property name="bda-blueprints-webapp.upgrade.zip.file" value="${project-webapp.upgrade.zip.file}"/>
	<property name="bda-download.dir" location="${target.dir}/bda-download" />
	<property name="project.name" value="${PROJECT_NAME}"/>

	<import file="${build.dir}/bda-master-build.xml"/>
	
	<target name="init" description="Sets up build are and initalizes variables">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.exploded.dir}" />
		<mkdir dir="${common.dist.dir}" />
		<mkdir dir="${tools.dist.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${download.dir}" />

		<available file="${jboss.dest.file}" property="jboss.tools.exists" />
		<available file="${tomcat.dest.file}" property="tomcat.tools.exists" />
	</target>

	<target name="ivy:clean" description="Cleans up the ivy cache of this project and all sub-projects">
		<ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}" />
		<ivy:cleancache />
		<ant inheritAll="false" inheritRefs="false" antfile="bda-ivy-2.0.0-build.xml" target="ivy-cleancache" dir="${bda-download.dir}">
			<property name="bda-utils.dir" value="${bda-utils.dir}" />
			<property name="lib.dir" value="${lib.dir}" />
			<property name="software.dir" value="${software.dir}" />
		</ant>
		<ant inheritAll="true" inheritRefs="false" antfile="${modules.build.file}" target="clean:dependencies" dir="${modules.dir}" />
	</target>

	<target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		validate:pre:build,
		init,
		build:project-webapp:dist,
		build:project-webapp		
		" />

	<target name="build-system" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions" depends="
		build:all,
		deploy:local:install:re-configure"
	/>

	<target name="deploy-system" depends="
		dist:installer:prep
		"> 
		<deploy-local target.name="${install.target}" />
	</target>
		
	<target name="dist" description="Makes all distributions: installer, upgrader and source" depends="
		build:all,
		dist:installer,
		dist:src
		">
	</target>

	<target name="build:workspace-modules" description="Call modules build target to produce artifacts">
		<echo>Build Workspace Modules .........</echo>
		<echo>target DIR = ${target.dir}</echo>
		<echo>modules DIR = ${modules.dir}</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${modules.build.file}" target="${modules.build.target}" dir="${modules.dir}">
		</ant>
	</target>


	<target name="build:project-webapp" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<echo>Project Name = ${PROJECT_NAME}.........</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${codegen.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="build:project-webapp:dist" depends="init" description="Call webapp sub-projects build target to produce artifiacts">
		<!-- setting the property in the ant call overrides the property in the sub-project allowing the artifact to be produced where needed -->
		<ant inheritAll="true" inheritRefs="false" antfile="${codegen.build.file}" target="${package.build.target}" dir="${build.dir}">
		</ant>
	</target>

	<target name="static-analysis:workspace-modules" description="Call modules build target to produce static analysis of source code">
		<echo>target DIR = ${target.dir}</echo>
		<echo>modules DIR = ${modules.dir}</echo>
		<ant inheritAll="true" inheritRefs="false" antfile="${modules.build.file}" target="${modules.build.static-analysis.target}" dir="${modules.dir}">
		</ant>
	</target>

	<target name="dist:installer:prep" depends="dist:installer:prep:files" description="Copies artifacts not generated by sub-project builds into the install distribution area">
	</target>

	<target name="dist:installer:prep:files">
		<!-- Copy db-install and db-upgrade scripts from source into distribution area. The db files need to be under db-[install/upgard]/${database.type}. Because of this fact these files were not moved to the macro. -->
		<copy todir="${db-install.dist.dir}" overwrite="true">
			<fileset dir="${db-install.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${db-upgrade.dist.dir}" overwrite="true">
			<fileset dir="${db-upgrade.src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<dist-prep />
		<copy todir="${dist.exploded.dir}" overwrite="true">
			<fileset dir="${build.dir}">
				<include name="bda-master-install.xml" />
				<include name="build-reconfigure.xml" />
			</fileset>
			<fileset dir="${project.build.home}">
				<include name="codegen.properties" />
				<include name="install.properties" />
			</fileset>
		</copy>
		<copy todir="${dist.exploded.dir}/common">
			<fileset dir="${project.common.dir}" />
		</copy>
		<copy todir="${tools.dist.dir}">
			<fileset dir="${download.dir}">
				<exclude name="cagrid*"/>
			</fileset>
		</copy>
	</target>

	<target name="deploy:local:install:re-configure" depends="dist:installer:prep">
		<deploy-local target.name="install:re-configure" />
	</target>

	<target name="deploy:local:install:no-build" depends="dist:installer:prep">
		<deploy-local target.name="${install.target}" />
	</target>

	<target name="deploy:remote:install:no-build" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="
		dist:installer
		">
		<deploy-files dist.file="${bda-blueprints-webapp.install.zip.file}" />
		<remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
	</target>

	<target name="clean:software:target">
		<delete dir="${target.dir}" failonerror="false"/>
	</target>

	<target name="clean:target">
		<delete dir="${target.dir}" failonerror="false"/>
	</target>

	<target name="dist:tools:retrieve" description="Downloads binary applications from commonlibrary repository" depends="
		init,
		dist:tools:retrieve:jboss,
		dist:tools:retrieve:tomcat
		" >
	</target>

	<target name="deploy:local:upgrade" depends="build:all,dist:upgrader:prep" description="Upgrades and configures the application and database  on the local machine. Used for developer desktops and ci environments.">
		<echo message="deploy local upgrade is not implemented by SDK Project. To upgrade the Example project application in existing Tomcat, change INSTALL_CONTAINER=false in example-project/build/install.properties" />
	</target>

	<target name="deploy:remote:upgrade" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)" depends="">
		<echo message="deploy remote upgrade is not implemented by SDK Project. To upgrade the Example project application in existing Tomcat, change INSTALL_CONTAINER=false in example-project/build/install.properties" />
	</target>
</project>