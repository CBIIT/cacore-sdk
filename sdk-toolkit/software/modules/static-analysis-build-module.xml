<project name="static-analysis-build-module" default="static-analysis:init" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<property name="checkstyle.config" value="${common.dir}/checkstyle/checkstyle_minimal.xml"/>
	<property name="reports.simian.dir" value="${reports.dir}/${module.name}/simian" />
	<property name="reports.pmd.dir" value="${reports.dir}/${module.name}/pmd" />
	<property name="reports.checkstyle.dir" value="${reports.dir}/${module.name}/checkstyle/all" />
	<property name="reports.checkstyle.dir.diff" value="${reports.dir}/${module.name}/checkstyle/diff" />
	<property name="reports.javancss.dir" value="${reports.dir}/${module.name}/javancss" />
	<property name="reports.findbugs.dir" value="${reports.dir}/${module.name}/findbugs" />
	<property name="reports.cobertura.dir" value="${reports.dir}/${module.name}/cobertura" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar}" />

	<property name="acceptance.module.lib.dir" location="${module.lib.dir}/test-acceptance" />
	<property name="checkstyle.module.lib.dir" location="${module.lib.dir}/test-checkstyle" />
	<property name="cobertura.module.lib.dir" location="${module.lib.dir}/test-cobertura" />
	<property name="findbugs.module.lib.dir" location="${module.lib.dir}/test-findbugs" />
	<property name="javancss.module.lib.dir" location="${module.lib.dir}/test-javancss" />
	<property name="junit.module.lib.dir" location="${module.lib.dir}/test-junit" />
	<property name="pmd.module.lib.dir" location="${module.lib.dir}/test-pmd" />
	<property name="selenium.module.lib.dir" location="${module.lib.dir}/test-selenium" />
	<property name="simian.module.lib.dir" location="${module.lib.dir}/test-simian" />

	<!-- Creates paths and  directories -->
	<target name="static-analysis:init">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.simian.dir}" />
		<mkdir dir="${reports.pmd.dir}" />
		<mkdir dir="${reports.checkstyle.dir}" />
		<mkdir dir="${reports.javancss.dir}" />
		<mkdir dir="${reports.findbugs.dir}" />
		
		<copy todir="${src.java.dir}">
			<regexpmapper from="(.*)src(.*)" to="\2"/>
			<fileset dir="${modules.dir}"/>
		</copy>
	</target>
	
	<target name="ivy:init">
	</target>
	
	<target name="static-analysis:ivy-init" depends="
		ivy:init,
		static-analysis:ivy-test-javancss,
		static-analysis:ivy-test-checkstyle,
		static-analysis:ivy-test-simian,
		static-analysis:ivy-test-pmd,
		static-analysis:ivy-test-cobertura
		" />

	<target name="static-analysis:ivy-test-javancss" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-javancss" />
		<ivy:retrieve pattern="${module.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-javancss" />
		<path id="project.test.javancss.classpath">
			<fileset dir="${module.lib.dir}/test-javancss">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-checkstyle" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-checkstyle" />
		<ivy:retrieve pattern="${module.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
		<path id="project.test.checkstyle.classpath">
			<fileset dir="${module.lib.dir}/test-checkstyle">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-pmd" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-pmd" />
		<ivy:retrieve pattern="${module.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
		<path id="project.test.pmd.classpath">
			<fileset dir="${module.lib.dir}/test-pmd">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-cobertura" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-cobertura" />
		<ivy:retrieve pattern="${module.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
		<path id="project.test.cobertura.classpath">
			<fileset dir="${module.lib.dir}/test-cobertura">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<target name="static-analysis:ivy-test-simian" depends="ivy:init" description="Updates the local ivy repository">
		<ivy:resolve refresh="true" conf="test-simian" />
		<ivy:retrieve pattern="${module.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
		<path id="project.test.simian.classpath">
			<fileset dir="${module.lib.dir}/test-simian">
				<include name="*.jar" />
			</fileset>
		</path>
	</target>

	<!-- Findbugs is realy a full application that has ant support.  This target downloads the binaries for this distribution for use by ant target.  Additionaly setups a jboss installation to uses in the classpath of findbugs to cover runtime libraries -->
	<target name="static-analysis:findbugs-init">
		<property name="temp.dir" value="${software.dir}/temp" />
		<mkdir dir="${temp.dir}" />
		<property name="findbugs.home.dir" value="${module.lib.dir}/${findbugs.binaries.relative.dir}" />
		<if>
			<not>
				<available file="${findbugs.home.dir}/lib/findbugs.jar" />
			</not>
			<then>
				<echo message="Findbugs is missing, downloading and isnstalling in ${findbugs.home.dir}" />
				<get src="${findbugs.src.url}" dest="${temp.dir}/${findbugs.binaries.file}" />
				<unzip dest="${module.lib.dir}" src="${temp.dir}/${findbugs.binaries.file}" />
			</then>
		</if>
		<path id="project.test.findbugs.classpath">
			<fileset dir="${findbugs.home.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<macrodef name="static-analysis-simian">
		<attribute name="simian.src.dir" />
		<attribute name="simian.rpt.dir" />
		<attribute name="simian.report-xsl.file" />
		<attribute name="simian.xml.name" default="simian.xml" />
		<attribute name="simian.html.name" default="simian.html" />
		<sequential>
			<taskdef resource="simiantask.properties" classpathref="project.test.simian.classpath" />
			<simian failureProperty="simian.failure" failOnDuplication="failse">
				<fileset dir="@{simian.src.dir}" includes="**/*.java" />
				<formatter type="xml" toFile="@{simian.rpt.dir}/@{simian.xml.name}" />
			</simian>
			<xslt in="@{simian.rpt.dir}/@{simian.xml.name}" out="@{simian.rpt.dir}/@{simian.html.name}" style="@{simian.report-xsl.file}" />
		</sequential>
	</macrodef>

	<macrodef name="static-analysis-pmd">
		<attribute name="pmd.src.dir" />
		<attribute name="pmd.rpt.dir" />
		<attribute name="pmd.root-dir.name" />
		<attribute name="pmd.sub-project.name" />
		<attribute name="pmd.report-preprocessor.file" />
		<attribute name="pmd.report-xsl.file" />
		<attribute name="pmd.rule-set.file" />
		<attribute name="pmd.xml.name" default="pmd.xml" />
		<attribute name="pmd.html.name" default="pmd.html" />
		<sequential>
			<property name="pmd.sub-project.rpt.dir" value="@{pmd.rpt.dir}/@{pmd.sub-project.name}/target/all" />
			<mkdir dir="${pmd.sub-project.rpt.dir}" />
			<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath" />
			<pmd rulesetfiles="@{pmd.rule-set.file}" shortFilenames="true" failonerror="false" failurespropertyname="pmd.failure" targetjdk="1.5">
				<formatter type="xml" toFile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</pmd>
			<move file="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" tofile="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" />
			<property name="my-home" location="@{pmd.src.dir}"/>
			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}" style="@{pmd.report-preprocessor.file}">
				<param name="relative.path" expression="${my-home}" />
			</xslt>
			
			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir}/@{pmd.html.name}" style="@{pmd.report-xsl.file}" />
		</sequential>
	</macrodef>

	<macrodef name="static-analysis-diff-pmd">
		<attribute name="property.file" default="project.properties" />
		<attribute name="differential.file.name" default="diff_list.txt" />
		<attribute name="pmd.src.dir" />
		<attribute name="pmd.rpt.dir" />
		<attribute name="pmd.root-dir.name" />
		<attribute name="pmd.sub-project.name" />
		<attribute name="pmd.report-preprocessor.file" />
		<attribute name="pmd.report-xsl.file" />
		<attribute name="pmd.rule-set.file" />
		<attribute name="pmd.xml.name" default="pmd.xml" />
		<attribute name="pmd.html.name" default="pmd.html" />
		<sequential>
			<delete file="@{differential.file.name}"/>
			<touch file="@{differential.file.name}"/>
			<property name="pmd.sub-project.rpt.dir.diff" value="@{pmd.rpt.dir}/@{pmd.sub-project.name}/target/diff" />
			<mkdir dir="${pmd.sub-project.rpt.dir.diff}" />
			<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.test.pmd.classpath" />

			<diffrevision old.revision.number="${pmd.revision.number}" differential.file.name="@{differential.file.name}" />
			<pmd rulesetfiles="@{pmd.rule-set.file}" shortFilenames="true" failonerror="false" failurespropertyname="pmd.failure.diff" targetjdk="1.5">
				<formatter type="xml" toFile="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}" />
				<fileset dir="@{pmd.src.dir}">
					<patternset>
						<includesfile name="@{differential.file.name}" />
					</patternset>
				</fileset>
			</pmd>
			<move file="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}" tofile="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}.bak" />
			<property name="my-home" location="@{pmd.src.dir}"/>
			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}" style="@{pmd.report-preprocessor.file}">
				<param name="relative.path" expression="${my-home}" />				
			</xslt>

			<xslt taskname="pmd" in="${pmd.sub-project.rpt.dir.diff}/@{pmd.xml.name}.bak" out="${pmd.sub-project.rpt.dir.diff}/@{pmd.html.name}" style="@{pmd.report-xsl.file}" />
		</sequential>
	</macrodef>

	<macrodef name="static-analysis-javancss">
		<attribute name="javancss.src.dir" />
		<attribute name="javancss.rpt.dir" />
		<attribute name="javancss.report-xsl.file" />
		<attribute name="javancss.xml.name" default="javancss.xml" />
		<attribute name="javancss.html.name" default="javancss.html" />
		<sequential>
			<taskdef name="javancss" classpathref="project.test.javancss.classpath" classname="javancss.JavancssAntTask" />
			<javancss srcdir="@{javancss.src.dir}" includes="**/*.java" excludes="**/*test*/*" generatereport="true" outputfile="@{javancss.rpt.dir}/@{javancss.xml.name}" ccnPerFuncMax="10" format="xml">
			</javancss>
			<xslt taskname="javancss" in="@{javancss.rpt.dir}/@{javancss.xml.name}" out="@{javancss.rpt.dir}/@{javancss.html.name}" style="@{javancss.report-xsl.file}" />
		</sequential>
	</macrodef>
	<macrodef name="static-analysis-findbugs">
		<attribute name="findbugs.home.dir" />
		<attribute name="findbugs.src.dir" />
		<attribute name="findbugs.rpt.dir" />
		<attribute name="findbugs.classes.dir" />
		<attribute name="findbugs.report-xsl.file" />
		<attribute name="findbugs.app.classpath.ref" />
		<attribute name="findbugs.xml.name" default="findbugs.xml" />
		<attribute name="findbugs.html.name" default="findbugs.html" />
		<sequential>
			<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="project.test.findbugs.classpath" />

			<findbugs home="@{findbugs.home.dir}" output="xml:withMessages" outputFile="@{findbugs.rpt.dir}/@{findbugs.xml.name}" jvmargs="-Xms128m -Xmx512m">
				<auxClasspath>
					<fileset refid="@{findbugs.app.classpath.ref}" />
				</auxClasspath>

				<sourcePath path="@{findbugs.src.dir}" />
				<class location="@{findbugs.classes.dir}" />
			</findbugs>
			<xslt taskname="findbugs" in="@{findbugs.rpt.dir}/@{findbugs.xml.name}" out="@{findbugs.rpt.dir}/@{findbugs.html.name}" style="@{findbugs.report-xsl.file}" />
		</sequential>
	</macrodef>
	<macrodef name="static-analysis-checkstyle">
		<attribute name="checkstyle.src.dir" />
		<attribute name="checkstyle.rpt.dir" />
		<attribute name="checkstyle.report-xsl.file" />
		<attribute name="checkstyle.config.file" />
		<attribute name="checkstyle.xml.name" default="checkstyle.xml" />
		<attribute name="checkstyle.html.name" default="checkstyle.html" />
		<attribute name="checkstyle.classpath.ref.name" />
		<sequential>
			<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.checkstyle.classpath" />
			<cs:checkstyle config="@{checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="0" maxwarnings="0" classpathref="@{checkstyle.classpath.ref.name}">
				<formatter type="xml" tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" />
				<fileset dir="@{checkstyle.src.dir}">
					<include name="**/*.java" />
				</fileset>
			</cs:checkstyle>
			<xslt taskname="checkstyle" in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}" style="@{checkstyle.report-xsl.file}">
				<param name="output.dir" expression="@{checkstyle.rpt.dir}" />
			</xslt>

		</sequential>
	</macrodef>

	<macrodef name="static-analysis-diff-checkstyle">
		<attribute name="differential.file.name" default="diff_list.txt" />
		<attribute name="checkstyle.src.dir" />
		<attribute name="checkstyle.rpt.dir" />
		<attribute name="checkstyle.report-xsl.file" />
		<attribute name="checkstyle.config.file" />
		<attribute name="checkstyle.xml.name" default="checkstyle.xml" />
		<attribute name="checkstyle.html.name" default="checkstyle.html" />
		<attribute name="checkstyle.classpath.ref.name" />

		<sequential>
			<delete file="@{differential.file.name}" />
			<touch file="@{differential.file.name}" />
			<diffrevision old.revision.number="${checkstyle.revision.number}" differential.file.name="@{differential.file.name}" />

			<taskdef resource="checkstyletask.properties" uri="antlib:com.puppycrawl.tools.checkstyle" classpathref="project.test.checkstyle.classpath" />

			<mkdir dir="@{checkstyle.rpt.dir}" />

			<cs:checkstyle config="@{checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="0" maxwarnings="0" classpathref="@{checkstyle.classpath.ref.name}">

				<formatter type="xml" tofile="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" />

				<fileset dir="@{checkstyle.src.dir}">
					<patternset>
						<includesfile name="@{differential.file.name}" />
					</patternset>
				</fileset>
			</cs:checkstyle>

			<xslt taskname="checkstyle" in="@{checkstyle.rpt.dir}/@{checkstyle.xml.name}" out="@{checkstyle.rpt.dir}/@{checkstyle.html.name}" style="@{checkstyle.report-xsl.file}" />
		</sequential>
	</macrodef>


	<macrodef name="static-analysis-cobertura">
		<attribute name="cobertura.rpt.dir" />
		<attribute name="cobertura.classes.dir" />
		<attribute name="cobertura.instrumented.dir" />
		<attribute name="cobertura.report-xsl.file" />
		<attribute name="cobertura.ser.file" />
		<attribute name="cobertura.config.file" />
		<sequential>
			<taskdef classpathref="project.test.cobertura.classpath" resource="tasks.properties" />
			<delete dir="@{cobertura.instrumented.dir}"/>
			<mkdir dir="@{cobertura.instrumented.dir}" />
			<cobertura-instrument datafile="@{cobertura.instrumented.dir}/@{cobertura.ser.file}">
				<fileset dir="@{cobertura.classes.dir}">
					<include name="*.jar" />
				</fileset>
			</cobertura-instrument>
		</sequential>
	</macrodef>
</project>
