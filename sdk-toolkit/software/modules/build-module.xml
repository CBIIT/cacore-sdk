<!-- *********************************************************************** -->
<!-- ** PROJECT:   BDA Blueprints Web Application                         ** -->
<!-- *********************************************************************** -->

<project name="sdk-module-build" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<property name="root.dir" location="${basedir}/../.." />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="build.dir" location="${software.dir}\build" />
	<property name="modules.dir" location="${software.dir}/modules" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="target.module.dir" location="${target.dir}/modules" />

	<property name="module.name" value="sdk-modules" />
	<property name="module.lib.dir" location="${target.module.dir}/lib" />

	<property name="compile.lib.dir" location="${software.dir}/lib/compile" />
	<property name="runtime.lib.dir" location="${software.dir}/lib/runtime" />
	<property name="src.java.dir" value="${target.module.dir}/java-src" />
	<property name="build.classes.dir" value="${target.dir}/modules/classes" />
	
	<property name="sdk-jar-prefix" value="sdk" />

	<property name="codegen.module.name" value="codegen" />
	<property name="codegen-templates.module.name" value="codegen-templates" />
	<property name="codegen-validator.module.name" value="codegen-validator" />
	<property name="codegen-validator-templates.module.name" value="codegen-validator-templates" />
		
	<property name="grid-jaas.module.name" value="grid-jaas" />
	<property name="grid-jaas-client.module.name" value="grid-jaas-client" />
	<property name="grid-jaas-jndi-binder.module.name" value="grid-jaas-jndi-binder" />
	<property name="grid-remoting.module.name" value="grid-remoting" />
	<property name="security.module.name" value="security" />
	<property name="grid-security.module.name" value="grid-security" />
	<property name="security-client.module.name" value="security-client" />
	<property name="system-client.module.name" value="system-client" />
	<property name="system-core.module.name" value="system-core" />
	<property name="system-metadata.module.name" value="system-metadata" />
	<property name="system-logging.module.name" value="system-logging" />
	<property name="system-web.module.name" value="system-web" />
	<property name="system-ws.module.name" value="system-ws" />
	<property name="writable-api.module.name" value="writable-api" />
	<property name="writable-api-client.module.name" value="writable-api-client" />

	<property name="jar.name" value="test-jar.jar" />
	<property name="project.properties.file" value="${build.dir}/project.properties" />

		
		
	<target name="clean:dependencies">
		<delete dir="${compile.lib.dir}" />
	</target>

	<path id="project.compile.classpath">
		<fileset dir="${compile.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<fileset dir="${module.lib.dir}" id="project.compile.classpath2">
		<patternset>
			<include name="**/*.jar" />
		</patternset>
	</fileset>
	
	<!-- ******************************************************************* -->
	<!-- ** MAIN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->


	<!-- This will delete all of the files created by the build process -->
	<target name="-pre-clean">
		<delete dir="${build.classes.dir}" quiet="true" />
		<delete file="${target.dir}/${jar.name}" quiet="false" />
	</target>

	<!-- This sets up all of the neccessary directories -->
	<target name="-init" depends="-pre-clean">
		<mkdir dir="${module.lib.dir}"/> 
		<copy todir="${module.lib.dir}" overwrite="true">
			<fileset dir="${software.dir}/lib">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	
	<target name="-compile:templates" depends="-init" description="Compiles all subproject code">
		<taskdef name="jetc" classname="ch.paranor.epla.structure.JETCTask" classpathref="project.compile.classpath" />
		<jetc destDir="${codegen-templates.module.name}/src">
			<fileset dir="${codegen-templates.module.name}/templates" includes="**/*.javajet"/>
		</jetc>
		<jetc destDir="${codegen-validator-templates.module.name}/src">
			<fileset dir="${codegen-validator-templates.module.name}/templates" includes="**/*.javajet"/>
		</jetc>
	</target>

	<target name="compile:application-code" depends="-init, -compile:templates" description="Compiles all subproject code">
		<mkdir dir="${build.classes.dir}" />
		
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true"/>
			<then>
				<javac 
					srcdir="${codegen.module.name}/src:${codegen-templates.module.name}/src:${codegen-validator.module.name}/src:${codegen-validator-templates.module.name}/src:${grid-jaas.module.name}/src:${grid-jaas-client.module.name}/src:${grid-jaas-jndi-binder.module.name}/src:${grid-remoting.module.name}/src:${grid-security.module.name}/src:${security.module.name}/src:${security-client.module.name}/src:${system-client.module.name}/src:${system-core.module.name}/src:${system-metadata.module.name}/src:${system-logging.module.name}/src:${system-web.module.name}/src:${system-ws.module.name}/src:${writable-api.module.name}/src:${writable-api-client.module.name}/src"
					destdir="${build.classes.dir}" debug="true">
					<classpath refid="project.compile.classpath" />
				</javac>
			</then>
			<else>
				<javac 
					srcdir="${codegen.module.name}/src:${codegen-templates.module.name}/src:${codegen-validator.module.name}/src:${codegen-validator-templates.module.name}/src:${security.module.name}/src:${security-client.module.name}/src:${system-client.module.name}/src:${system-core.module.name}/src:${system-metadata.module.name}/src:${system-logging.module.name}/src:${system-web.module.name}/src:${system-ws.module.name}/src:${writable-api.module.name}/src:${writable-api-client.module.name}/src"
					destdir="${build.classes.dir}" debug="true">
					<classpath refid="project.compile.classpath" />
				</javac>
			</else>
		</if>
	</target>

	<macrodef name="create-jar" description="Creates a JAR file">
		<attribute name="include-pattern1" />
		<attribute name="include-pattern2" default=""/>
		<attribute name="include-pattern3" default=""/>
		<attribute name="include-pattern4" default=""/>
		<attribute name="include-pattern5" default=""/>
		<attribute name="include-pattern6" default=""/>
		<attribute name="include-pattern7" default=""/>
		
		<attribute name="exclude-pattern1" default=""/>
		<attribute name="exclude-pattern2" default=""/>
		<attribute name="exclude-pattern3" default=""/>
		<attribute name="exclude-pattern4" default=""/>
		<attribute name="exclude-pattern5" default=""/>
		<attribute name="module-name" />
		<sequential>
			<jar destfile="${module.lib.dir}/${sdk-jar-prefix}-@{module-name}-${sdk.version}.jar">
				<manifest>
					<attribute name="Generated-By" value="caCORE SDK Code Generator" />
					<attribute name="Version" value="${VERSION}" />
				</manifest>
				<fileset dir="${build.classes.dir}" >
					<include name="@{include-pattern1}"/>
					<include name="@{include-pattern2}"/>
					<include name="@{include-pattern3}"/>
					<include name="@{include-pattern4}"/>
					<include name="@{include-pattern5}"/>
					<include name="@{include-pattern6}"/>
					<include name="@{include-pattern7}"/>
					<exclude name="@{exclude-pattern1}"/>
					<exclude name="@{exclude-pattern2}"/>
					<exclude name="@{exclude-pattern3}"/>
					<exclude name="@{exclude-pattern4}"/>
					<exclude name="@{exclude-pattern5}"/>
				</fileset>
				<fileset dir="${modules.dir}/@{module-name}/src" >
					<include name="**/*.java"/>
				</fileset>
			</jar>
		</sequential>
	</macrodef>
	
	<target name="jar" depends="compile:application-code">
		<create-jar module-name="${codegen.module.name}" 
			include-pattern1="gov/nih/nci/codegen/**/*.class" />
		<create-jar module-name="${grid-jaas.module.name}" 
			include-pattern1="gov/nih/nci/system/security/authentication/cagrid/**/*.class" 
			exclude-pattern1="gov/nih/nci/system/security/authentication/cagrid/executor/jboss/**/*.*" 
			exclude-pattern2="gov/nih/nci/system/security/authentication/cagrid/executor/tomcat/**/*.*" 
			exclude-pattern3="gov/nih/nci/system/security/authentication/cagrid/client/**/*.*"/>
		<create-jar module-name="${grid-jaas-client.module.name}" 
			include-pattern1="gov/nih/nci/system/security/authentication/cagrid/client/**/*.class" />		
		<create-jar module-name="${grid-jaas-jndi-binder.module.name}" 
			include-pattern1="gov/nih/nci/system/security/authentication/cagrid/executor/jboss/**/*.*" 
			include-pattern2="gov/nih/nci/system/security/authentication/cagrid/executor/tomcat/**/*.*" />
		<create-jar module-name="${grid-remoting.module.name}" 
			include-pattern1="gov/nih/nci/system/globus/**/*.*" 
			include-pattern2="gov/nih/nci/system/springframework/**/*.*" />
		<create-jar module-name="${security.module.name}" 
			include-pattern1="gov/nih/nci/system/security/**/*.*" 
			exclude-pattern1="gov/nih/nci/system/security/acegi/providers/**/*.*" 
			exclude-pattern2="gov/nih/nci/system/security/authentication/cagrid/**/*.*"/>
		<create-jar module-name="${security-client.module.name}" 
			include-pattern1="gov/nih/nci/system/security/acegi/providers/**/*.*" />
		<create-jar module-name="${system-client.module.name}" 
			include-pattern1="gov/nih/nci/system/applicationservice/*.*"  
			include-pattern2="gov/nih/nci/system/client/**/*.*" 
			include-pattern3="gov/nih/nci/system/dao/*Exception.*" 
			include-pattern4="gov/nih/nci/system/query/cql/**/*.*" 
			include-pattern5="gov/nih/nci/system/query/hibernate/**/*.*"
			include-pattern6="gov/nih/nci/system/query/nestedcriteria/**/*.*"
			include-pattern7="gov/nih/nci/system/query/*.*"
			exclude-pattern1="**/impl/**/*.*"
			exclude-pattern2="gov/nih/nci/system/client/proxy/CLM*.*"
			exclude-pattern3="**/Writable*.*"/>
		<create-jar module-name="${system-core.module.name}" 
			include-pattern1="gov/nih/nci/system/applicationservice/impl/**/*.*"  
			include-pattern2="gov/nih/nci/system/dao/**/*.*" 
			include-pattern3="gov/nih/nci/system/util/**/*.class" 
			include-pattern4="gov/nih/nci/system/metadata/*.class" 
			exclude-pattern1="gov/nih/nci/system/dao/*Exception.*"
			exclude-pattern2="**/Writable*.*"/>
		<create-jar module-name="${system-metadata.module.name}" 
			include-pattern1="gov/nih/nci/system/metadata/*.class" 
			exclude-pattern1="gov/nih/nci/system/applicationservice/impl/**/*.*"  
			exclude-pattern2="gov/nih/nci/system/dao/**/*.*" 
			exclude-pattern3="gov/nih/nci/system/util/**/*.class" 
			exclude-pattern4="gov/nih/nci/system/dao/*Exception.*"
			exclude-pattern5="**/Writable*.*"/>
		<create-jar module-name="${system-logging.module.name}" 
			include-pattern1="gov/nih/nci/system/client/proxy/CLM*.*"  />
		<create-jar module-name="${system-web.module.name}" 
			include-pattern1="**/web/**/*.*"  />
		<create-jar module-name="${system-ws.module.name}" 
			include-pattern1="**/webservice/**/*.*"  />
		<create-jar module-name="${writable-api.module.name}" 
			include-pattern1="gov/nih/nci/system/applicationservice/impl/Writable*.class"  
			include-pattern2="gov/nih/nci/system/dao/**/Writable*.class"
			include-pattern3="gov/nih/nci/system/util/**/Writable*.class"/>
		<create-jar module-name="${writable-api-client.module.name}" 
			include-pattern1="gov/nih/nci/system/applicationservice/Writable*.class"  
			include-pattern2="gov/nih/nci/system/applicationservice/*Facade*.class"
			include-pattern3="gov/nih/nci/system/query/*.class"
			include-pattern4="gov/nih/nci/system/query/example/*.class"
			include-pattern5="gov/nih/nci/system/query/hql/*.class" /> 	
	</target>

	<target name="dist" depends="build:all" description="Copies JAR file to distribution folder">		
	</target>

	<target name="post-clean">
		<delete dir="${build.classes.dir}" quiet="false" />
	</target>

	<!-- removed test target dependency -->
	<target name="build:all" depends="-pre-clean,-init,jar,post-clean" description="Default target" >
	</target>

	<!-- This is a wrapper target for all static analysis targets -->
	<import file="static-analysis-build-module.xml" />
	
	<!-- -->
	<target name="static-analysis" description="Performs static analysis" depends="
			static-analysis:init,
			static-analysis:findbugs-init,
			static-analysis:simian,
			static-analysis:pmd,
			static-analysis:diff:pmd,
			static-analysis:checkstyle,
			static-analysis:diff:checkstyle,
			static-analysis:javancss,
			static-analysis:cobertura
			">
		<!-- 
		<fail if="checkstyle.failure" message="There were Checkstyle failures." />
		<fail if="pmd.failure.diff" message="There were PMD failures." />-->
	</target>
	
	<!-- One target and one macro have been written for each static-analysis tool.  The macro runs static-analysis on an one set of values. The target then calls the macro with values for each sub-project.  If a user wanted to add options to the static-analysis tool in the the macro, they could add an attribute, refer to that attribute in the static-analysis call and then add the option to each of the calls to the marco in the wrapper target.
		-->
		<!-- Runs Simian a code duplication reporter.
			You can find additional information about simian at:
			http://www.redhillconsulting.com.au/products/simian/installation.html
			-->
		<target name="static-analysis:simian" depends="static-analysis:init" description="Performs code duplication analysis">
			<static-analysis-simian simian.src.dir="${src.java.dir}" simian.rpt.dir="${reports.simian.dir}" simian.report-xsl.file="${common.dir}/simian/simian.xsl" simian.xml.name="simian-sdk-modules.xml" simian.html.name="simian-sdk-modules.html" />
		</target>

		<target name="static-analysis:pmd" depends="
			static-analysis:init
			" description="PMD scans Java source code and looks for Possible bugs,Dead code,Overcomplicated expressions and Duplicate code">
			<static-analysis-pmd pmd.src.dir="${src.java.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="sdk-modules" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset-basic.xml" pmd.xml.name="pmd-report.xml" pmd.html.name="pmd-report.html" />
		</target>

		<target name="static-analysis:diff:pmd" depends="
			static-analysis:init
			">
			<static-analysis-diff-pmd differential.file.name="diff_list.txt" pmd.src.dir="${src.java.dir}" pmd.rpt.dir="${reports.pmd.dir}" pmd.root-dir.name="software" pmd.sub-project.name="sdk-modules" pmd.report-xsl.file="${common.dir}/pmd/pmd-report.xslt" pmd.report-preprocessor.file="${common.dir}/pmd/pmd-hudson-preprocessor.xlst" pmd.rule-set.file="${common.dir}/pmd/pmd-ruleset-basic.xml" pmd.xml.name="pmd-report.xml" pmd.html.name="pmd-report.html" />
			<replaceregexp file="${project.properties.file}" byline="true" match="^(pmd.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
		</target>

		<!-- Runs JavaNCSS a tool that identifies code Cyclomatic Complexity.
			You can find additional information about JavaNCSS at:
			http://www.kclee.de/clemens/java/javancss/
			-->
		<target name="static-analysis:javancss" depends="
			static-analysis:init
			" description="Runs JavaNCSS a tool that identifies code Cyclomatic Complexity.">
			<static-analysis-javancss javancss.src.dir="${src.java.dir}" javancss.rpt.dir="${reports.javancss.dir}" javancss.report-xsl.file="${common.dir}/javancss/javancss2methodhtml.xsl" javancss.xml.name="javancss_metrics_sdk-modules.xml" javancss.html.name="javancss_report_sdk-modules.html" />
		</target>

		<!-- Runs Findbugs a tool that attempts to find bugs.
			You can find additional information about findbugs at:
			http://findbugs.sourceforge.net/
			-->
		<target name="static-analysis:findbugs" depends="
			compile:application-code,
			static-analysis:findbugs-init,
			static-analysis:init
			" description="static analysis to look for bugs in Java code">
			<mkdir dir="${reports.findbugs.dir}/sdk-modules" />
			<static-analysis-findbugs findbugs.home.dir="${findbugs.home.dir}" findbugs.src.dir="${src.java.dir}" findbugs.classes.dir="${build.classes.dir}" findbugs.rpt.dir="${reports.findbugs.dir}/sdk-modules" findbugs.report-xsl.file="${findbugs.home.dir}/src/xsl/fancy.xsl" findbugs.app.classpath.ref="project.compile.classpath2" findbugs.xml.name="findbugs.xml" findbugs.html.name="findbugs.html" />
		</target>

		<!-- Runs CheckStyle is a codeing standard violation reporter.  
			You can find additional information about checkstyle at:
			http://checkstyle.sourceforge.net/
			-->
		<target name="static-analysis:checkstyle" depends="
			static-analysis:init
			" description="Runs CheckStyle is a codeing standard violation reporter.">
			<static-analysis-checkstyle checkstyle.src.dir="${src.java.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir}" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${checkstyle.config}" checkstyle.xml.name="checkstyle.xml" checkstyle.html.name="checkstyle.html" checkstyle.classpath.ref.name="project.test.checkstyle.classpath" />
		</target>

		<target name="static-analysis:diff:checkstyle" depends="
			static-analysis:init
			">
			<static-analysis-diff-checkstyle differential.file.name="diff_list.txt" checkstyle.src.dir="${src.java.dir}" checkstyle.rpt.dir="${reports.checkstyle.dir.diff}/changeset" checkstyle.report-xsl.file="${common.dir}/checkstyle/checkstyle-simple.xsl" checkstyle.config.file="${checkstyle.config}" checkstyle.xml.name="checkstyle.xml" checkstyle.html.name="checkstyle.html" checkstyle.classpath.ref.name="project.test.checkstyle.classpath" />
			<replaceregexp file="${project.properties.file}" byline="true" match="^(checkstyle.revision.number)=(.*)" replace="\1=${build.svn.revision}" />
		</target>

		<!-- Runs Cobertura a code coveragetool.
			You can find additional information about cobertura at:
			http://cobertura.sourceforge.net/
			-->
		<target name="static-analysis:cobertura" depends="
			compile:application-code,
			static-analysis:init
			" description="Cobertura is a free Java tool that calculates the percentage of code accessed by tests.">
			<mkdir dir="${cobertura.module.lib.dir}/instrumented/sdk" />
			<static-analysis-cobertura cobertura.classes.dir="${module.lib.dir}" cobertura.rpt.dir="${reports.cobertura.dir}/sdk" cobertura.instrumented.dir="${cobertura.module.lib.dir}/instrumented/sdk" cobertura.report-xsl.file="${common.dir}/cobertura/cobertura-simple.xsl" cobertura.ser.file="cobertura.ser" cobertura.config.file="${common.dir}/cobertura/cobertura.xml" />
		</target>
</project>
