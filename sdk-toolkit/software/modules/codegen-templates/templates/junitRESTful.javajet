<%@ jet package="gov.nih.nci.codegen.transformer.jet" 
        class="JunitRESTfulTransformer"
        skeleton="JunitRESTfulTransformerBase.skeleton" %>
<% String fullPackageName=transformerUtils.getFullPackageName(klass);%>
<% String klassName=klass.getName();%>        
package test.<%=fullPackageName%>;

import <%=fullPackageName%>.<%=klassName%>;

import javax.ws.rs.core.Response;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.FileWriter;
import java.io.File;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.entity.FileEntity;
import org.apache.cxf.jaxrs.client.WebClient;

import org.apache.cxf.common.util.Base64Utility;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.Iterator;

import test.gov.nih.nci.cacoresdk.SDKRESTfulTestBase;
import gov.nih.nci.system.applicationservice.ApplicationException;

public class <%=klassName%>ResourceTest extends SDKRESTfulTestBase
{
	public static String getTestCaseName()
	{
		return "<%=klassName%>  RESTful Resource Test Case";
	}

<% if (!transformerUtils.isAbstract(klass)	)  {%>
	
	/**
	 * Uses Nested Search Criteria for search
	 * Verifies that the results are returned 
	 * Verifies size of the result set
	 * Verifies that none of the attributes are null
	 * 
	 * @throws Exception
	 */
	public void testGet() throws Exception
	{
		
	  try {
 
 		<%=klassName%> searchObject = new <%=klassName%>();
 		Collection results = getApplicationService().search("<%=fullPackageName%>.<%=klassName%>",searchObject );
		String id = "";
		
		if(results != null && results.size() > 0)
		{
			<%=klassName%> obj = (<%=klassName%>) ((List)results).get(0);
		<%
			UMLAttribute attrb = transformerUtils.getClassIdAttr(klass);
			
			
			if(attrb != null && !transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb.getDatatype().getName());
			if(attrb.getDatatype().getName().equals("string"))
			{
			%>
		
				String idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=attrb.getDatatype().getName()%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			%>
			id = new <%=dataType%>(idVal).toString();
			<%
			}
			else if(attrb != null && transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.isoDatatypeCompleteMap.get(attrb.getDatatype().getName());
				if(dataType == null)
					dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb.getDatatype().getName());
			if(dataType.equals("Ii"))
			{
			%>
			         id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>().getExtension();
			<%
			}
			else if(dataType.equals("string"))
			{
			%>
		
				 id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=dataType%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
				id = new <%=dataType%>(idVal).toString();
			<%
			}
			}
			
			%>
		}
		else
			return;

		if(id.equals(""))
			return;
			
		String url = baseURL + "/rest/<%=klassName%>/"+id;

 
		WebClient client = WebClient.create(url);
		client.type("application/xml").accept("application/xml");		
		Response response = client.get();
 
		if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
		else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
 		else if (response.getStatus() != 200) {
			throw new RuntimeException("Failed : HTTP error code : "
			   + response.getStatus());
		}
 
 		File myFile = new File("<%=klassName%>"+"XML.xml");	
 			
		System.out.println("writing data to file "+myFile.getAbsolutePath());
		FileWriter myWriter = new FileWriter(myFile);

		BufferedReader br = new BufferedReader(
                         new InputStreamReader(((InputStream)response.getEntity())));
 
		String output;
		System.out.println("Output from Server .... \n");
		while ((output = br.readLine()) != null) {
			myWriter.write(output);
			System.out.println(output);
		}
 
		myWriter.flush();
 		myWriter.close();
	  } catch (Exception e) {
		e.printStackTrace();
		throw e;
	  }
		
	}

	public void testSearch() throws Exception
	{
		
	  try {
 
		<%
			UMLAttribute attrb3 = transformerUtils.getClassIdAttr(klass);
			if(attrb3 != null)
			{
			
		%>
			
		String url = baseURL + "/rest/<%=klassName%>/search;<%=attrb3.getName()%>=*";
		WebClient client = WebClient.create(url);
		client.type("application/xml").accept("application/xml");		
		Response response = client.get();

		if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
		else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
 		else if (response.getStatus() != 200) {
			throw new RuntimeException("Failed : HTTP error code : "
			   + response.getStatus());
		}
 
 		File myFile = new File("<%=klassName%>_Search"+"XML.xml");						
		System.out.println("writing data to file "+myFile.getAbsolutePath());
		FileWriter myWriter = new FileWriter(myFile);

		BufferedReader br = new BufferedReader(
                         new InputStreamReader(((InputStream)response.getEntity())));
 
		String output;
		System.out.println("Output from Server .... \n");
		while ((output = br.readLine()) != null) {
			myWriter.write(output);
			System.out.println(output);
		}
 
		myWriter.flush();
 		myWriter.close();
 		<%}%>
	  } catch (Exception e) {
		e.printStackTrace();
	  }
		
	}	



//***************************************************


<%	
List<UMLAssociation> assocs = transformerUtils.getAssociations(klass, true);
int counter = 0;
for(UMLAssociation assoc: assocs)
{
	List<UMLAssociationEnd> assocEnds = assoc.getAssociationEnds();
	List<UMLAssociationEnd> associationEnds = new java.util.ArrayList<UMLAssociationEnd>();
	UMLAssociationEnd thisEnd = null;
	UMLAssociationEnd otherEnd = null;
	try
	{
		thisEnd = transformerUtils.getThisEnd(klass,assocEnds, true);
		otherEnd = transformerUtils.getOtherEnd(klass,assocEnds, true);
		associationEnds.add(otherEnd);
	}
	catch(GenerationException e)
	{
		continue;
	}

	if(transformerUtils.isBidirectionalSelfAssociation(klass,assocEnds)) { // handle bi-directional self-association 
		associationEnds.add(thisEnd);
	}

	for(UMLAssociationEnd associationEnd : associationEnds)
	{	
		counter++;
		if(associationEnd.isNavigable())
		{

			UMLClass assocKlass = (UMLClass)associationEnd.getUMLElement();
			String assocPackageName=transformerUtils.getFullPackageName(assocKlass);
			String name = associationEnd.getRoleName(); 
	%>
	public void test<%=klassName%><%=counter%>()
	{
		try
		{
	<%
			UMLAttribute attrb6 = transformerUtils.getClassIdAttr(klass);
			if(attrb6 != null)
			{
	%>
		String url = baseURL + "/rest/<%=klassName%>/search;<%=attrb6.getName()%>=*/<%=name%>";
 
		WebClient client = WebClient.create(url);
		client.type("application/xml").accept("application/xml");		
		Response response = client.get();
 
		if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
		else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
 		else if (response.getStatus() != 200) {
			throw new RuntimeException("Failed : HTTP error code : "
			   + response.getStatus());
		}
 
 		File myFile = new File("<%=klassName%>_Search"+"XML.xml");						
		System.out.println("writing data to file "+myFile.getAbsolutePath());
		FileWriter myWriter = new FileWriter(myFile);

		BufferedReader br = new BufferedReader(
                         new InputStreamReader(((InputStream)response.getEntity())));
 
		String output;
		System.out.println("Output from Server .... \n");
		while ((output = br.readLine()) != null) {
			myWriter.write(output);
			System.out.println(output);
		}
 
		myWriter.flush();
 		myWriter.close();
 		<%}%>
 		
		}
		catch(Exception e)
		{
			  e.printStackTrace();
			  ResponseBuilder builder = Response.status(Status.INTERNAL_SERVER_ERROR);
			  builder.type("application/xml");
			  StringBuffer buffer = new StringBuffer();
			  buffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			  buffer.append("<response>");
			  buffer.append("<type>ERROR</type>");
			  buffer.append("<code>INTERNAL_ERROR_4</code>");
			  buffer.append("<message>Failed to Query due to: "+e.getMessage()+"</message>");
			  buffer.append("</response>");
			  builder.entity(buffer.toString());
			  throw new WebApplicationException(builder.build());
		}

	}

	<%

		if(transformerUtils.isAssociationEndMany(associationEnd))
		{%>

					
			
	public void test<%=transformerUtils.getGetterMethodName(associationEnd)%>()
	{
		try
		{
		<%=klassName%> searchObject = new <%=klassName%>();
 		Collection results4 = getApplicationService().search("<%=fullPackageName%>.<%=klassName%>",searchObject );
		String id = "";
		
		if(results4 != null && results4.size() > 0)
		{
			<%=klassName%> obj = (<%=klassName%>) ((List)results4).get(0);
		<%	
			UMLAttribute attrb4 = transformerUtils.getClassIdAttr(klass);
			
			
			if(attrb4 != null && !transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb4.getDatatype().getName());
			if(attrb4.getDatatype().getName().equals("string"))
			{
			%>
		
				String idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=attrb4.getDatatype().getName()%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			%>
			id = new <%=dataType%>(idVal).toString();
			<%
			}
			else if(attrb4 != null && transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.isoDatatypeCompleteMap.get(attrb4.getDatatype().getName());
				if(dataType == null)
					dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb4.getDatatype().getName());
			if(dataType.equals("Ii"))
			{
			%>
			         id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>().getExtension();
			<%
			}
			else if(dataType.equals("string"))
			{
			%>
		
				 id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=dataType%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
				id = new <%=dataType%>(idVal).toString();
			<%
			}
			}
			
			%>
		}
		else
			return;

		if(id.equals(""))
			return;
			
			String url = baseURL + "/rest/<%=klassName%>/"+id+"/<%=name%>";

			WebClient client = WebClient.create(url);
			client.type("application/xml").accept("application/xml");		
			Response response = client.get();

			if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
				InputStream is = (InputStream) response.getEntity();
				org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
						false);
				org.jdom.Document jDoc = builder.build(is);
				assertEquals(jDoc.getRootElement().getName(), "response");
			}
			else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
				InputStream is = (InputStream) response.getEntity();
				org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
						false);
				org.jdom.Document jDoc = builder.build(is);
				assertEquals(jDoc.getRootElement().getName(), "response");
			}
			else if (response.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
				   + response.getStatus());
			}

			File myFile = new File("<%=klassName%>_Search"+"XML.xml");						
			System.out.println("writing data to file "+myFile.getAbsolutePath());
			FileWriter myWriter = new FileWriter(myFile);

			BufferedReader br = new BufferedReader(
				 new InputStreamReader(((InputStream)response.getEntity())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				myWriter.write(output);
				System.out.println(output);
			}

			myWriter.flush();
			myWriter.close();
		}
		catch(Exception e)
		{
			  e.printStackTrace();
			  ResponseBuilder builder = Response.status(Status.INTERNAL_SERVER_ERROR);
			  builder.type("application/xml");
			  StringBuffer buffer = new StringBuffer();
			  buffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			  buffer.append("<response>");
			  buffer.append("<type>ERROR</type>");
			  buffer.append("<code>INTERNAL_ERROR_4</code>");
			  buffer.append("<message>Failed to Query due to: "+e.getMessage()+"</message>");
			  buffer.append("</response>");
			  builder.entity(buffer.toString());
			  throw new WebApplicationException(builder.build());
		}
			
	}
	<%}else{
	%>
	public void test<%=transformerUtils.getGetterMethodName(associationEnd)%>()
	{
		try
		{
		<%=klassName%> searchObject = new <%=klassName%>();
 		Collection results5 = getApplicationService().search("<%=fullPackageName%>.<%=klassName%>",searchObject );
		String id = "";
		
		if(results5 != null && results5.size() > 0)
		{
			<%=klassName%> obj = (<%=klassName%>) ((List)results5).get(0);
		<%	
			UMLAttribute attrb5 = transformerUtils.getClassIdAttr(klass);
			
			
			if(attrb5 != null && !transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb5.getDatatype().getName());
			if(attrb5.getDatatype().getName().equals("string"))
			{
			%>
		
				String idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=attrb5.getDatatype().getName()%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			%>
			id = new <%=dataType%>(idVal).toString();
			<%
			}
			else if(attrb5 != null && transformerUtils.isISO21090Enabled())
			{
				String dataType = TransformerUtils.isoDatatypeCompleteMap.get(attrb5.getDatatype().getName());
				if(dataType == null)
					dataType = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb5.getDatatype().getName());
			if(dataType.equals("Ii"))
			{
			%>
			         id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>().getExtension();
			<%
			}
			else if(dataType.equals("string"))
			{
			%>
		
				 id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=dataType%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
				id = new <%=dataType%>(idVal).toString();
			<%
			}
			}
			
			%>
		}
		else
			return;

		if(id.equals(""))
			return;
			
	
			String url = baseURL + "/rest/<%=klassName%>/"+id+"/<%=name%>";
			WebClient client = WebClient.create(url);
			client.type("application/xml").accept("application/xml");		
			Response response = client.get();

			if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
				InputStream is = (InputStream) response.getEntity();
				org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
				org.jdom.Document jDoc = builder.build(is);
				assertEquals(jDoc.getRootElement().getName(), "response");
			}
			else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
				InputStream is = (InputStream) response.getEntity();
				org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
						false);
				org.jdom.Document jDoc = builder.build(is);
				assertEquals(jDoc.getRootElement().getName(), "response");
			}
			else if (response.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
				   + response.getStatus());
			}

			File myFile = new File("<%=klassName%>_Search"+"XML.xml");						
			System.out.println("writing data to file "+myFile.getAbsolutePath());
			FileWriter myWriter = new FileWriter(myFile);

			BufferedReader br = new BufferedReader(
				 new InputStreamReader(((InputStream)response.getEntity())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				myWriter.write(output);
				System.out.println(output);
			}

			myWriter.flush();
			myWriter.close();
 		
		}
		catch(Exception e)
		{
		  e.printStackTrace();
		  ResponseBuilder builder = Response.status(Status.INTERNAL_SERVER_ERROR);
		  builder.type("application/xml");
		  StringBuffer buffer = new StringBuffer();
		  buffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		  buffer.append("<response>");
		  buffer.append("<type>ERROR</type>");
		  buffer.append("<code>INTERNAL_ERROR_4</code>");
		  buffer.append("<message>Failed to Query due to: "+e.getMessage()+"</message>");
		  buffer.append("</response>");
		  builder.entity(buffer.toString());
		  throw new WebApplicationException(builder.build());
		}
			
		}
		
		<%}%>

	<%			
	}
	}
	%>

<%}%>

//********************************************************End

<%
if(!transformerUtils.isISO21090Enabled())
{
%>
	public void testDelete() throws Exception
	{
		
	  try {
 
 		<%=klassName%> searchObject = new <%=klassName%>();
 		Collection results = getApplicationService().search("<%=fullPackageName%>.<%=klassName%>",searchObject );
		String id = "";
		
		if(results != null && results.size() > 0)
		{
			<%=klassName%> obj = (<%=klassName%>) ((List)results).get(0);
		<%
			UMLAttribute attrb2 = transformerUtils.getClassIdAttr(klass);
			
			
			if(attrb2 != null && !transformerUtils.isISO21090Enabled())
			{
				String dataType2 = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb2.getDatatype().getName());
			if(attrb2.getDatatype().getName().equals("string"))
			{
			%>
		
				String idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=attrb2.getDatatype().getName()%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			%>
			id = new <%=dataType2%>(idVal).toString();
			<%
			}
			else if(attrb2 != null && transformerUtils.isISO21090Enabled())
			{
				String dataType3 = TransformerUtils.isoDatatypeCompleteMap.get(attrb2.getDatatype().getName());
				if(dataType3 == null)
					dataType3 = TransformerUtils.javaPrimitiveDatatypeMap.get(attrb2.getDatatype().getName());
			if(dataType3.equals("Ii"))
			{
			%>
			         id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>().getExtension();
			<%
			}
			else if(dataType3.equals("string"))
			{
			%>
		
				 id = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
			<%
			}
			else
			{
			%>
				<%=dataType3%> idVal = obj.<%=transformerUtils.getClassIdGetterMthod(klass)%>();
				id = new <%=dataType3%>(idVal).toString();
			<%
			}
			}
			
			%>
		}
		else
			return;

		if(id.equals(""))
			return;
		
		String url = baseURL + "/rest/<%=klassName%>/"+id;
		WebClient client = WebClient.create(url);
		
		Response response = client.delete();
		
		if (response.getStatus() == Status.NOT_ACCEPTABLE.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
		else if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {
			InputStream is = (InputStream) response.getEntity();
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(
					false);
			org.jdom.Document jDoc = builder.build(is);
			assertEquals(jDoc.getRootElement().getName(), "response");
		}
 		else if (response.getStatus() != 200) {
			throw new RuntimeException("Failed : HTTP error code : "
			   + response.getStatus());
		}
	  } catch (Exception e) {
		e.printStackTrace();
		throw e;
	  }
		
	}


	public void testPost() throws Exception
	{
		
	  try {
		DefaultHttpClient httpClient = new DefaultHttpClient();
		String url = baseURL + "/rest/<%=klassName%>";
		WebClient client = WebClient.create(url);
		HttpPost postRequest = new HttpPost(url);
		File myFile = new File("<%=klassName%>"+"XML.xml");						
 		if(!myFile.exists())
 		{
 			testGet();
 			myFile = new File("<%=klassName%>"+"XML.xml");
 			if(!myFile.exists())
				return;
 		}
		
 		FileEntity input = new FileEntity(myFile);
 		input.setContentType("application/xml");
 		System.out.println("input: "+myFile);
 		postRequest.setEntity(input);
  
 		HttpResponse response = httpClient.execute(postRequest);
  
 		BufferedReader br = new BufferedReader(
                         new InputStreamReader((response.getEntity().getContent())));
  
 		String output;
 		System.out.println("Output from Server .... \n");
 		while ((output = br.readLine()) != null) {
 			System.out.println(output);
 		}
  
 		httpClient.getConnectionManager().shutdown();
	  } catch (Exception e) {
 		e.printStackTrace();
 		throw e;
 	  }
		
	}


	public void testPut() throws Exception
	{
		
	  try {
		DefaultHttpClient httpClient = new DefaultHttpClient();
		String url = baseURL + "/rest/<%=klassName%>";
		HttpPut putRequest = new HttpPut(url);
		File myFile = new File("<%=klassName%>"+"XML.xml");						
 		if(!myFile.exists())
 		{
 			testGet();
 			myFile = new File("<%=klassName%>"+"XML.xml");
 			if(!myFile.exists())
				return;
 		}
		
 		FileEntity input = new FileEntity(myFile);
 		input.setContentType("application/xml");
 		putRequest.setEntity(input);
		
 		HttpResponse response = httpClient.execute(putRequest);
  
  		if(response.getEntity() != null)
  		{
			BufferedReader br = new BufferedReader(
				 new InputStreamReader((response.getEntity().getContent())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				System.out.println(output);
			}
  		}
  		
 		httpClient.getConnectionManager().shutdown();
	  } catch (Exception e) {
 		e.printStackTrace();
 		throw e;
	  }
		
	}

	
<%}
}
else
{
%>
public void testNothing()
{
	assertTrue(Boolean.TRUE);
}
<%
}
%>
}