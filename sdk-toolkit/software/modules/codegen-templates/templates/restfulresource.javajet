<%@ jet package="gov.nih.nci.codegen.transformer.jet" 
        class="RESTfulResourceTransformer"
        skeleton="RESTfulResourceTransformerBase.skeleton" %>
<% String fullPackageName=transformerUtils.getFullPackageName(klass);%>
<% String klassName=klass.getName();%>        
package <%=fullPackageName%>;

<%=transformerUtils.getImports(klass)%>
import <%=fullPackageName%>.<%=klassName%>;

import gov.nih.nci.system.applicationservice.ApplicationException;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.MatrixParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.Context;
import javax.servlet.ServletContext;
import javax.ws.rs.WebApplicationException;

import java.util.List;
import java.util.Collection;
import java.util.Iterator;
import java.util.ArrayList;
import gov.nih.nci.system.query.hibernate.HQLCriteria;
import gov.nih.nci.system.web.RESTfulResource;
import gov.nih.nci.system.query.hql.DeleteHQLQuery;
import gov.nih.nci.system.applicationservice.ApplicationException;
import org.apache.log4j.Logger;
import java.util.StringTokenizer;

@Path("/<%=klassName%>")
@Produces("application/xml")
public class <%=klassName%>Resource extends RESTfulResource
{

	private static Logger log = Logger.getLogger(<%=klassName%>Resource.class);	
	
	public <%=klassName%>Resource(@Context ServletContext context)
	{
		super(context);
	}

<%	
String action = transformerUtils.getRestFulResourceAction(klass).toUpperCase();
if(action != null && action.indexOf("R") != -1)
{%>
	
	@GET
	@Path("{id : \\d+}")
	@Produces("application/xml")
	public <%=klassName%> get<%=klassName%>ById(@Context javax.servlet.http.HttpServletRequest request, @Context javax.servlet.http.HttpServletResponse response, @PathParam("id") String id, @PathParam("startIndex") String start, @PathParam("size") String size) 
	{
		try
		{
	  		List params = new ArrayList();
	  		String className = "<%=fullPackageName%>.<%=klassName%>";
			
			int startIndex = -1;
			int totalSize = -1;
			if(start != null)
				startIndex = Integer.parseInt(start);
			if(size != null)
				totalSize = Integer.parseInt(size);
			
			params.add(new Long(id));	
			HQLCriteria criteria = new HQLCriteria("from <%=fullPackageName%>.<%=klassName%> a where a.<%=transformerUtils.getClassIdAttrName(klass)%> = ?", params, startIndex, totalSize);
			
			Collection<<%=klassName%>> results = getApplicationService().query(criteria);
			if(results != null && results.size() > 0)
				return results.iterator().next();
			else
			{
				  ResponseBuilder builder = Response.status(Status.NOT_FOUND);
				  builder.type("application/xml");
				  builder.entity("<message>Not found</message>");
				  throw new WebApplicationException(builder.build());
			}
			
	  		//query(request, response, criteria, className);
		}
		catch(WebApplicationException e)
		{
			throw e;
		}
		catch(ApplicationException e)
		{
			  log.error("Error in querying REST resource: " + e.getMessage());
			  ResponseBuilder builder = Response.status(Status.INTERNAL_SERVER_ERROR);
			  builder.type("application/xml");
			  builder.entity("<error>Failed to Query due to: "+e.getMessage()+"</error>");
			  throw new WebApplicationException(builder.build());
		}
		
	}
	

<%
if(klass.getAttributes() != null && klass.getAttributes().size() > 0 && transformerUtils.isValidForRESTMatrixParam(klass))
{
%>
	@GET
	@Path("/search")
	@Produces("application/xml")
	public Collection<<%=klassName%>> get<%=klassName%>(@Context javax.servlet.http.HttpServletRequest request, @Context javax.servlet.http.HttpServletResponse response, @MatrixParam("sIndex") String bstart, @MatrixParam("bSize") String bsize
	<%
	java.util.Iterator iter = klass.getAttributes().iterator();
	while(iter.hasNext()){
		UMLAttribute attr = (UMLAttribute) iter.next();
		if(transformerUtils.javaPrimitiveDatatypeMap.get(attr.getDatatype().getName()) == null)
			continue;

		if(attr.getDatatype().getName().equals("character") || attr.getDatatype().getName().equals("Character") || attr.getDatatype().getName().equals("char"))
		{
	%>
		, @MatrixParam("<%=attr.getName()%>") Character <%=attr.getName()%>
		
	<%	
		} else {
	%>
		, @MatrixParam("<%=attr.getName()%>") String <%=attr.getName()%>
	<%
		}
	}
	%>)
	{
		try
		{
	  		List params = new ArrayList();
	  		String className = "<%=fullPackageName%>.<%=klassName%>";
			
			int startIndex = -1;
			int totalSize = -1;
			if(bstart != null)
				startIndex = Integer.parseInt(bstart);
			if(bsize != null)
				totalSize = Integer.parseInt(bsize);
			
			String whereCriteria = "";

			List criteria = new ArrayList();
			
			<%
			java.util.Iterator iter2 = klass.getAttributes().iterator();
			while(iter2.hasNext()){
				UMLAttribute attr = (UMLAttribute) iter2.next();
				String atype = null;
				if(transformerUtils.javaPrimitiveDatatypeMap.get(attr.getDatatype().getName()) == null)
					continue;
				else
				{
					if(transformerUtils.javaPrimitiveDatatypeMap.get(attr.getDatatype().getName()) != null)
						atype = transformerUtils.javaPrimitiveDatatypeMap.get(attr.getDatatype().getName());
					else
						atype = attr.getDatatype().getName();
				}
			%>
				if(<%=attr.getName()%> != null)
				{
					criteria.add("<%=attr.getName()%>");
					if("<%=attr.getName()%>" != null && "<%=attr.getName()%>".equalsIgnoreCase("null"))
						criteria.add(" is null ");
					else
					{
						criteria.add("=? ");
						params.add(new <%=atype%>(<%=attr.getName()%>));
					}
				}
			<%}%>
			
			if(criteria.size() > 0)
				whereCriteria = " where ";
			else
			{
				  ResponseBuilder builder = Response.status(Status.NOT_FOUND);
				  builder.type("application/xml");
				  builder.entity("<message>Invalid Criteria</message>");
				  throw new WebApplicationException(builder.build());
			}
			
			java.util.Iterator iter = criteria.iterator();
			
			while(iter.hasNext())
			{
				String crtra = (String) iter.next();
				whereCriteria = whereCriteria + crtra + " ";
				if(iter.hasNext())
					whereCriteria = whereCriteria + " and ";
			}
			
			//params.add(new Long(id));
			HQLCriteria hcriteria = null;
			if(whereCriteria.length() > 0)
				hcriteria = new HQLCriteria("from <%=fullPackageName%>.<%=klassName%> a "+whereCriteria, params, startIndex, totalSize);
			else
				hcriteria = new HQLCriteria("from <%=fullPackageName%>.<%=klassName%> a ", params, startIndex, totalSize);
			
			Collection<<%=klassName%>> results = getApplicationService().query(hcriteria);
			if(results != null && results.size() > 0)
				return results;
			else
			{
				  ResponseBuilder builder = Response.status(Status.NOT_FOUND);
				  builder.type("application/xml");
				  builder.entity("<message>Not found</message>");
				  throw new WebApplicationException(builder.build());
			}
		}
		catch(WebApplicationException e)
		{
			throw e;
		}
		catch(ApplicationException e)
		{
			  log.error("Error in querying REST resource: " + e.getMessage());
			  ResponseBuilder builder = Response.status(Status.INTERNAL_SERVER_ERROR);
			  builder.type("application/xml");
			  builder.entity("<error>Failed to Query due to: "+e.getMessage()+"</error>");
			  throw new WebApplicationException(builder.build());
		}
		
	}
	
<%}%>

<%	
List<UMLAssociation> associations = transformerUtils.getAssociations(klass, true);
List<UMLAssociationEnd> associationAdds = new java.util.ArrayList<UMLAssociationEnd>();
List<String> methodNames = new java.util.ArrayList<String>();

	for(UMLAssociation assoc:associations){
		List<UMLAssociationEnd> assocEnds = assoc.getAssociationEnds();
		methodNames.add("get"+klass.getName());
		for(UMLAssociationEnd associationEnd : assocEnds){	
			if(associationEnd.isNavigable() && !associationAdds.contains(associationEnd))
		{
			
				UMLClass assocKlass = (UMLClass)associationEnd.getUMLElement();
				String name = associationEnd.getRoleName(); 
				String roleName = name.substring(0,1).toUpperCase()+name.substring(1,name.length());
		associationAdds.add(associationEnd);	
		String getterMethodName = transformerUtils.getGetterMethodName(associationEnd);
		
		if(!methodNames.contains(getterMethodName))
		{
				methodNames.add(getterMethodName);
				if(transformerUtils.isAssociationEndMany(associationEnd))
				{
				%>
		@GET
		@Path("{id}/<%=roleName%>")
		@Produces("application/xml")
		public void <%=transformerUtils.getGetterMethodName(associationEnd)%>(@Context javax.servlet.http.HttpServletRequest request, @Context javax.servlet.http.HttpServletResponse response, @PathParam("id") String id){
			try
			{
		  		String className = "<%=fullPackageName%>.<%=klassName%>";
		  		query(request, response, "<%=klassName%>", "<%=fullPackageName%>", id, "<%=roleName%>");
	  		}
			catch(WebApplicationException e)
			{
				throw e;
			}
		}
				<%}else{
				%>
		@GET
		@Path("{id}/<%=roleName%>")
		@Produces("application/xml")
		public void <%=transformerUtils.getGetterMethodName(associationEnd)%>(@Context javax.servlet.http.HttpServletRequest request, @Context javax.servlet.http.HttpServletResponse response, @PathParam("id") String id){
			try
			{
		  		String className = "<%=fullPackageName%>.<%=klassName%>";
		  		query(request, response, "<%=klassName%>", "<%=fullPackageName%>", id, "<%=roleName%>");
	  		}
			catch(WebApplicationException e)
			{
				throw e;
			}
		}
			<%}
			}
		}
		}
	}%>

<%}%>

<%
if(action != null && action.indexOf("C") != -1)
{%>
	@POST
	@Consumes("application/xml")
	public void add<%=klassName%>(<%=klassName%> object)
	{
		try
		{
			save(object);
		}
		catch(WebApplicationException e)
		{
			throw e;
		}
	}

<%}%>

<%
if(action != null && action.indexOf("D") != -1)
{%>

	@DELETE
	@Path("{id}")
	public void delete<%=klassName%>(@Context javax.servlet.http.HttpServletRequest request, @Context javax.servlet.http.HttpServletResponse response, @PathParam("id") String id)
	{
	System.out.println("in delete................");
		try
		{
	  		List params = new ArrayList(1);
			params.add(new Integer(id));
	  		HQLCriteria criteria = new HQLCriteria("from <%=fullPackageName%>.<%=klassName%> a where a.id = ?", params);
			params = new ArrayList(1);
			params.add(new Integer(id));
			String query = "delete from <%=fullPackageName%>.<%=klassName%> a where a.id = ?";
			DeleteHQLQuery deleteQuery = new DeleteHQLQuery(query, params);
			delete(deleteQuery);
		}
		catch(WebApplicationException e)
		{
			throw e;
		}
		
	}
<%}%>

<%
if(action != null && action.indexOf("U") != -1)
{%>

	@PUT
	@Consumes("application/xml")
	public void update<%=klassName%>(<%=klassName%> object)
	{
		try
		{
			update(object);
		}
		catch(WebApplicationException e)
		{
			throw e;
		}
	}

<%}%>
}