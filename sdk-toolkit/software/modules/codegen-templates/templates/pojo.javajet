<%@ jet package="gov.nih.nci.codegen.transformer.jet" 
        class="POJOTransformer"
        skeleton="ClassTransformerBase.skeleton" %>
package <%=transformerUtils.getFullPackageName(klass)%>;

<%=transformerUtils.getImports(klass)%>
import gov.nih.nci.system.web.ResourceLink;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.Transient;

<% 	boolean jaxbEnabled = transformerUtils.isJaxbEnabled();%>
<%=transformerUtils.getJavaDocs(klass)%>
<%=transformerUtils.getHibernateValidatorConstraints(klass)%>
<% if (jaxbEnabled) { %>
<%=transformerUtils.getJaxbXmlAccessorTypeAnnotation()%>
<%=transformerUtils.getJaxbXmlSeeAlsoAnnotation(klass)%>
<%=transformerUtils.getJaxbXmlTypeAnnotation(klass)%>
<%=transformerUtils.getJaxbXmlRootElementAnnotation(klass)%>
<%} %>
public<%=transformerUtils.isAbstract(klass)? " abstract" : "" %> class <%=klass.getName()%> <%=transformerUtils.getSuperClassString(klass)%> implements Serializable<% if (jaxbEnabled) { %>, CycleRecoverable<%} %><%=transformerUtils.getInterfaceString(klass)%>
{
	@Transient
	List<ResourceLink> links = new ArrayList<ResourceLink>();

	/**
	* An attribute to allow serialization of the domain objects
	*/
	private static final long serialVersionUID = 1234567890L;
	

	<%for(UMLAttribute attr:klass.getAttributes()){%>
	<%=transformerUtils.getJavaDocs(attr)%>
	<%=transformerUtils.getHibernateValidatorConstraints(klass,attr)%>
	<%=attr.getVisibility().getName()%> <%=transformerUtils.getDataType(attr)%> <%=attr.getName()%>;
	<%if(!transformerUtils.matchGetOperationName(attr, klass.getOperations()))
	{%>
	<%=transformerUtils.getGetterMethodJavaDocs(attr)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlAttributeAnnotation(klass, attr)%><%}%>
	public <%=transformerUtils.getDataType(attr)%> <%=transformerUtils.getGetterMethodName(attr)%>(){
		return <%=attr.getName()%>;
	}
	<%}%>
	<%
	if(!transformerUtils.matchSetOperationName(attr, klass.getOperations()))
	{%>
	<%=transformerUtils.getSetterMethodJavaDocs(attr)%>
	public void <%=transformerUtils.getSetterMethodName(attr)%>(<%=transformerUtils.getDataType(attr)%> <%=attr.getName()%>){
		this.<%=attr.getName()%> = <%=attr.getName()%>;
	}
	<%}%>
	<%}
	
	
	if(klass.getOperations() != null && klass.getOperations().size() > 0)
	{
		for(UMLOperation operation:klass.getOperations())
		{
	%>
	<%=transformerUtils.getOperationText(klass, operation)%>
	<%}
	}
	
	for(UMLAssociation assoc:klass.getAssociations()){
		List<UMLAssociationEnd> assocEnds = assoc.getAssociationEnds();
		UMLAssociationEnd thisEnd = transformerUtils.getThisEnd(klass,assocEnds);
		UMLAssociationEnd otherEnd = transformerUtils.getOtherEnd(klass,assocEnds);
	
		List<UMLAssociationEnd> associationEnds = new java.util.ArrayList<UMLAssociationEnd>();
		associationEnds.add(otherEnd);
	
		if(transformerUtils.isBidirectionalSelfAssociation(klass,assocEnds)) { // handle bi-directional self-association 
			associationEnds.add(thisEnd);
		}
		
		for(UMLAssociationEnd associationEnd : associationEnds){	
			if(associationEnd.isNavigable())
		{
			
				UMLClass assocKlass = (UMLClass)associationEnd.getUMLElement();
				if(transformerUtils.isAssociationEndMany(associationEnd))
			{%>
	<%=transformerUtils.getJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbCollectionAnnotations(klass,assocKlass,otherEnd.getRoleName())%><%} %>
	private Collection<<%=assocKlass.getName()%>> <%=associationEnd.getRoleName()%>;
	<%=transformerUtils.getGetterMethodJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlTransientAnnotation()%><%} %>
	public Collection<<%=assocKlass.getName()%>> <%=transformerUtils.getGetterMethodName(associationEnd)%>(){
		return <%=associationEnd.getRoleName()%>;
	}

	<%=transformerUtils.getSetterMethodJavaDocs(klass, assoc)%>
	public void <%=transformerUtils.getSetterMethodName(associationEnd)%>(Collection<<%=assocKlass.getName()%>> <%=associationEnd.getRoleName()%>){
		this.<%=associationEnd.getRoleName()%> = <%=associationEnd.getRoleName()%>;
	}
		<%}else{%>
	<%=transformerUtils.getJavaDocs(klass, assoc)%>	
<% if (jaxbEnabled) { %>
	@XmlElement(name="<%=otherEnd.getRoleName()%>", 
				type=<%=assocKlass.getName()%>.class,
				namespace="<%=transformerUtils.getNamespaceUriPrefix() +transformerUtils.getFullPackageName(assocKlass)%>")
<%} %>
	private <%=assocKlass.getName()%> <%=associationEnd.getRoleName()%>;
	<%=transformerUtils.getGetterMethodJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlTransientAnnotation()%><%} %>
	public <%=assocKlass.getName()%> <%=transformerUtils.getGetterMethodName(associationEnd)%>(){
		return <%=associationEnd.getRoleName()%>;
	}
	<%=transformerUtils.getSetterMethodJavaDocs(klass, assoc)%>
	public void <%=transformerUtils.getSetterMethodName(associationEnd)%>(<%=assocKlass.getName()%> <%=associationEnd.getRoleName()%>){
		this.<%=associationEnd.getRoleName()%> = <%=associationEnd.getRoleName()%>;
	}
			<%}
			}
		}
	}

	String idGetter = transformerUtils.getClassIdGetterMthod(klass); 
	if(idGetter!=null){%>
	/**
	* Compares <code>obj</code> to itself and returns true if they both are same
	*
	* @param obj
	**/
	public boolean equals(Object obj)
	{
		if(obj instanceof <%=klass.getName() %>) 
		{
			<%=klass.getName() %> c =(<%=klass.getName()%>)obj; 			 
			if(<%=idGetter%>() != null && <%=idGetter%>().equals(c.<%=idGetter%>()))
				return true;
		}
		return false;
	}
		
	/**
	* Returns hash code for the primary key of the object
	**/
	public int hashCode()
	{
		if(<%=idGetter%>() != null)
			return <%=idGetter%>().hashCode();
		return 0;
	}
	<%}%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbOnCycleDetectedMethod()%><%} %>

public String getNamespacePrefix()
{
<%
String namespace = transformerUtils.getGMENamespace(klass);
if(namespace == null)
 namespace = transformerUtils.getNamespaceUriPrefix();
%>
	return "<%=namespace%>";
}

@Transient
public List<ResourceLink> getLinks()
{
	return links;
}

public void setLinks(List<ResourceLink> links)
{
	this.links = links;
}

public List<ResourceLink> buildLinks(String path)
{
	String idStr = null;
	String href = null;
	ResourceLink link = null;
<%if(transformerUtils.getClassIdGetterMthod(klass) != null) {%>

	<%if(transformerUtils.isISO21090Enabled())
	{
		UMLAttribute attrb = transformerUtils.getClassIdAttr(klass);
		String idMethod = transformerUtils.getClassIdGetterMthod(klass);
		if(attrb != null)
		{
		String attrType = transformerUtils.isoDatatypeCompleteMap.get(attrb.getDatatype().getName());

		if(attrType == null)
			attrType = transformerUtils.javaPrimitiveDatatypeMap.get(attrb.getDatatype().getName());


		if(attrType.equals("Ii"))
		{
		%>
			idStr = <%=idMethod%>().getExtension();
		<%
		}
		else
		{
		%>
			idStr = <%=transformerUtils.getClassIdGetterMthod(klass)%>().toString();
		<%
		}
		}
	}
	else
	{
	%>
	idStr = <%=transformerUtils.getClassIdGetterMthod(klass)%>().toString();
	<%}%>
	
	href = path+"/<%=klass.getName()%>/"+idStr;
	link = new ResourceLink("self", "application/xml", href);
	links.add(link);
<%}%>
	<%
	for(UMLAssociation assoc:klass.getAssociations()){
		List<UMLAssociationEnd> assocEnds = assoc.getAssociationEnds();
		UMLAssociationEnd thisEnd = transformerUtils.getThisEnd(klass,assocEnds);
		UMLAssociationEnd otherEnd = transformerUtils.getOtherEnd(klass,assocEnds);
	
		List<UMLAssociationEnd> associationEnds = new java.util.ArrayList<UMLAssociationEnd>();
		associationEnds.add(otherEnd);
	
		if(transformerUtils.isBidirectionalSelfAssociation(klass,assocEnds)) { // handle bi-directional self-association 
			associationEnds.add(thisEnd);
		}
		
		for(UMLAssociationEnd associationEnd : associationEnds)
		{	
			if(associationEnd.isNavigable())
			{
			
				UMLClass assocKlass = (UMLClass)associationEnd.getUMLElement();
				if(transformerUtils.isAssociationEndMany(associationEnd))
			{%>
<%if(transformerUtils.getClassIdGetterMthod(klass) != null) {%>			
	href = path+"/<%=klass.getName()%>/"+idStr + "/" + "<%=associationEnd.getRoleName()%>";
	link = new ResourceLink("<%=associationEnd.getRoleName()%>", "application/xml", href);
	links.add(link);
<%}%>
			<%}else{%>
	
<%if(transformerUtils.getClassIdGetterMthod(assocKlass) != null) {%>	

	<%if(transformerUtils.isISO21090Enabled())
	{

		UMLAttribute attrb = transformerUtils.getClassIdAttr(klass);
		String idMethod = transformerUtils.getClassIdGetterMthod(assocKlass);
		if(attrb != null)
		{
		String attrType = transformerUtils.isoDatatypeCompleteMap.get(attrb.getDatatype().getName());

		if(attrType == null)
			attrType = transformerUtils.javaPrimitiveDatatypeMap.get(attrb.getDatatype().getName());


		if(attrType.equals("Ii"))
		{
		%>
			idStr = <%=idMethod%>().getExtension();
		<%
		}
		else
		{
		%>
			idStr = <%=transformerUtils.getGetterMethodName(associationEnd)%>().<%=transformerUtils.getClassIdGetterMthod(assocKlass)%>().toString();		
		<%
		}
		}
	}
	else
	{
	%>
	idStr = <%=transformerUtils.getGetterMethodName(associationEnd)%>().<%=transformerUtils.getClassIdGetterMthod(assocKlass)%>().toString();		
	<%
	}
	%>
	href = path+"/<%=assocKlass.getName()%>/"+idStr;
	link = new ResourceLink("<%=associationEnd.getRoleName()%>", "application/xml", href);
	links.add(link);
	
<%}%>
	<%
			}
			}
		}
	}
	%>			
	return links;
}
}