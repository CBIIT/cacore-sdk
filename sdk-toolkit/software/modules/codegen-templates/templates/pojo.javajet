<%@ jet package="gov.nih.nci.codegen.transformer.jet" 
        class="POJOTransformer"
        skeleton="ClassTransformerBase.skeleton" %>
package <%=transformerUtils.getFullPackageName(klass)%>;

<%=transformerUtils.getImports(klass)%>

<% 	boolean jaxbEnabled = transformerUtils.isJaxbEnabled();%>
<%=transformerUtils.getJavaDocs(klass)%>
<%=transformerUtils.getHibernateValidatorConstraints(klass)%>
<% if (jaxbEnabled) { %>
<%=transformerUtils.getJaxbXmlAccessorTypeAnnotation()%>
<%=transformerUtils.getJaxbXmlSeeAlsoAnnotation(klass)%>
<%=transformerUtils.getJaxbXmlTypeAnnotation(klass)%>
<%=transformerUtils.getJaxbXmlRootElementAnnotation(klass)%>
<%} %>
public<%=transformerUtils.isAbstract(klass)? " abstract" : "" %> class <%=klass.getName()%> <%=transformerUtils.getSuperClassString(klass)%> implements Serializable<% if (jaxbEnabled) { %>, CycleRecoverable<%} %><%=transformerUtils.getInterfaceString(klass)%>
{
	/**
	* An attribute to allow serialization of the domain objects
	*/
	private static final long serialVersionUID = 1234567890L;

	<%for(UMLAttribute attr:klass.getAttributes()){%>
	<%=transformerUtils.getJavaDocs(attr)%>
	<%=transformerUtils.getHibernateValidatorConstraints(klass,attr)%>
	<%=attr.getVisibility().getName()%> <%=transformerUtils.getDataType(attr)%> <%=attr.getName()%>;
	<%=transformerUtils.getGetterMethodJavaDocs(attr)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlAttributeAnnotation(klass, attr)%><%}%>
	public <%=transformerUtils.getDataType(attr)%> <%=transformerUtils.getGetterMethodName(attr)%>(){
		return <%=attr.getName()%>;
	}

	<%=transformerUtils.getSetterMethodJavaDocs(attr)%>
	public void <%=transformerUtils.getSetterMethodName(attr)%>(<%=transformerUtils.getDataType(attr)%> <%=attr.getName()%>){
		this.<%=attr.getName()%> = <%=attr.getName()%>;
	}
	<%}
	for(UMLAssociation assoc:klass.getAssociations()){
		List<UMLAssociationEnd> assocEnds = assoc.getAssociationEnds();
		UMLAssociationEnd thisEnd = transformerUtils.getThisEnd(klass,assocEnds);
		UMLAssociationEnd otherEnd = transformerUtils.getOtherEnd(klass,assocEnds);
	
		if(otherEnd.isNavigable())
		{
			UMLClass assocKlass = (UMLClass)otherEnd.getUMLElement();
			if(transformerUtils.isAssociationEndMany(otherEnd))
			{%>
	<%=transformerUtils.getJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbCollectionAnnotations(klass,assocKlass,otherEnd.getRoleName())%><%} %>
	private Collection<<%=assocKlass.getName()%>> <%=otherEnd.getRoleName()%>;
	<%=transformerUtils.getGetterMethodJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlTransientAnnotation()%><%} %>
	public Collection<<%=assocKlass.getName()%>> <%=transformerUtils.getGetterMethodName(otherEnd)%>(){
		return <%=otherEnd.getRoleName()%>;
	}

	<%=transformerUtils.getSetterMethodJavaDocs(klass, assoc)%>
	public void <%=transformerUtils.getSetterMethodName(otherEnd)%>(Collection<<%=assocKlass.getName()%>> <%=otherEnd.getRoleName()%>){
		this.<%=otherEnd.getRoleName()%> = <%=otherEnd.getRoleName()%>;
	}
		<%}else{%>
	<%=transformerUtils.getJavaDocs(klass, assoc)%>	
<% if (jaxbEnabled) { %>
	@XmlElement(name="<%=otherEnd.getRoleName()%>", 
				type=<%=assocKlass.getName()%>.class,
				namespace="<%=transformerUtils.getNamespaceUriPrefix() +transformerUtils.getFullPackageName(assocKlass)%>")
	//@ XmlJavaTypeAdapter(JAXBDomainObjectAdapter.class)	
<%} %>
	private <%=assocKlass.getName()%> <%=otherEnd.getRoleName()%>;
	<%=transformerUtils.getGetterMethodJavaDocs(klass, assoc)%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbXmlTransientAnnotation()%><%} %>
	public <%=assocKlass.getName()%> <%=transformerUtils.getGetterMethodName(otherEnd)%>(){
		return <%=otherEnd.getRoleName()%>;
	}
	<%=transformerUtils.getSetterMethodJavaDocs(klass, assoc)%>
	public void <%=transformerUtils.getSetterMethodName(otherEnd)%>(<%=assocKlass.getName()%> <%=otherEnd.getRoleName()%>){
		this.<%=otherEnd.getRoleName()%> = <%=otherEnd.getRoleName()%>;
	}
			<%}
		}
	}

	String idGetter = transformerUtils.getClassIdGetterMthod(klass); 
	if(idGetter!=null){%>
	/**
	* Compares <code>obj</code> to itself and returns true if they both are same
	*
	* @param obj
	**/
	public boolean equals(Object obj)
	{
		if(obj instanceof <%=klass.getName() %>) 
		{
			<%=klass.getName() %> c =(<%=klass.getName()%>)obj; 			 
			if(<%=idGetter%>() != null && <%=idGetter%>().equals(c.<%=idGetter%>()))
				return true;
		}
		return false;
	}
		
	/**
	* Returns hash code for the primary key of the object
	**/
	public int hashCode()
	{
		if(<%=idGetter%>() != null)
			return <%=idGetter%>().hashCode();
		return 0;
	}
	<%}%>
<% if (jaxbEnabled) { %><%=transformerUtils.getJaxbOnCycleDetectedMethod()%><%} %>
	
}