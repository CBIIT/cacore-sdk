CREATE TABLE ALBUM ( ID NUMBER(8) NOT NULL, TITLE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ADDRESS ( ID NUMBER(8) NOT NULL, ZIP VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ALBUM_SONG ( ALBUM_ID NUMBER(8) NOT NULL, SONG_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ALL_DATA_TYPE ( ID NUMBER(8) NOT NULL, INT_VALUE NUMBER(8), STRING_VALUE VARCHAR2(52 BYTE), DOUBLE_VALUE FLOAT(126), FLOAT_VALUE NUMBER(8,2), DATE_VALUE DATE, BOOLEAN_VALUE NUMBER(1), BLOB_VALUE BLOB,CLOB_VALUE CLOB, CHARACTER_VALUE CHAR(1 BYTE), LONG_VALUE NUMBER(38), DOUBLE_PRIMITIVE_VALUE FLOAT(126), INT_PRIMITIVE_VALUE NUMBER(8), DATE_PRIMITIVE_VALUE DATE, STRING_PRIMITIVE_VALUE VARCHAR2(50 BYTE), FLOAT_PRIMITIVE_VALUE NUMBER(8,2), BOOLEAN_PRIMITIVE_VALUE NUMBER(22,1), CHARACTER_PRIMITIVE_VALUE CHAR(1 BYTE), LONG_PRIMITIVE_VALUE NUMBER(38) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ALL_DATA_TYPE_STRING_COLL ( ALL_DATA_TYPE_ID NUMBER(8) NOT NULL, STRING_VALUE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ALL_VALIDATION_TYPE ( ID NUMBER(8) NOT NULL, EMAIL VARCHAR2(50 BYTE), FUTURE DATE, LENGTH VARCHAR2(50 BYTE), MAX_NUMERIC NUMBER, PAST DATE, MAX_STRING VARCHAR2(50 BYTE), MIN_NUMERIC NUMBER, MIN_STRING VARCHAR2(50 BYTE), NOT_EMPTY VARCHAR2(50 BYTE), NOT_NULL VARCHAR2(50 BYTE), RANGE_STRING VARCHAR2(50 BYTE), RANGE_NUMERIC NUMBER, PATTERN VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ASSISTANT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), PROFESSOR_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ASSISTANT_PROFESSOR ( PROFESSOR_ID NUMBER(8) NOT NULL, JOINING_YEAR NUMBER(4) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ASSOCIATE_PROFESSOR ( PROFESSOR_ID NUMBER(8) NOT NULL, YEARS_SERVED NUMBER(4) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE AUTHOR ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE AUTHOR_BOOK ( AUTHOR_ID NUMBER(8) NOT NULL, BOOK_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BAG ( ID NUMBER(8) NOT NULL, STYLE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BAG_HANDLE ( BAG_ID NUMBER(8) NOT NULL, HANDLE_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BANK ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BOOK ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BRIDE ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BRIDE_FATHER_IN_LAW ( BRIDE_ID NUMBER(8) NOT NULL, IN_LAW_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BRIDE_MOTHER_IN_LAW ( BRIDE_D NUMBER(8) NOT NULL, IN_LAW_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE BUTTON ( ID NUMBER(8) NOT NULL, HOLES NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CALCULATOR ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(100 BYTE), BRAND VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CARD ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), SUIT_ID NUMBER(8), IMAGE CLOB ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CASH ( PAYMENT_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHAIN ( ID NUMBER(8) NOT NULL, METAL VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHAIN_PENDANT ( CHAIN_ID NUMBER(8) NOT NULL, PENDANT_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHARACTER_KEY ( ID CHAR(1 BYTE) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHARACTER_PRIMITIVE_KEY ( ID CHAR(1 BYTE) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHEF ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), RESTAURANT_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CHILD ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), FATHER_ID NUMBER(8), MOTHER_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE COMPUTER ( ID NUMBER(8) NOT NULL, TYPE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CREDIT ( PAYMENT_ID NUMBER(8) NOT NULL, CARD_NUMBER VARCHAR2(50 BYTE), BANK_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CRT_MONITOR ( MONITOR_ID NUMBER(8) NOT NULL, REFRESH_RATE NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE MAMMAL ( ID NUMBER(8) NOT NULL, HAIR_COLOR VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE MONITOR ( DISPLAY_ID NUMBER(8) NOT NULL, BRAND VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE NO_ID_KEY ( MY_KEY NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ORDERLINE ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE ORGANIZATION ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(100 BYTE), NAME VARCHAR2(50 BYTE), AGENCY_BUDGET NUMBER(8), CEO VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PARENT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PASSANGER ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PAYMENT ( ID NUMBER(8) NOT NULL, AMOUNT NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PENDANT ( ID NUMBER(8) NOT NULL, SHAPE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PERSON ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), ADDRESS_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PRIVATE_TEACHER ( TEACHER_ID NUMBER(8) NOT NULL, YEARS_EXPERIENCE NUMBER(4) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PRODUCT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), ORDERLINE_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PROFESSOR ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PROJECT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE PUPIL ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), TEACHER_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE RESTAURANT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SALTWATER_FISH_TANK ( ID NUMBER(8) NOT NULL, SHAPE VARCHAR2(50 BYTE), NUM_GALLONS NUMBER(8), PROTEIN_SKIMMER_MODEL VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SALTWATER_FISH_TANK_SUBSTRATE ( SALTWATER_FISH_TANK_ID NUMBER(8) NOT NULL, SUBSTRATE_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SHIRT ( ID NUMBER(8) NOT NULL, STYLE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SHIRT_BUTTON ( SHIRT_ID NUMBER(8) NOT NULL, BUTTON_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SHOES ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(50 BYTE), COLOR VARCHAR2(50 BYTE), SPORTS_TYPE VARCHAR2(50 BYTE), DESIGNER_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SONG ( ID NUMBER(8) NOT NULL, TITLE VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE STRING_KEY ( ID VARCHAR2(50 BYTE) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE STRING_PRIMITIVE_KEY ( ID VARCHAR2(50 BYTE) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE STUDENT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SUBSTRATE ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE SUIT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), DECK_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE TANK_ACCESSORY ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE TANK_TANK_ACCESSORY ( TANK_ID NUMBER(8) NOT NULL, TANK_ACCESSORY_ID NUMBER(8) NOT NULL, TANK_DISCRIMINATOR VARCHAR2(50 BYTE) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE TEACHER ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE TENURED_PROFESSOR ( PROFESSOR_ID NUMBER(8) NOT NULL, TENURED_YEAR NUMBER(4) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE UTENSIL ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE WHEEL ( ID NUMBER(8) NOT NULL, RADIUS NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE CURRENCY ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(100 BYTE), COUNTRY VARCHAR2(50 BYTE), VALUE NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DECK ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DESIGNER ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DESSERT ( ID NUMBER(8) NOT NULL, TOPPING VARCHAR2(50 BYTE), FILLING VARCHAR2(50 BYTE), DISCRIMINATOR VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DESSERT_UTENSIL ( DESSERT_ID NUMBER(8) NOT NULL, UTENSIL_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DISPLAY ( ID NUMBER(8) NOT NULL, WIDTH NUMBER(8), HEIGHT NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DOG ( ID NUMBER(8) NOT NULL, BREED VARCHAR2(50 BYTE), GENDER VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DOUBLE_KEY ( ID NUMBER(8,2) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE UNDERGRADUATE_STUDENT ( STUDENT_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE DOUBLE_PRIMITIVE_KEY ( ID NUMBER(8,2) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE ELEMENT ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE), PARENT_ELEMENT_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE EMPLOYEE ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE EMPLOYEE_PROJECT ( EMPLOYEE_ID NUMBER(8) NOT NULL, PROJECT_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FISH ( ID NUMBER(8) NOT NULL, GENERA VARCHAR2(50 BYTE), PRIMARY_COLOR VARCHAR2(50 BYTE), FIN_SIZE NUMBER(8), DISCRIMINATOR VARCHAR2(50 BYTE), TANK_ID NUMBER(8), TANK_DISCRIMINATOR VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FLIGHT ( ID NUMBER(8) NOT NULL, DESTINATION VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FLIGHT_PASSANGER ( FLIGHT_ID NUMBER(8) NOT NULL, PASSANGER_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FLOAT_KEY ( ID NUMBER(8,2) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FLOAT_PRIMITIVE_KEY ( ID NUMBER(8,2) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE FRESHWATER_FISH_TANK ( ID NUMBER(8) NOT NULL, SHAPE VARCHAR2(50 BYTE), NUM_GALLONS NUMBER(8), FILTER_MODEL VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE GOVERMENT ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(100 BYTE), COUNTRY VARCHAR2(50 BYTE), PRIME_MINISTER VARCHAR2(50 BYTE), PRESIDENT VARCHAR2(50 BYTE), DEMOCRATIC_DISCRIMINATOR VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE GRADUATE_STUDENT ( STUDENT_ID NUMBER(8) NOT NULL, PROJECT_NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE GRAPHIC_CALCULATOR ( CALCULATOR_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HAND ( ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HANDLE ( ID NUMBER(8) NOT NULL, COLOR VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HAND_CARD ( HAND_ID NUMBER(8) NOT NULL, CARD_ID NUMBER(8) NOT NULL ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HARD_DRIVE ( ID NUMBER(8) NOT NULL, DRIVE_SIZE NUMBER(8), COMPUTER_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HIBERNATE_UNIQUE_KEY ( NEXT_HI NUMBER(10) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HI_VALUE ( NEXT_VALUE NUMBER ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HL7_DATA_TYPE ( ID NUMBER(8) NOT NULL, ROOT VARCHAR2(50 BYTE), EXTENSION VARCHAR2(50 BYTE), XML VARCHAR2(512 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE HUMAN ( MAMMAL_ID NUMBER(8) NOT NULL, DIET VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE INTEGER_KEY ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE INTEGER_PRIMITIVE_KEY ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE IN_LAW ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE KEYCHAIN ( ID NUMBER(8) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE LATCH_KEY ( ID NUMBER(8) NOT NULL, TYPE VARCHAR2(50 BYTE), KEYCHAIN_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


CREATE TABLE LCD_MONITOR ( MONITOR_ID NUMBER(8) NOT NULL, DPI_SUPPORTED NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE LONG_KEY ( ID NUMBER(38) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE LONG_PRIMITIVE_KEY ( ID NUMBER(38) NOT NULL, NAME VARCHAR2(50 BYTE) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

CREATE TABLE LUGGAGE ( ID NUMBER(8) NOT NULL, DISCRIMINATOR VARCHAR2(100 BYTE), CAPACITY NUMBER(8), KEY_CODE NUMBER(8), EXPANDABLE VARCHAR2(1 BYTE), WHEEL_ID NUMBER(8) ) LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/

INSERT INTO ADDRESS ( ID, ZIP ) VALUES ( 
1, 'Zip1')
/
INSERT INTO ADDRESS ( ID, ZIP ) VALUES ( 
2, 'Zip2')
/
INSERT INTO ADDRESS ( ID, ZIP ) VALUES ( 
3, 'Zip3')
/
INSERT INTO ADDRESS ( ID, ZIP ) VALUES ( 
4, 'Zip4')
/
INSERT INTO ADDRESS ( ID, ZIP ) VALUES ( 
5, 'Zip5')
/
commit
/

INSERT INTO ALBUM ( ID, TITLE ) VALUES ( 
1, 'Venetian Oboe Concertos')
/
INSERT INTO ALBUM ( ID, TITLE ) VALUES ( 
2, 'The Cello')
/
commit
/

INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 1)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 2)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 3)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 4)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 5)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (1, 6)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (2, 7)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (2, 8)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (2, 9)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (2, 10)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (2, 11)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (3, 14)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (4, 15)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (6, 17)
/
INSERT INTO ALBUM_SONG ( ALBUM_ID, SONG_ID ) VALUES (7, 18)
/
commit
/

INSERT INTO ALL_DATA_TYPE ( ID, INT_VALUE, STRING_VALUE, DOUBLE_VALUE, FLOAT_VALUE, DATE_VALUE,
BOOLEAN_VALUE, CLOB_VALUE, CHARACTER_VALUE, LONG_VALUE, DOUBLE_PRIMITIVE_VALUE, INT_PRIMITIVE_VALUE,
DATE_PRIMITIVE_VALUE, STRING_PRIMITIVE_VALUE, FLOAT_PRIMITIVE_VALUE, BOOLEAN_PRIMITIVE_VALUE,
CHARACTER_PRIMITIVE_VALUE, LONG_PRIMITIVE_VALUE ) VALUES ( 
1, -1, ',./-+/*&&()||==''"%"!\', -1.1, 1.1,  TO_Date( '11/11/2011 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 1, '0123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340112340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012'
, 'a', 1000001, 10001, 11,  TO_Date( '10/01/2007 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 'abc', 10.01, 1, 'a', 1000001)
/
INSERT INTO ALL_DATA_TYPE ( ID, INT_VALUE, STRING_VALUE, DOUBLE_VALUE, FLOAT_VALUE, DATE_VALUE,
BOOLEAN_VALUE, CLOB_VALUE, CHARACTER_VALUE, LONG_VALUE, DOUBLE_PRIMITIVE_VALUE, INT_PRIMITIVE_VALUE,
DATE_PRIMITIVE_VALUE, STRING_PRIMITIVE_VALUE, FLOAT_PRIMITIVE_VALUE, BOOLEAN_PRIMITIVE_VALUE,
CHARACTER_PRIMITIVE_VALUE, LONG_PRIMITIVE_VALUE ) VALUES ( 
2, 0, '''Steve''s Test''', 0, 222.22,  TO_Date( '12/12/2012 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 0, '0123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340112340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012'
, 'b', 1000002, 10002, 12,  TO_Date( '10/02/2007 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 'def', 10.02, 0, 'b', 1000002)
/
INSERT INTO ALL_DATA_TYPE ( ID, INT_VALUE, STRING_VALUE, DOUBLE_VALUE, FLOAT_VALUE, DATE_VALUE,
BOOLEAN_VALUE, CLOB_VALUE, CHARACTER_VALUE, LONG_VALUE, DOUBLE_PRIMITIVE_VALUE, INT_PRIMITIVE_VALUE,
DATE_PRIMITIVE_VALUE, STRING_PRIMITIVE_VALUE, FLOAT_PRIMITIVE_VALUE, BOOLEAN_PRIMITIVE_VALUE,
CHARACTER_PRIMITIVE_VALUE, LONG_PRIMITIVE_VALUE ) VALUES ( 
3, 1, '~!@#$%^&*()_+-={}|:"<>?[]\
/'',./-+/*&&()||==''"%"!\''', 1.1, 333.33,  TO_Date( '03/03/2003 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 1, '0123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340112340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012'
, 'c', 1000003, 10003, 13,  TO_Date( '10/03/2007 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 'ghi', 10.03, 1, 'c', 1000003)
/
INSERT INTO ALL_DATA_TYPE ( ID, INT_VALUE, STRING_VALUE, DOUBLE_VALUE, FLOAT_VALUE, DATE_VALUE,
BOOLEAN_VALUE, CLOB_VALUE, CHARACTER_VALUE, LONG_VALUE, DOUBLE_PRIMITIVE_VALUE, INT_PRIMITIVE_VALUE,
DATE_PRIMITIVE_VALUE, STRING_PRIMITIVE_VALUE, FLOAT_PRIMITIVE_VALUE, BOOLEAN_PRIMITIVE_VALUE,
CHARACTER_PRIMITIVE_VALUE, LONG_PRIMITIVE_VALUE ) VALUES ( 
4, 10000, '01234567890123456789012345678901234567890123456789', 10000, 444.44,  TO_Date( '04/04/2004 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 0, '0123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340112340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012'
, 'd', 1000004, 10004, 14,  TO_Date( '10/04/2007 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 'jkl', 10.04, 0, 'd', 1000004)
/
INSERT INTO ALL_DATA_TYPE ( ID, INT_VALUE, STRING_VALUE, DOUBLE_VALUE, FLOAT_VALUE, DATE_VALUE,
BOOLEAN_VALUE, CLOB_VALUE, CHARACTER_VALUE, LONG_VALUE, DOUBLE_PRIMITIVE_VALUE, INT_PRIMITIVE_VALUE,
DATE_PRIMITIVE_VALUE, STRING_PRIMITIVE_VALUE, FLOAT_PRIMITIVE_VALUE, BOOLEAN_PRIMITIVE_VALUE,
CHARACTER_PRIMITIVE_VALUE, LONG_PRIMITIVE_VALUE ) VALUES ( 
5, 5, 'String_Value5', 555.55, 555.55,  TO_Date( '05/05/2005 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 1, '0123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340112340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012340123456789012'
, 'e', 1000005, 10005, 15,  TO_Date( '10/05/2007 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, 'mno', 10.05, 1, 'e', 1000005)
/
commit
/
 
INSERT INTO ALL_DATA_TYPE_STRING_COLL ( ALL_DATA_TYPE_ID, STRING_VALUE ) VALUES ( 
1, 'String_Collection 1')
/
INSERT INTO ALL_DATA_TYPE_STRING_COLL ( ALL_DATA_TYPE_ID, STRING_VALUE ) VALUES ( 
1, 'String_Collection 2')
/
INSERT INTO ALL_DATA_TYPE_STRING_COLL ( ALL_DATA_TYPE_ID, STRING_VALUE ) VALUES ( 
1, 'String_Collection 3')
/
commit
/
 
INSERT INTO ALL_VALIDATION_TYPE ( ID, EMAIL, FUTURE, LENGTH, MAX_NUMERIC, PAST, MAX_STRING,
MIN_NUMERIC, MIN_STRING, NOT_EMPTY, NOT_NULL, RANGE_STRING, RANGE_NUMERIC,
PATTERN ) VALUES ( 
1, 'name@mail.nih.gov',  TO_Date( '05/15/2008 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')
, '123', 999, NULL, '999', 1, '1', 'abc', 'abc', '3', 3, 'cat')
/
 
commit
/
 
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
1, 'Assistant_Name1', 1)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
2, 'Assistant_Name2', 2)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
3, 'Assistant_Name3', 3)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
4, 'Assistant_Name4', 6)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
5, 'Assistant_Name5', 7)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
6, 'Assistant_Name6', 7)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
7, 'Assistant_Name7', 11)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
8, 'Assistant_Name8', 12)
/
INSERT INTO ASSISTANT ( ID, NAME, PROFESSOR_ID ) VALUES ( 
9, 'Assistant_Name9', 12)
/
commit
/
 
INSERT INTO ASSISTANT_PROFESSOR ( PROFESSOR_ID, JOINING_YEAR ) VALUES ( 
11, 11)
/
INSERT INTO ASSISTANT_PROFESSOR ( PROFESSOR_ID, JOINING_YEAR ) VALUES ( 
12, 12)
/
INSERT INTO ASSISTANT_PROFESSOR ( PROFESSOR_ID, JOINING_YEAR ) VALUES ( 
13, 13)
/
INSERT INTO ASSISTANT_PROFESSOR ( PROFESSOR_ID, JOINING_YEAR ) VALUES ( 
14, 14)
/
INSERT INTO ASSISTANT_PROFESSOR ( PROFESSOR_ID, JOINING_YEAR ) VALUES ( 
15, 15)
/
commit
/
 
INSERT INTO ASSOCIATE_PROFESSOR ( PROFESSOR_ID, YEARS_SERVED ) VALUES ( 
6, 6)
/
INSERT INTO ASSOCIATE_PROFESSOR ( PROFESSOR_ID, YEARS_SERVED ) VALUES ( 
7, 7)
/
INSERT INTO ASSOCIATE_PROFESSOR ( PROFESSOR_ID, YEARS_SERVED ) VALUES ( 
8, 8)
/
INSERT INTO ASSOCIATE_PROFESSOR ( PROFESSOR_ID, YEARS_SERVED ) VALUES ( 
9, 9)
/
INSERT INTO ASSOCIATE_PROFESSOR ( PROFESSOR_ID, YEARS_SERVED ) VALUES ( 
10, 10)
/
commit
/
 
INSERT INTO AUTHOR ( ID, NAME ) VALUES ( 
1, 'Author1')
/
INSERT INTO AUTHOR ( ID, NAME ) VALUES ( 
2, 'Author2')
/
INSERT INTO AUTHOR ( ID, NAME ) VALUES ( 
3, 'Author3')
/
INSERT INTO AUTHOR ( ID, NAME ) VALUES ( 
4, 'Author4')
/
INSERT INTO AUTHOR ( ID, NAME ) VALUES ( 
5, 'Author5')
/
commit
/
 
INSERT INTO AUTHOR_BOOK ( AUTHOR_ID, BOOK_ID ) VALUES ( 
1, 1)
/
INSERT INTO AUTHOR_BOOK ( AUTHOR_ID, BOOK_ID ) VALUES ( 
2, 2)
/
INSERT INTO AUTHOR_BOOK ( AUTHOR_ID, BOOK_ID ) VALUES ( 
3, 3)
/
commit
/
 
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
1, 'Baguettes')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
2, 'Barrel')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
3, 'Beach')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
4, 'Bowler')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
5, 'Bucket')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
6, 'Duffel')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
7, 'Evening')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
8, 'Flap')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
9, 'Hobos')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
10, 'Pochettes')
/
INSERT INTO BAG ( ID, STYLE ) VALUES ( 
11, 'Satchel')
/
commit
/
 
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
1, 1)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
2, 2)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
3, 3)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
4, 4)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
5, 5)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
6, 6)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
7, 7)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
8, 8)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
9, 9)
/
INSERT INTO BAG_HANDLE ( BAG_ID, HANDLE_ID ) VALUES ( 
10, 10)
/
commit
/
 
INSERT INTO BANK ( ID, NAME ) VALUES ( 
1, 'Bank1')
/
INSERT INTO BANK ( ID, NAME ) VALUES ( 
2, 'Bank2')
/
INSERT INTO BANK ( ID, NAME ) VALUES ( 
3, 'Bank3')
/
INSERT INTO BANK ( ID, NAME ) VALUES ( 
4, 'Bank4')
/
commit
/
 
INSERT INTO BOOK ( ID, NAME ) VALUES ( 
1, 'Book1')
/
INSERT INTO BOOK ( ID, NAME ) VALUES ( 
2, 'Book2')
/
INSERT INTO BOOK ( ID, NAME ) VALUES ( 
3, 'Book3')
/
INSERT INTO BOOK ( ID, NAME ) VALUES ( 
4, 'Book4')
/
INSERT INTO BOOK ( ID, NAME ) VALUES ( 
5, 'Book5')
/
commit
/
 
INSERT INTO BRIDE ( ID, NAME ) VALUES ( 
1, 'Bride 1')
/
INSERT INTO BRIDE ( ID, NAME ) VALUES ( 
2, 'Bride 2')
/
INSERT INTO BRIDE ( ID, NAME ) VALUES ( 
3, 'Bride 3')
/
INSERT INTO BRIDE ( ID, NAME ) VALUES ( 
4, 'Bride 4')
/
commit
/
 
INSERT INTO BRIDE_FATHER_IN_LAW ( BRIDE_ID, IN_LAW_ID ) VALUES ( 
1, 1)
/
INSERT INTO BRIDE_FATHER_IN_LAW ( BRIDE_ID, IN_LAW_ID ) VALUES ( 
2, 3)
/
commit
/
 
INSERT INTO BRIDE_MOTHER_IN_LAW ( BRIDE_D, IN_LAW_ID ) VALUES ( 
1, 2)
/
INSERT INTO BRIDE_MOTHER_IN_LAW ( BRIDE_D, IN_LAW_ID ) VALUES ( 
3, 5)
/
commit
/
 
INSERT INTO BUTTON ( ID, HOLES ) VALUES ( 
1, 2)
/
INSERT INTO BUTTON ( ID, HOLES ) VALUES ( 
2, 4)
/
commit
/
 
INSERT INTO CALCULATOR ( ID, DISCRIMINATOR, BRAND ) VALUES ( 
1, 'financial', 'NCR')
/
INSERT INTO CALCULATOR ( ID, DISCRIMINATOR, BRAND ) VALUES ( 
2, 'scientific', 'Texas Instruments')
/
INSERT INTO CALCULATOR ( ID, DISCRIMINATOR, BRAND ) VALUES ( 
3, 'graphics', 'HP')
/
commit
/
 
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
4, 'Four', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
53, 'Joker', NULL, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
1, 'Ace', 1, 'My Ace')
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
2, 'Two', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
3, 'Three', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
5, 'Five', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
6, 'Six', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
7, 'Seven', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
8, 'Eight', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
9, 'Nine', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
10, 'Ten', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
11, 'Jack', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
12, 'Queen', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
13, 'King', 1, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
14, 'Ace', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
15, 'Two', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
16, 'Three', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
17, 'Four', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
18, 'Five', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
19, 'Six', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
20, 'Seven', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
21, 'Eight', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
22, 'Nine', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
23, 'Ten', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
24, 'Jack', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
25, 'Queen', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
26, 'King', 2, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
27, 'Ace', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
28, 'Two', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
29, 'Three', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
30, 'Four', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
31, 'Five', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
32, 'Six', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
33, 'Seven', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
34, 'Eight', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
35, 'Nine', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
36, 'Ten', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
37, 'Jack', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
38, 'Queen', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
39, 'King', 3, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
40, 'Ace', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
41, 'Two', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
42, 'Three', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
43, 'Four', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
44, 'Five', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
45, 'Six', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
46, 'Seven', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
47, 'Eight', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
48, 'Nine', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
49, 'Ten', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
50, 'Jack', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
51, 'Queen', 4, NULL)
/
INSERT INTO CARD ( ID, NAME, SUIT_ID, IMAGE ) VALUES ( 
52, 'King', 4, NULL)
/
commit
/
 
INSERT INTO CASH ( PAYMENT_ID ) VALUES ( 
1)
/
INSERT INTO CASH ( PAYMENT_ID ) VALUES ( 
2)
/
commit
/
 
INSERT INTO CHAIN ( ID, METAL ) VALUES ( 
1, 'Gold')
/
INSERT INTO CHAIN ( ID, METAL ) VALUES ( 
2, 'Silver')
/
INSERT INTO CHAIN ( ID, METAL ) VALUES ( 
3, 'Bronze')
/
commit
/
 
INSERT INTO CHAIN_PENDANT ( CHAIN_ID, PENDANT_ID ) VALUES ( 
1, 1)
/
INSERT INTO CHAIN_PENDANT ( CHAIN_ID, PENDANT_ID ) VALUES ( 
2, 2)
/
INSERT INTO CHAIN_PENDANT ( CHAIN_ID, PENDANT_ID ) VALUES ( 
3, 3)
/
commit
/
 
INSERT INTO CHARACTER_KEY ( ID, NAME ) VALUES ( 
'a', 'CharacterKey_Name a')
/
INSERT INTO CHARACTER_KEY ( ID, NAME ) VALUES ( 
'B', 'CharacterKey_Name B')
/
INSERT INTO CHARACTER_KEY ( ID, NAME ) VALUES ( 
'/', 'CharacterKey _Name/')
/
INSERT INTO CHARACTER_KEY ( ID, NAME ) VALUES ( 
'9', 'CharacterKey_Name 9')
/
commit
/
 
INSERT INTO CHARACTER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'd', 'Character_Primitive_Key_Name d')
/
INSERT INTO CHARACTER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'6', 'Character_Primitive_Key_Name 6')
/
INSERT INTO CHARACTER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'[', 'Character_Primitive_Key_Name [')
/
INSERT INTO CHARACTER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'L', 'Character_Primitive_Key_Name L')
/
commit
/
 
INSERT INTO CHEF ( ID, NAME, RESTAURANT_ID ) VALUES ( 
4, 'Chef4', NULL)
/
INSERT INTO CHEF ( ID, NAME, RESTAURANT_ID ) VALUES ( 
1, 'Chef1', 1)
/
INSERT INTO CHEF ( ID, NAME, RESTAURANT_ID ) VALUES ( 
2, 'Chef2', 2)
/
INSERT INTO CHEF ( ID, NAME, RESTAURANT_ID ) VALUES ( 
3, 'Chef3', 2)
/
commit
/
 
INSERT INTO CHILD ( ID, NAME, FATHER_ID, MOTHER_ID ) VALUES ( 
5, 'Child_Name5', NULL, NULL)
/
INSERT INTO CHILD ( ID, NAME, FATHER_ID, MOTHER_ID ) VALUES ( 
1, 'Child_Name1', 1, 2)
/
INSERT INTO CHILD ( ID, NAME, FATHER_ID, MOTHER_ID ) VALUES ( 
2, 'Child_Name2', 3, 4)
/
INSERT INTO CHILD ( ID, NAME, FATHER_ID, MOTHER_ID ) VALUES ( 
3, 'Child_Name3', 5, NULL)
/
INSERT INTO CHILD ( ID, NAME, FATHER_ID, MOTHER_ID ) VALUES ( 
4, 'Child_Name4', NULL, 6)
/
commit
/
 
INSERT INTO COMPUTER ( ID, TYPE ) VALUES ( 
1, 'Computer_Type1')
/
INSERT INTO COMPUTER ( ID, TYPE ) VALUES ( 
2, 'Computer_Type2')
/
INSERT INTO COMPUTER ( ID, TYPE ) VALUES ( 
3, 'Computer_Type3')
/
INSERT INTO COMPUTER ( ID, TYPE ) VALUES ( 
4, 'Computer_Type4')
/
INSERT INTO COMPUTER ( ID, TYPE ) VALUES ( 
5, 'Computer_Type5')
/
commit
/
 
INSERT INTO CREDIT ( PAYMENT_ID, CARD_NUMBER, BANK_ID ) VALUES ( 
3, '3', 3)
/
INSERT INTO CREDIT ( PAYMENT_ID, CARD_NUMBER, BANK_ID ) VALUES ( 
4, '4', 4)
/
commit
/
 
INSERT INTO CRT_MONITOR ( MONITOR_ID, REFRESH_RATE ) VALUES ( 
1, 45)
/
commit
/

INSERT INTO CURRENCY ( ID, DISCRIMINATOR, COUNTRY, VALUE ) VALUES ( 
1, 'Note', 'USA', 1)
/
INSERT INTO CURRENCY ( ID, DISCRIMINATOR, COUNTRY, VALUE ) VALUES ( 
2, 'Note', 'Germany', 2)
/
INSERT INTO CURRENCY ( ID, DISCRIMINATOR, COUNTRY, VALUE ) VALUES ( 
3, 'Note', 'Spain', 3)
/
commit
/
 
INSERT INTO DECK ( ID, NAME ) VALUES ( 
1, 'My Deck 1')
/
commit
/
 
INSERT INTO DESIGNER ( ID, NAME ) VALUES ( 
1, 'Gucci')
/
INSERT INTO DESIGNER ( ID, NAME ) VALUES ( 
2, 'Prada')
/
INSERT INTO DESIGNER ( ID, NAME ) VALUES ( 
3, 'Sergio Rossi')
/
commit
/
 
INSERT INTO DESSERT ( ID, TOPPING, FILLING, DISCRIMINATOR ) VALUES ( 
1, 'Peanuts', NULL, 'IceCream')
/
INSERT INTO DESSERT ( ID, TOPPING, FILLING, DISCRIMINATOR ) VALUES ( 
2, 'Sprinkles', NULL, 'IceCream')
/
INSERT INTO DESSERT ( ID, TOPPING, FILLING, DISCRIMINATOR ) VALUES ( 
3, NULL, 'Apples', 'Pie')
/
INSERT INTO DESSERT ( ID, TOPPING, FILLING, DISCRIMINATOR ) VALUES ( 
4, NULL, 'Cherries', 'Pie')
/
commit
/
 
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
1, 1)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
1, 3)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
2, 2)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
3, 1)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
3, 2)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
4, 2)
/
INSERT INTO DESSERT_UTENSIL ( DESSERT_ID, UTENSIL_ID ) VALUES ( 
4, 3)
/
commit
/
 
INSERT INTO DISPLAY ( ID, WIDTH, HEIGHT ) VALUES ( 
1, 1, 1)
/
INSERT INTO DISPLAY ( ID, WIDTH, HEIGHT ) VALUES ( 
2, 2, 2)
/
INSERT INTO DISPLAY ( ID, WIDTH, HEIGHT ) VALUES ( 
3, 3, 3)
/
INSERT INTO DISPLAY ( ID, WIDTH, HEIGHT ) VALUES ( 
4, 4, 4)
/
INSERT INTO DISPLAY ( ID, WIDTH, HEIGHT ) VALUES ( 
5, 5, 5)
/
commit
/
 
INSERT INTO DOG ( ID, BREED, GENDER ) VALUES ( 
1, 'Poodle', 'Male')
/
INSERT INTO DOG ( ID, BREED, GENDER ) VALUES ( 
2, 'Chihuahua', 'Female')
/
INSERT INTO DOG ( ID, BREED, GENDER ) VALUES ( 
3, 'St. Bernard', 'Male')
/
commit
/
 
INSERT INTO DOUBLE_KEY ( ID, NAME ) VALUES ( 
1.1, 'Double_Key_Name1.1')
/
INSERT INTO DOUBLE_KEY ( ID, NAME ) VALUES ( 
2.2, 'Double_Key_Name2.2')
/
INSERT INTO DOUBLE_KEY ( ID, NAME ) VALUES ( 
3.3, 'Double_Key_Name3.3')
/
INSERT INTO DOUBLE_KEY ( ID, NAME ) VALUES ( 
4.4, 'Double_Key_Name4.4')
/
INSERT INTO DOUBLE_KEY ( ID, NAME ) VALUES ( 
5.5, 'Double_Key_Name5.5')
/
commit
/
 
INSERT INTO DOUBLE_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
1.1, 'Double_Primitive_Key 1.1')
/
INSERT INTO DOUBLE_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
2.2, 'Double_Primitive_Key 2.2')
/
commit
/
 
INSERT INTO ELEMENT ( ID, NAME, PARENT_ELEMENT_ID ) VALUES ( 
3, 'Element', NULL)
/
INSERT INTO ELEMENT ( ID, NAME, PARENT_ELEMENT_ID ) VALUES ( 
4, 'Element', NULL)
/
INSERT INTO ELEMENT ( ID, NAME, PARENT_ELEMENT_ID ) VALUES ( 
1, 'Name1', NULL)
/
INSERT INTO ELEMENT ( ID, NAME, PARENT_ELEMENT_ID ) VALUES ( 
2, 'Name2', 1)
/
commit
/
 
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
1, 'Employee_Name1')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
2, 'Employee_Name2')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
3, 'Employee_Name3')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
4, 'Employee_Name4')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
5, 'Employee_Name5')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
6, 'Employee_Name6')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
7, 'Employee_Name7')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
8, 'Employee_Name8')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
9, 'Employee_Name9')
/
INSERT INTO EMPLOYEE ( ID, NAME ) VALUES ( 
10, 'Employee_Name10')
/
commit
/
 
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
1, 1)
/
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
2, 2)
/
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
3, 2)
/
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
4, 4)
/
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
4, 5)
/
INSERT INTO EMPLOYEE_PROJECT ( EMPLOYEE_ID, PROJECT_ID ) VALUES ( 
6, 5)
/
commit
/
 
INSERT INTO FISH ( ID, GENERA, PRIMARY_COLOR, FIN_SIZE, DISCRIMINATOR, TANK_ID,
TANK_DISCRIMINATOR ) VALUES ( 
1, 'Hemichromis', 'blue', NULL, 'DiscusFish', 1, 'FreshwaterFishTank')
/
INSERT INTO FISH ( ID, GENERA, PRIMARY_COLOR, FIN_SIZE, DISCRIMINATOR, TANK_ID,
TANK_DISCRIMINATOR ) VALUES ( 
2, 'Hemichromis', 'red', NULL, 'DiscusFish', 2, 'FreshwaterFishTank')
/
INSERT INTO FISH ( ID, GENERA, PRIMARY_COLOR, FIN_SIZE, DISCRIMINATOR, TANK_ID,
TANK_DISCRIMINATOR ) VALUES ( 
3, 'Pterophyllum', NULL, 3, 'AngelFish', 3, 'SaltwaterFishTank')
/
INSERT INTO FISH ( ID, GENERA, PRIMARY_COLOR, FIN_SIZE, DISCRIMINATOR, TANK_ID,
TANK_DISCRIMINATOR ) VALUES ( 
4, 'Pterophyllum', NULL, 5, 'AngelFish', 4, 'SaltwaterFishTank')
/
commit
/
 
INSERT INTO FLIGHT ( ID, DESTINATION ) VALUES ( 
1, 'Baltimore, MD')
/
INSERT INTO FLIGHT ( ID, DESTINATION ) VALUES ( 
2, 'San Francisco, CA')
/
INSERT INTO FLIGHT ( ID, DESTINATION ) VALUES ( 
3, 'Maui, HI')
/
commit
/
 
INSERT INTO FLIGHT_PASSANGER ( FLIGHT_ID, PASSANGER_ID ) VALUES ( 
1, 1)
/
INSERT INTO FLIGHT_PASSANGER ( FLIGHT_ID, PASSANGER_ID ) VALUES ( 
1, 2)
/
commit
/
 
INSERT INTO FLOAT_KEY ( ID, NAME ) VALUES ( 
1.1, 'Float_Key_Name1.1')
/
INSERT INTO FLOAT_KEY ( ID, NAME ) VALUES ( 
2.2, 'Float_Key_Name2.2')
/
INSERT INTO FLOAT_KEY ( ID, NAME ) VALUES ( 
3.3, 'Float_Key_Name3.3')
/
INSERT INTO FLOAT_KEY ( ID, NAME ) VALUES ( 
4.4, 'Float_Key_Name4.4')
/
INSERT INTO FLOAT_KEY ( ID, NAME ) VALUES ( 
5.5, 'Float_Key_Name5.5')
/
commit
/
 
INSERT INTO FLOAT_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
1.1, 'Float_Key_Name 1.1')
/
INSERT INTO FLOAT_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
2.2, 'Float_Key_Name 2.2')
/
INSERT INTO FLOAT_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
3.3, 'Float_Key_Name 3.3')
/
commit
/
 
INSERT INTO FRESHWATER_FISH_TANK ( ID, SHAPE, NUM_GALLONS,
FILTER_MODEL ) VALUES ( 
1, 'Rectangular', 10, '350B Penguin Bio-Wheel Filter')
/
INSERT INTO FRESHWATER_FISH_TANK ( ID, SHAPE, NUM_GALLONS,
FILTER_MODEL ) VALUES ( 
2, 'Hexagonal', 7, '200B Penguin Bio-Wheel Filter')
/
commit
/
 
INSERT INTO GOVERMENT ( ID, DISCRIMINATOR, COUNTRY, PRIME_MINISTER, PRESIDENT,
DEMOCRATIC_DISCRIMINATOR ) VALUES ( 
1, 'PresidentialGovt', 'USA', NULL, 'George W. Bush', NULL)
/
INSERT INTO GOVERMENT ( ID, DISCRIMINATOR, COUNTRY, PRIME_MINISTER, PRESIDENT,
DEMOCRATIC_DISCRIMINATOR ) VALUES ( 
2, 'ParliamantaryGovt', 'England', 'Tony Blair', NULL, NULL)
/
INSERT INTO GOVERMENT ( ID, DISCRIMINATOR, COUNTRY, PRIME_MINISTER, PRESIDENT,
DEMOCRATIC_DISCRIMINATOR ) VALUES ( 
3, 'CommunistGovt', 'Cuba', NULL, NULL, NULL)
/
commit
/
 
INSERT INTO GRADUATE_STUDENT ( STUDENT_ID, PROJECT_NAME ) VALUES ( 
6, 'Project_Name6')
/
INSERT INTO GRADUATE_STUDENT ( STUDENT_ID, PROJECT_NAME ) VALUES ( 
7, 'Project_Name7')
/
INSERT INTO GRADUATE_STUDENT ( STUDENT_ID, PROJECT_NAME ) VALUES ( 
8, 'Project_Name8')
/
INSERT INTO GRADUATE_STUDENT ( STUDENT_ID, PROJECT_NAME ) VALUES ( 
9, 'Project_Name9')
/
INSERT INTO GRADUATE_STUDENT ( STUDENT_ID, PROJECT_NAME ) VALUES ( 
10, 'Project_Name10')
/
commit
/
 
INSERT INTO GRAPHIC_CALCULATOR ( CALCULATOR_ID ) VALUES ( 
3)
/
commit
/
 
INSERT INTO HAND ( ID ) VALUES ( 
1)
/
INSERT INTO HAND ( ID ) VALUES ( 
2)
/
INSERT INTO HAND ( ID ) VALUES ( 
3)
/
INSERT INTO HAND ( ID ) VALUES ( 
4)
/
INSERT INTO HAND ( ID ) VALUES ( 
5)
/
commit
/
 
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
1, 1)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
1, 25)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
1, 52)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
2, 2)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
2, 3)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
2, 5)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
3, 6)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
3, 14)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
3, 15)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
4, 26)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
4, 27)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
4, 30)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
5, 39)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
5, 40)
/
INSERT INTO HAND_CARD ( HAND_ID, CARD_ID ) VALUES ( 
5, 41)
/
commit
/
 
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
1, 'Black')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
2, 'Brown')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
3, 'Blue')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
4, 'White')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
5, 'Red')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
6, 'Yellow')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
7, 'Green')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
8, 'Beige')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
9, 'Purple')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
10, 'Orange')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
11, 'Teal')
/
INSERT INTO HANDLE ( ID, COLOR ) VALUES ( 
12, 'Burgundy')
/
commit
/
 
INSERT INTO HARD_DRIVE ( ID, DRIVE_SIZE, COMPUTER_ID ) VALUES ( 
1, 1, 1)
/
INSERT INTO HARD_DRIVE ( ID, DRIVE_SIZE, COMPUTER_ID ) VALUES ( 
2, 2, 2)
/
INSERT INTO HARD_DRIVE ( ID, DRIVE_SIZE, COMPUTER_ID ) VALUES ( 
3, 3, 2)
/
commit
/
 
INSERT INTO HI_VALUE ( NEXT_VALUE ) VALUES ( 
101)
/
commit
/
 
INSERT INTO HIBERNATE_UNIQUE_KEY ( NEXT_HI ) VALUES ( 
545)
/
commit
/
 
INSERT INTO HL7_DATA_TYPE ( ID, ROOT, EXTENSION, XML ) VALUES ( 
1, 'My Root', 'My Ext', NULL)
/
INSERT INTO HL7_DATA_TYPE ( ID, ROOT, EXTENSION, XML ) VALUES ( 
2, 'My Root 2', 'My Ext 2', NULL)
/
commit
/
 
INSERT INTO HUMAN ( MAMMAL_ID, DIET ) VALUES ( 
1, 'DIET1')
/
INSERT INTO HUMAN ( MAMMAL_ID, DIET ) VALUES ( 
2, 'DIET2')
/
INSERT INTO HUMAN ( MAMMAL_ID, DIET ) VALUES ( 
3, 'DIET3')
/
INSERT INTO HUMAN ( MAMMAL_ID, DIET ) VALUES ( 
4, 'DIET4')
/
commit
/
 
INSERT INTO IN_LAW ( ID, NAME ) VALUES ( 
1, ' Father-in-Law Bride 1')
/
INSERT INTO IN_LAW ( ID, NAME ) VALUES ( 
2, 'Mother-in-Law Bride 1')
/
INSERT INTO IN_LAW ( ID, NAME ) VALUES ( 
3, 'Father-in-Law Bride 2')
/
INSERT INTO IN_LAW ( ID, NAME ) VALUES ( 
5, 'Mother-in-Law Bride 3')
/
commit
/
 
INSERT INTO INTEGER_KEY ( ID, NAME ) VALUES ( 
1, 'Integer_Key_Name1')
/
INSERT INTO INTEGER_KEY ( ID, NAME ) VALUES ( 
2, 'Integer_Key_Name2')
/
INSERT INTO INTEGER_KEY ( ID, NAME ) VALUES ( 
3, 'Integer_Key_Name3')
/
INSERT INTO INTEGER_KEY ( ID, NAME ) VALUES ( 
4, 'Integer_Key_Name4')
/
INSERT INTO INTEGER_KEY ( ID, NAME ) VALUES ( 
5, 'Integer_Key_Name5')
/
commit
/
 
INSERT INTO INTEGER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
1, 'Integer_Primitive_Key_Name 1')
/
INSERT INTO INTEGER_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
2, 'Integer_Primitive_Key_Name 2')
/
commit
/
 
INSERT INTO KEYCHAIN ( ID, NAME ) VALUES ( 
1, 'Keychain_Name1')
/
INSERT INTO KEYCHAIN ( ID, NAME ) VALUES ( 
2, 'Keychain_Name2')
/
INSERT INTO KEYCHAIN ( ID, NAME ) VALUES ( 
3, 'Keychain_Name3')
/
INSERT INTO KEYCHAIN ( ID, NAME ) VALUES ( 
4, 'Keychain_Name4')
/
INSERT INTO KEYCHAIN ( ID, NAME ) VALUES ( 
5, 'Keychain_Name5')
/
commit
/
 
INSERT INTO LATCH_KEY ( ID, TYPE, KEYCHAIN_ID ) VALUES ( 
1, 'Key_Type1', 1)
/
INSERT INTO LATCH_KEY ( ID, TYPE, KEYCHAIN_ID ) VALUES ( 
2, 'Key_Type2', 2)
/
INSERT INTO LATCH_KEY ( ID, TYPE, KEYCHAIN_ID ) VALUES ( 
3, 'Key_Type3', 2)
/
commit
/
 
INSERT INTO LCD_MONITOR ( MONITOR_ID, DPI_SUPPORTED ) VALUES ( 
2, 2323)
/
INSERT INTO LCD_MONITOR ( MONITOR_ID, DPI_SUPPORTED ) VALUES ( 
3, 1212)
/
commit
/
 
INSERT INTO LONG_KEY ( ID, NAME ) VALUES ( 
1.23456789098765E18, 'Long_123456789')
/
commit
/
 
INSERT INTO LONG_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
987654321234568000, 'Long_Primitive_Key_NAME 987654321234567890')
/
commit
/
 
INSERT INTO LUGGAGE ( ID, DISCRIMINATOR, CAPACITY, KEY_CODE, EXPANDABLE,
WHEEL_ID ) VALUES ( 
1, 'HardTop', 75, 627, NULL, 1)
/
INSERT INTO LUGGAGE ( ID, DISCRIMINATOR, CAPACITY, KEY_CODE, EXPANDABLE,
WHEEL_ID ) VALUES ( 
2, 'HardTop', 75, 985, NULL, 3)
/
INSERT INTO LUGGAGE ( ID, DISCRIMINATOR, CAPACITY, KEY_CODE, EXPANDABLE,
WHEEL_ID ) VALUES ( 
3, 'SoftTop', 55, NULL, '1', 1)
/
INSERT INTO LUGGAGE ( ID, DISCRIMINATOR, CAPACITY, KEY_CODE, EXPANDABLE,
WHEEL_ID ) VALUES ( 
4, 'SoftTop', 35, NULL, '0', 2)
/
INSERT INTO LUGGAGE ( ID, DISCRIMINATOR, CAPACITY, KEY_CODE, EXPANDABLE,
WHEEL_ID ) VALUES ( 
5, 'HardTopType', 100, 890, NULL, 1)
/
commit
/
 
INSERT INTO MAMMAL ( ID, HAIR_COLOR ) VALUES ( 
1, 'Hair_Color1')
/
INSERT INTO MAMMAL ( ID, HAIR_COLOR ) VALUES ( 
2, 'Hair_Color2')
/
INSERT INTO MAMMAL ( ID, HAIR_COLOR ) VALUES ( 
3, 'Hair_Color3')
/
INSERT INTO MAMMAL ( ID, HAIR_COLOR ) VALUES ( 
4, 'Hair_Color4')
/
INSERT INTO MAMMAL ( ID, HAIR_COLOR ) VALUES ( 
5, 'Hair_Color5')
/
commit
/
 
INSERT INTO MONITOR ( DISPLAY_ID, BRAND ) VALUES ( 
1, 'A')
/
INSERT INTO MONITOR ( DISPLAY_ID, BRAND ) VALUES ( 
2, 'B')
/
INSERT INTO MONITOR ( DISPLAY_ID, BRAND ) VALUES ( 
3, 'C')
/
INSERT INTO MONITOR ( DISPLAY_ID, BRAND ) VALUES ( 
4, 'D')
/
commit
/
 
INSERT INTO NO_ID_KEY ( MY_KEY, NAME ) VALUES ( 
1, 'NoIdKey 1')
/
INSERT INTO NO_ID_KEY ( MY_KEY, NAME ) VALUES ( 
2, 'NoIdKey 2')
/
commit
/
 
INSERT INTO ORDERLINE ( ID, NAME ) VALUES ( 
1, 'Orderline_Name1')
/
INSERT INTO ORDERLINE ( ID, NAME ) VALUES ( 
2, 'Orderline_Name2')
/
INSERT INTO ORDERLINE ( ID, NAME ) VALUES ( 
3, 'Orderline_Name3')
/
INSERT INTO ORDERLINE ( ID, NAME ) VALUES ( 
4, 'Orderline_Name4')
/
INSERT INTO ORDERLINE ( ID, NAME ) VALUES ( 
5, 'Orderline_Name5')
/
commit
/
 
INSERT INTO ORGANIZATION ( ID, DISCRIMINATOR, NAME, AGENCY_BUDGET,
CEO ) VALUES ( 
1, 'govt', 'Public Org Name', 1000, NULL)
/
INSERT INTO ORGANIZATION ( ID, DISCRIMINATOR, NAME, AGENCY_BUDGET,
CEO ) VALUES ( 
2, 'pvt', 'Private Org Name', NULL, 'Private CEO Name')
/
commit
/
 
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
1, 'Parent_Name1')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
2, 'Parent_Name2')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
3, 'Parent_Name3')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
4, 'Parent_Name4')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
5, 'Parent_Name5')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
6, 'Parent_Name6')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
7, 'Parent_Name7')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
8, 'Parent_Name8')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
9, 'Parent_Name9')
/
INSERT INTO PARENT ( ID, NAME ) VALUES ( 
10, 'Parent_Name10')
/
commit
/
 
INSERT INTO PASSANGER ( ID, NAME ) VALUES ( 
1, 'John Doe')
/
INSERT INTO PASSANGER ( ID, NAME ) VALUES ( 
2, 'Jane Doe')
/
commit
/
 
INSERT INTO PAYMENT ( ID, AMOUNT ) VALUES ( 
1, 1)
/
INSERT INTO PAYMENT ( ID, AMOUNT ) VALUES ( 
2, 2)
/
INSERT INTO PAYMENT ( ID, AMOUNT ) VALUES ( 
3, 3)
/
INSERT INTO PAYMENT ( ID, AMOUNT ) VALUES ( 
4, 4)
/
INSERT INTO PAYMENT ( ID, AMOUNT ) VALUES ( 
5, 5)
/
commit
/

 
INSERT INTO PENDANT ( ID, SHAPE ) VALUES ( 
1, 'Circle Pearl')
/
INSERT INTO PENDANT ( ID, SHAPE ) VALUES ( 
2, 'Heart Opal')
/
INSERT INTO PENDANT ( ID, SHAPE ) VALUES ( 
3, 'Oval Carnelian Shell Cameo')
/
commit
/
 
INSERT INTO PERSON ( ID, NAME, ADDRESS_ID ) VALUES ( 
1, 'Person_Name1', 1)
/
INSERT INTO PERSON ( ID, NAME, ADDRESS_ID ) VALUES ( 
2, 'Person_Name2', 2)
/
INSERT INTO PERSON ( ID, NAME, ADDRESS_ID ) VALUES ( 
3, 'Person_Name3', 3)
/
INSERT INTO PERSON ( ID, NAME, ADDRESS_ID ) VALUES ( 
4, 'Person_Name4', NULL)
/
INSERT INTO PERSON ( ID, NAME, ADDRESS_ID ) VALUES ( 
5, 'Person_Name5', NULL)
/
commit
/
 
INSERT INTO PRIVATE_TEACHER ( TEACHER_ID, YEARS_EXPERIENCE ) VALUES ( 
1, 5)
/
INSERT INTO PRIVATE_TEACHER ( TEACHER_ID, YEARS_EXPERIENCE ) VALUES ( 
2, 10)
/
INSERT INTO PRIVATE_TEACHER ( TEACHER_ID, YEARS_EXPERIENCE ) VALUES ( 
3, 15)
/
commit
/
 
INSERT INTO PRODUCT ( ID, NAME, ORDERLINE_ID ) VALUES ( 
1, 'Product_Name1', 1)
/
INSERT INTO PRODUCT ( ID, NAME, ORDERLINE_ID ) VALUES ( 
2, 'Product_Name2', 2)
/
INSERT INTO PRODUCT ( ID, NAME, ORDERLINE_ID ) VALUES ( 
3, 'Product_Name3', NULL)
/
commit
/
 
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
1, 'Professor_Name1')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
2, 'Professor_Name2')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
3, 'Professor_Name3')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
4, 'Professor_Name4')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
5, 'Professor_Name5')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
6, 'Professor_Name6')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
7, 'Professor_Name7')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
8, 'Professor_Name8')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
9, 'Professor_Name9')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
10, 'Professor_Name10')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
11, 'Professor_Name11')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
12, 'Professor_Name12')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
13, 'Professor_Name13')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
14, 'Professor_Name14')
/
INSERT INTO PROFESSOR ( ID, NAME ) VALUES ( 
15, 'Professor_Name15')
/
commit
/
 
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
1, 'Project_Name1')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
2, 'Project_Name2')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
3, 'Project_Name3')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
4, 'Project_Name4')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
5, 'Project_Name5')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
6, 'Project_Name6')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
7, 'Project_Name7')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
8, 'Project_Name8')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
9, 'Project_Name9')
/
INSERT INTO PROJECT ( ID, NAME ) VALUES ( 
10, 'Project_Name10')
/
commit
/
 
INSERT INTO PUPIL ( ID, NAME, TEACHER_ID ) VALUES ( 
1, 'Pupil_Name_1', 1)
/
INSERT INTO PUPIL ( ID, NAME, TEACHER_ID ) VALUES ( 
2, 'Pupil_Name_2', 1)
/
INSERT INTO PUPIL ( ID, NAME, TEACHER_ID ) VALUES ( 
3, 'Pupil_Name_3', 3)
/
INSERT INTO PUPIL ( ID, NAME, TEACHER_ID ) VALUES ( 
4, 'Pupil_Name_4', 3)
/
commit
/
 
INSERT INTO RESTAURANT ( ID, NAME ) VALUES ( 
1, 'Rest1')
/
INSERT INTO RESTAURANT ( ID, NAME ) VALUES ( 
2, 'Rest2')
/
INSERT INTO RESTAURANT ( ID, NAME ) VALUES ( 
3, 'Rest3')
/
INSERT INTO RESTAURANT ( ID, NAME ) VALUES ( 
4, 'Rest4')
/
INSERT INTO RESTAURANT ( ID, NAME ) VALUES ( 
5, 'Rest5')
/
commit
/
 
INSERT INTO SALTWATER_FISH_TANK ( ID, SHAPE, NUM_GALLONS,
PROTEIN_SKIMMER_MODEL ) VALUES ( 
3, 'Rectangular', 60, 'Berlin X2 Turbo Skimmer')
/
INSERT INTO SALTWATER_FISH_TANK ( ID, SHAPE, NUM_GALLONS,
PROTEIN_SKIMMER_MODEL ) VALUES ( 
4, 'Hexagonal', 20, 'Prizm Pro Deluxe Skimmer')
/
commit
/
 
INSERT INTO SALTWATER_FISH_TANK_SUBSTRATE ( SALTWATER_FISH_TANK_ID,
SUBSTRATE_ID ) VALUES ( 
3, 1)
/
INSERT INTO SALTWATER_FISH_TANK_SUBSTRATE ( SALTWATER_FISH_TANK_ID,
SUBSTRATE_ID ) VALUES ( 
3, 2)
/
INSERT INTO SALTWATER_FISH_TANK_SUBSTRATE ( SALTWATER_FISH_TANK_ID,
SUBSTRATE_ID ) VALUES ( 
4, 3)
/
INSERT INTO SALTWATER_FISH_TANK_SUBSTRATE ( SALTWATER_FISH_TANK_ID,
SUBSTRATE_ID ) VALUES ( 
4, 4)
/
commit
/
 
INSERT INTO SHIRT ( ID, STYLE ) VALUES ( 
1, 'Collar')
/
INSERT INTO SHIRT ( ID, STYLE ) VALUES ( 
2, 'Western')
/
INSERT INTO SHIRT ( ID, STYLE ) VALUES ( 
3, 'T-Shirt')
/
commit
/
 
INSERT INTO SHIRT_BUTTON ( SHIRT_ID, BUTTON_ID ) VALUES ( 
1, 1)
/
INSERT INTO SHIRT_BUTTON ( SHIRT_ID, BUTTON_ID ) VALUES ( 
2, 2)
/
commit
/
 
INSERT INTO SHOES ( ID, DISCRIMINATOR, COLOR, SPORTS_TYPE,
DESIGNER_ID ) VALUES ( 
1, 'DesignerShoes', 'White', NULL, 2)
/
INSERT INTO SHOES ( ID, DISCRIMINATOR, COLOR, SPORTS_TYPE,
DESIGNER_ID ) VALUES ( 
2, 'SportsShoes', 'Red', 'BasketBall', NULL)
/
INSERT INTO SHOES ( ID, DISCRIMINATOR, COLOR, SPORTS_TYPE,
DESIGNER_ID ) VALUES ( 
3, 'DesignerShoes', 'Black', NULL, 3)
/
commit
/
 
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
1, 'Albinoni:  Concerto in B Flat, OP. 7 No. 3')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
2, 'Albinoni:  Concerto in D Major, Op. 7 No. 6')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
3, 'Marcello:  Concerto in D Minor')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
4, 'Vivaldi:  Concerto in F Major F VII 2')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
5, 'Vivaldi:  Concerto in A Minor F VII 5')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
6, 'Cimarosa/Benjamin:  Concerto in C Minor')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
7, 'Rubenstein: Melody in F, Op. 3 No. 1')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
8, 'Schubert: Ave Maria')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
9, 'Rimsky-Korsakov:  The Flight of the Bumble Bee')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
10, 'Schumann:  Traumerei')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
11, 'Dvorak:  Songs My Mother Taught Me')
/
INSERT INTO SONG ( ID, TITLE ) VALUES ( 
12, 'Saint-Seans:  The Swan')
/
commit
/
 
INSERT INTO STRING_KEY ( ID, NAME ) VALUES ( 
'ID1', 'String_Key_Name1')
/
INSERT INTO STRING_KEY ( ID, NAME ) VALUES ( 
'ID2', 'String_Key_Name2')
/
INSERT INTO STRING_KEY ( ID, NAME ) VALUES ( 
'ID3', 'String_Key_Name3')
/
INSERT INTO STRING_KEY ( ID, NAME ) VALUES ( 
'ID4', 'String_Key_Name4')
/
INSERT INTO STRING_KEY ( ID, NAME ) VALUES ( 
'ID5', 'String_Key_Name5')
/
commit
/
 
INSERT INTO STRING_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'id1', 'String_Primitive_Key id1')
/
INSERT INTO STRING_PRIMITIVE_KEY ( ID, NAME ) VALUES ( 
'id2', 'String_Primitive_Key id2')
/
commit
/
 
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
1, 'Student_Name1')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
2, 'Student_Name2')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
3, 'Student_Name3')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
4, 'Student_Name4')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
5, 'Student_Name5')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
6, 'Student_Name6')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
7, 'Student_Name7')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
8, 'Student_Name8')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
9, 'Student_Name9')
/
INSERT INTO STUDENT ( ID, NAME ) VALUES ( 
10, 'Student_Name10')
/
commit
/
 
INSERT INTO SUBSTRATE ( ID, NAME ) VALUES (1, 'Live Rock')
/
INSERT INTO SUBSTRATE ( ID, NAME ) VALUES (2, 'Sand')
/
INSERT INTO SUBSTRATE ( ID, NAME ) VALUES (3, 'Crushed Coral')
/
INSERT INTO SUBSTRATE ( ID, NAME ) VALUES (4, 'River Pebbles')
/
commit
/
 
INSERT INTO SUIT ( ID, NAME, DECK_ID ) VALUES (1, 'Spade', 1)
/
INSERT INTO SUIT ( ID, NAME, DECK_ID ) VALUES (2, 'Flower', 1)
/
INSERT INTO SUIT ( ID, NAME, DECK_ID ) VALUES (3, 'Diamond', 1)
/
INSERT INTO SUIT ( ID, NAME, DECK_ID ) VALUES (4, 'Heart', 1)
/
commit
/
 
INSERT INTO TANK_ACCESSORY ( ID, NAME ) VALUES (1, 'Filter')
/
INSERT INTO TANK_ACCESSORY ( ID, NAME ) VALUES (2, 'Heater')
/
INSERT INTO TANK_ACCESSORY ( ID, NAME ) VALUES (3, 'Lighting')
/
INSERT INTO TANK_ACCESSORY ( ID, NAME ) VALUES (4, 'Protein Skimmer')
/
commit
/
 
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (1, 1, 'FreshwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (1, 2, 'FreshwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (2, 2, 'FreshwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (2, 3, 'FreshwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (3, 1, 'SaltwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (3, 4, 'SaltwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (4, 1, 'SaltwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (4, 2, 'SaltwaterFishTank')
/
INSERT INTO TANK_TANK_ACCESSORY ( TANK_ID, TANK_ACCESSORY_ID,
TANK_DISCRIMINATOR ) VALUES (4, 4, 'SaltwaterFishTank')
/
commit
/
 
INSERT INTO TEACHER ( ID, NAME ) VALUES (1, 'Teacher_Name1')
/
INSERT INTO TEACHER ( ID, NAME ) VALUES (2, 'Teacher_Name2')
/
INSERT INTO TEACHER ( ID, NAME ) VALUES (3, 'Teacher_Name3')
/
commit
/
 
INSERT INTO TENURED_PROFESSOR ( PROFESSOR_ID, TENURED_YEAR ) VALUES ( 
1, 1)
/
INSERT INTO TENURED_PROFESSOR ( PROFESSOR_ID, TENURED_YEAR ) VALUES ( 
2, 2)
/
INSERT INTO TENURED_PROFESSOR ( PROFESSOR_ID, TENURED_YEAR ) VALUES ( 
3, 3)
/
INSERT INTO TENURED_PROFESSOR ( PROFESSOR_ID, TENURED_YEAR ) VALUES ( 
4, 4)
/
INSERT INTO TENURED_PROFESSOR ( PROFESSOR_ID, TENURED_YEAR ) VALUES ( 
5, 5)
/
commit
/
 
INSERT INTO UNDERGRADUATE_STUDENT ( STUDENT_ID ) VALUES (1)
/
INSERT INTO UNDERGRADUATE_STUDENT ( STUDENT_ID ) VALUES (2)
/
INSERT INTO UNDERGRADUATE_STUDENT ( STUDENT_ID ) VALUES (3)
/
INSERT INTO UNDERGRADUATE_STUDENT ( STUDENT_ID ) VALUES (4)
/
INSERT INTO UNDERGRADUATE_STUDENT ( STUDENT_ID ) VALUES (5)
/
commit
/
 
INSERT INTO UTENSIL ( ID, NAME ) VALUES (1, 'Spoon')
/
INSERT INTO UTENSIL ( ID, NAME ) VALUES (2, 'Knife')
/
INSERT INTO UTENSIL ( ID, NAME ) VALUES (3, 'Fork')
/
commit
/
 
INSERT INTO WHEEL ( ID, RADIUS ) VALUES (1, 1)
/
INSERT INTO WHEEL ( ID, RADIUS ) VALUES (2, 5)
/
INSERT INTO WHEEL ( ID, RADIUS ) VALUES (3, 10)
/
commit
/


CREATE UNIQUE INDEX PK_ALBUM ON ALBUM (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ADDRESS ON ADDRESS (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ALBUM_SONG ON ALBUM_SONG (ALBUM_ID, SONG_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ALL_DATA_TYPE ON ALL_DATA_TYPE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ASSISTANT ON ASSISTANT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ASSISTANT_PROFESSOR ON ASSISTANT_PROFESSOR (PROFESSOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ASSOCIATE_PROFESSOR ON ASSOCIATE_PROFESSOR (PROFESSOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_AUTHOR ON AUTHOR (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_AUTHOR_BOOK ON AUTHOR_BOOK (AUTHOR_ID, BOOK_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BAG ON BAG (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BAG_HANDLE ON BAG_HANDLE (BAG_ID, HANDLE_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BAG_HANDLE_BAG_ID ON BAG_HANDLE (BAG_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BAG_HANDLE_HANDLE_ID ON BAG_HANDLE (HANDLE_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BANK ON BANK (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BOOK ON BOOK (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BRIDE ON BRIDE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BRIDE_FATHER_IN_LAW ON BRIDE_FATHER_IN_LAW (BRIDE_ID, IN_LAW_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BRIDE_FATHER_IN__IN_LAW_ID ON BRIDE_FATHER_IN_LAW (IN_LAW_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BRIDE_FATHER_IN_L_BRIDE_ID ON BRIDE_FATHER_IN_LAW (BRIDE_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BRIDE_MOTHER_IN_LAW ON BRIDE_MOTHER_IN_LAW (BRIDE_D, IN_LAW_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BRIDE_MOTHER_IN__IN_LAW_ID ON BRIDE_MOTHER_IN_LAW (IN_LAW_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_BRIDE_MOTHER_IN_LA_BRIDE_D ON BRIDE_MOTHER_IN_LAW (BRIDE_D) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_BUTTON ON BUTTON (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CALCULATOR ON CALCULATOR (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CARD ON CARD (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CASH ON CASH (PAYMENT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHAIN ON CHAIN (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHAIN_PENDANT ON CHAIN_PENDANT (CHAIN_ID, PENDANT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_CHAIN_PENDANT_CHAIN_ID ON CHAIN_PENDANT (CHAIN_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_CHAIN_PENDANT_PENDANT_ID ON CHAIN_PENDANT (PENDANT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHARACTER_KEY ON CHARACTER_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHARACTER_PRIMITIVE_KEY ON CHARACTER_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHEF ON CHEF (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CHILD ON CHILD (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_CHILD_FATHER_ID ON CHILD (FATHER_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_CHILD_MOTHER_ID ON CHILD (MOTHER_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_COMPUTER ON COMPUTER (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CREDIT ON CREDIT (PAYMENT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CRT_MONITOR ON CRT_MONITOR (MONITOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_MAMMAL ON MAMMAL (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_MONITOR ON MONITOR (DISPLAY_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_NO_ID_KEY ON NO_ID_KEY (MY_KEY) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ORDERLINE ON ORDERLINE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ORGANIZATION ON ORGANIZATION (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PARENT ON PARENT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PASSANGER ON PASSANGER (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PAYMENT ON PAYMENT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PENDANT ON PENDANT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PERSON ON PERSON (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_PERSON_ADDRESS_ID ON PERSON (ADDRESS_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PRIVATE_TEACHER ON PRIVATE_TEACHER (TEACHER_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PRODUCT ON PRODUCT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_PRODUCT_ORDERLINE_ID ON PRODUCT (ORDERLINE_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PROFESSOR ON PROFESSOR (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PROJECT ON PROJECT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_PUPIL ON PUPIL (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_RESTAURANT ON RESTAURANT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SALTWATER_FISH_TANK ON SALTWATER_FISH_TANK (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SWFT_SUBSTRATE ON SALTWATER_FISH_TANK_SUBSTRATE (SALTWATER_FISH_TANK_ID, SUBSTRATE_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SHIRT ON SHIRT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SHIRT_BUTTON ON SHIRT_BUTTON (SHIRT_ID, BUTTON_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_SHIRT_BUTTON_SHIRT_ID ON SHIRT_BUTTON (SHIRT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SHOES ON SHOES (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SONG ON SONG (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_STRING_KEY ON STRING_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_STRING_PRIMITIVE_KEY ON STRING_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_STUDENT ON STUDENT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SUBSTRATE ON SUBSTRATE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_SUIT ON SUIT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_TANK_ACCESSORY ON TANK_ACCESSORY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_TANK_TANK_ACCESSORY ON TANK_TANK_ACCESSORY (TANK_ID, TANK_ACCESSORY_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_TEACHER ON TEACHER (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_TENURED_PROFESSOR ON TENURED_PROFESSOR (PROFESSOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_UNDERGRADUATE_STUDENT ON UNDERGRADUATE_STUDENT (STUDENT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_UTENSIL ON UTENSIL (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_WHEEL ON WHEEL (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_CURRENCY ON CURRENCY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DECK ON DECK (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DESIGNER ON DESIGNER (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DESSERT ON DESSERT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DESSERT_UTENSIL ON DESSERT_UTENSIL (DESSERT_ID, UTENSIL_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DISPLAY ON DISPLAY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DOG ON DOG (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DOUBLE_KEY ON DOUBLE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_DOUBLE_PRIMITIVE_KEY ON DOUBLE_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_ELEMENT ON ELEMENT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX UQ_ELEMENT_PARENT_ELEMENT_ID ON ELEMENT (PARENT_ELEMENT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_EMPLOYEE ON EMPLOYEE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_EMPLOYEE_PROJECT ON EMPLOYEE_PROJECT (EMPLOYEE_ID, PROJECT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FISH ON FISH (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FLIGHT ON FLIGHT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FLIGHT_PASSANGER ON FLIGHT_PASSANGER (FLIGHT_ID, PASSANGER_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FLOAT_KEY ON FLOAT_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FLOAT_PRIMITIVE_KEY ON FLOAT_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_FRESHWATER_FISH_TANK ON FRESHWATER_FISH_TANK (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_GOVERMENT ON GOVERMENT (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_GRADUATE_STUDENT ON GRADUATE_STUDENT (STUDENT_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_GRAPHIC_CALCULATOR ON GRAPHIC_CALCULATOR (CALCULATOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HAND ON HAND (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HANDLE ON HANDLE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HAND_CARD ON HAND_CARD (HAND_ID, CARD_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HARD_DRIVE ON HARD_DRIVE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HL7_DATA_TYPE ON HL7_DATA_TYPE (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_HUMAN ON HUMAN (MAMMAL_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_INTEGER_KEY ON INTEGER_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_INTEGER_PRIMITIVE_KEY ON INTEGER_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_IN_LAW ON IN_LAW (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_KEYCHAIN ON KEYCHAIN (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_LATCH_KEY ON LATCH_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_LCD_MONITOR ON LCD_MONITOR (MONITOR_ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_LONG_KEY ON LONG_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_LONG_PRIMITIVE_KEY ON LONG_PRIMITIVE_KEY (ID) LOGGING NOPARALLEL
/


CREATE UNIQUE INDEX PK_LUGGAGE ON LUGGAGE (ID) LOGGING NOPARALLEL
/


ALTER TABLE ALBUM ADD ( CONSTRAINT PK_ALBUM PRIMARY KEY (ID))
/


ALTER TABLE ADDRESS ADD ( CONSTRAINT PK_ADDRESS PRIMARY KEY (ID))
/


ALTER TABLE ALBUM_SONG ADD ( CONSTRAINT PK_ALBUM_SONG PRIMARY KEY (ALBUM_ID, SONG_ID))
/


ALTER TABLE ALL_DATA_TYPE ADD ( CONSTRAINT PK_ALL_DATA_TYPE PRIMARY KEY (ID))
/


ALTER TABLE ALL_VALIDATION_TYPE ADD ( PRIMARY KEY (ID))
/


ALTER TABLE ASSISTANT ADD ( CONSTRAINT PK_ASSISTANT PRIMARY KEY (ID))
/


ALTER TABLE ASSISTANT_PROFESSOR ADD ( CONSTRAINT PK_ASSISTANT_PROFESSOR PRIMARY KEY (PROFESSOR_ID))
/


ALTER TABLE ASSOCIATE_PROFESSOR ADD ( CONSTRAINT PK_ASSOCIATE_PROFESSOR PRIMARY KEY (PROFESSOR_ID))
/


ALTER TABLE AUTHOR ADD ( CONSTRAINT PK_AUTHOR PRIMARY KEY (ID))
/


ALTER TABLE AUTHOR_BOOK ADD ( CONSTRAINT PK_AUTHOR_BOOK PRIMARY KEY (AUTHOR_ID, BOOK_ID))
/


ALTER TABLE BAG ADD ( CONSTRAINT PK_BAG PRIMARY KEY (ID))
/


ALTER TABLE BAG_HANDLE ADD ( CONSTRAINT PK_BAG_HANDLE PRIMARY KEY (BAG_ID, HANDLE_ID))
/

ALTER TABLE BAG_HANDLE ADD ( CONSTRAINT UQ_BAG_HANDLE_HANDLE_ID UNIQUE (HANDLE_ID))
/

ALTER TABLE BAG_HANDLE ADD ( CONSTRAINT UQ_BAG_HANDLE_BAG_ID UNIQUE (BAG_ID))
/


ALTER TABLE BANK ADD ( CONSTRAINT PK_BANK PRIMARY KEY (ID))
/


ALTER TABLE BOOK ADD ( CONSTRAINT PK_BOOK PRIMARY KEY (ID))
/


ALTER TABLE BRIDE ADD ( CONSTRAINT PK_BRIDE PRIMARY KEY (ID))
/


ALTER TABLE BRIDE_FATHER_IN_LAW ADD ( CONSTRAINT PK_BRIDE_FATHER_IN_LAW PRIMARY KEY (BRIDE_ID, IN_LAW_ID))
/

ALTER TABLE BRIDE_FATHER_IN_LAW ADD ( CONSTRAINT UQ_BRIDE_FATHER_IN_L_BRIDE_ID UNIQUE (BRIDE_ID))
/

ALTER TABLE BRIDE_FATHER_IN_LAW ADD ( CONSTRAINT UQ_BRIDE_FATHER_IN__IN_LAW_ID UNIQUE (IN_LAW_ID))
/


ALTER TABLE BRIDE_MOTHER_IN_LAW ADD ( CONSTRAINT PK_BRIDE_MOTHER_IN_LAW PRIMARY KEY (BRIDE_D, IN_LAW_ID))
/

ALTER TABLE BRIDE_MOTHER_IN_LAW ADD ( CONSTRAINT UQ_BRIDE_MOTHER_IN_LA_BRIDE_D UNIQUE (BRIDE_D))
/

ALTER TABLE BRIDE_MOTHER_IN_LAW ADD ( CONSTRAINT UQ_BRIDE_MOTHER_IN__IN_LAW_ID UNIQUE (IN_LAW_ID))
/


ALTER TABLE BUTTON ADD ( CONSTRAINT PK_BUTTON PRIMARY KEY (ID))
/


ALTER TABLE CALCULATOR ADD ( CONSTRAINT PK_CALCULATOR PRIMARY KEY (ID))
/


ALTER TABLE CARD ADD ( CONSTRAINT PK_CARD PRIMARY KEY (ID))
/


ALTER TABLE CASH ADD ( CONSTRAINT PK_CASH PRIMARY KEY (PAYMENT_ID))
/


ALTER TABLE CHAIN ADD ( CONSTRAINT PK_CHAIN PRIMARY KEY (ID))
/


ALTER TABLE CHAIN_PENDANT ADD ( CONSTRAINT PK_CHAIN_PENDANT PRIMARY KEY (CHAIN_ID, PENDANT_ID))
/

ALTER TABLE CHAIN_PENDANT ADD ( CONSTRAINT UQ_CHAIN_PENDANT_PENDANT_ID UNIQUE (PENDANT_ID))
/

ALTER TABLE CHAIN_PENDANT ADD ( CONSTRAINT UQ_CHAIN_PENDANT_CHAIN_ID UNIQUE (CHAIN_ID))
/


ALTER TABLE CHARACTER_KEY ADD ( CONSTRAINT PK_CHARACTER_KEY PRIMARY KEY (ID))
/


ALTER TABLE CHARACTER_PRIMITIVE_KEY ADD ( CONSTRAINT PK_CHARACTER_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE CHEF ADD ( CONSTRAINT PK_CHEF PRIMARY KEY (ID))
/


ALTER TABLE CHILD ADD ( CONSTRAINT PK_CHILD PRIMARY KEY (ID))
/

ALTER TABLE CHILD ADD ( CONSTRAINT UQ_CHILD_MOTHER_ID UNIQUE (MOTHER_ID))
/

ALTER TABLE CHILD ADD ( CONSTRAINT UQ_CHILD_FATHER_ID UNIQUE (FATHER_ID))
/


ALTER TABLE COMPUTER ADD ( CONSTRAINT PK_COMPUTER PRIMARY KEY (ID))
/


ALTER TABLE CREDIT ADD ( CONSTRAINT PK_CREDIT PRIMARY KEY (PAYMENT_ID))
/


ALTER TABLE CRT_MONITOR ADD ( CONSTRAINT PK_CRT_MONITOR PRIMARY KEY (MONITOR_ID))
/


ALTER TABLE MAMMAL ADD ( CONSTRAINT PK_MAMMAL PRIMARY KEY (ID))
/


ALTER TABLE MONITOR ADD ( CONSTRAINT PK_MONITOR PRIMARY KEY (DISPLAY_ID))
/


ALTER TABLE NO_ID_KEY ADD ( CONSTRAINT PK_NO_ID_KEY PRIMARY KEY (MY_KEY))
/


ALTER TABLE ORDERLINE ADD ( CONSTRAINT PK_ORDERLINE PRIMARY KEY (ID))
/


ALTER TABLE ORGANIZATION ADD ( CONSTRAINT PK_ORGANIZATION PRIMARY KEY (ID))
/


ALTER TABLE PARENT ADD ( CONSTRAINT PK_PARENT PRIMARY KEY (ID))
/


ALTER TABLE PASSANGER ADD ( CONSTRAINT PK_PASSANGER PRIMARY KEY (ID))
/


ALTER TABLE PAYMENT ADD ( CONSTRAINT PK_PAYMENT PRIMARY KEY (ID))
/


ALTER TABLE PENDANT ADD ( CONSTRAINT PK_PENDANT PRIMARY KEY (ID))
/


ALTER TABLE PERSON ADD ( CONSTRAINT PK_PERSON PRIMARY KEY (ID))
/

ALTER TABLE PERSON ADD ( CONSTRAINT UQ_PERSON_ADDRESS_ID UNIQUE (ADDRESS_ID))
/


ALTER TABLE PRIVATE_TEACHER ADD ( CONSTRAINT PK_PRIVATE_TEACHER PRIMARY KEY (TEACHER_ID))
/


ALTER TABLE PRODUCT ADD ( CONSTRAINT PK_PRODUCT PRIMARY KEY (ID))
/

ALTER TABLE PRODUCT ADD ( CONSTRAINT UQ_PRODUCT_ORDERLINE_ID UNIQUE (ORDERLINE_ID))
/


ALTER TABLE PROFESSOR ADD ( CONSTRAINT PK_PROFESSOR PRIMARY KEY (ID))
/


ALTER TABLE PROJECT ADD ( CONSTRAINT PK_PROJECT PRIMARY KEY (ID))
/


ALTER TABLE PUPIL ADD ( CONSTRAINT PK_PUPIL PRIMARY KEY (ID))
/


ALTER TABLE RESTAURANT ADD ( CONSTRAINT PK_RESTAURANT PRIMARY KEY (ID))
/


ALTER TABLE SALTWATER_FISH_TANK ADD ( CONSTRAINT PK_SALTWATER_FISH_TANK PRIMARY KEY (ID))
/


ALTER TABLE SALTWATER_FISH_TANK_SUBSTRATE ADD ( CONSTRAINT PK_SWFT_SUBSTRATE PRIMARY KEY (SALTWATER_FISH_TANK_ID, SUBSTRATE_ID))
/


ALTER TABLE SHIRT ADD ( CONSTRAINT PK_SHIRT PRIMARY KEY (ID))
/


ALTER TABLE SHIRT_BUTTON ADD ( CONSTRAINT PK_SHIRT_BUTTON PRIMARY KEY (SHIRT_ID, BUTTON_ID))
/

ALTER TABLE SHIRT_BUTTON ADD ( CONSTRAINT UQ_SHIRT_BUTTON_SHIRT_ID UNIQUE (SHIRT_ID))
/


ALTER TABLE SHOES ADD ( CONSTRAINT PK_SHOES PRIMARY KEY (ID))
/


ALTER TABLE SONG ADD ( CONSTRAINT PK_SONG PRIMARY KEY (ID))
/


ALTER TABLE STRING_KEY ADD ( CONSTRAINT PK_STRING_KEY PRIMARY KEY (ID))
/


ALTER TABLE STRING_PRIMITIVE_KEY ADD ( CONSTRAINT PK_STRING_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE STUDENT ADD ( CONSTRAINT PK_STUDENT PRIMARY KEY (ID))
/


ALTER TABLE SUBSTRATE ADD ( CONSTRAINT PK_SUBSTRATE PRIMARY KEY (ID))
/


ALTER TABLE SUIT ADD ( CONSTRAINT PK_SUIT PRIMARY KEY (ID))
/


ALTER TABLE TANK_ACCESSORY ADD ( CONSTRAINT PK_TANK_ACCESSORY PRIMARY KEY (ID))
/


ALTER TABLE TANK_TANK_ACCESSORY ADD ( CONSTRAINT PK_TANK_TANK_ACCESSORY PRIMARY KEY (TANK_ID, TANK_ACCESSORY_ID))
/


ALTER TABLE TEACHER ADD ( CONSTRAINT PK_TEACHER PRIMARY KEY (ID))
/


ALTER TABLE TENURED_PROFESSOR ADD ( CONSTRAINT PK_TENURED_PROFESSOR PRIMARY KEY (PROFESSOR_ID))
/


ALTER TABLE UNDERGRADUATE_STUDENT ADD ( CONSTRAINT PK_UNDERGRADUATE_STUDENT PRIMARY KEY (STUDENT_ID))
/


ALTER TABLE UTENSIL ADD ( CONSTRAINT PK_UTENSIL PRIMARY KEY (ID))
/


ALTER TABLE WHEEL ADD ( CONSTRAINT PK_WHEEL PRIMARY KEY (ID))
/


ALTER TABLE CURRENCY ADD ( CONSTRAINT PK_CURRENCY PRIMARY KEY (ID))
/


ALTER TABLE DECK ADD ( CONSTRAINT PK_DECK PRIMARY KEY (ID))
/


ALTER TABLE DESIGNER ADD ( CONSTRAINT PK_DESIGNER PRIMARY KEY (ID))
/


ALTER TABLE DESSERT ADD ( CONSTRAINT PK_DESSERT PRIMARY KEY (ID))
/


ALTER TABLE DESSERT_UTENSIL ADD ( CONSTRAINT PK_DESSERT_UTENSIL PRIMARY KEY (DESSERT_ID, UTENSIL_ID))
/


ALTER TABLE DISPLAY ADD ( CONSTRAINT PK_DISPLAY PRIMARY KEY (ID))
/


ALTER TABLE DOG ADD ( CONSTRAINT PK_DOG PRIMARY KEY (ID))
/


ALTER TABLE DOUBLE_KEY ADD ( CONSTRAINT PK_DOUBLE_KEY PRIMARY KEY (ID))
/


ALTER TABLE DOUBLE_PRIMITIVE_KEY ADD ( CONSTRAINT PK_DOUBLE_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE ELEMENT ADD ( CONSTRAINT PK_ELEMENT PRIMARY KEY (ID))
/

ALTER TABLE ELEMENT ADD ( CONSTRAINT UQ_ELEMENT_PARENT_ELEMENT_ID UNIQUE (PARENT_ELEMENT_ID))
/


ALTER TABLE EMPLOYEE ADD ( CONSTRAINT PK_EMPLOYEE PRIMARY KEY (ID))
/


ALTER TABLE EMPLOYEE_PROJECT ADD ( CONSTRAINT PK_EMPLOYEE_PROJECT PRIMARY KEY (EMPLOYEE_ID, PROJECT_ID))
/


ALTER TABLE FISH ADD ( CONSTRAINT PK_FISH PRIMARY KEY (ID))
/


ALTER TABLE FLIGHT ADD ( CONSTRAINT PK_FLIGHT PRIMARY KEY (ID))
/


ALTER TABLE FLIGHT_PASSANGER ADD ( CONSTRAINT PK_FLIGHT_PASSANGER PRIMARY KEY (FLIGHT_ID, PASSANGER_ID))
/


ALTER TABLE FLOAT_KEY ADD ( CONSTRAINT PK_FLOAT_KEY PRIMARY KEY (ID))
/


ALTER TABLE FLOAT_PRIMITIVE_KEY ADD ( CONSTRAINT PK_FLOAT_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE FRESHWATER_FISH_TANK ADD ( CONSTRAINT PK_FRESHWATER_FISH_TANK PRIMARY KEY (ID))
/


ALTER TABLE GOVERMENT ADD ( CONSTRAINT PK_GOVERMENT PRIMARY KEY (ID))
/


ALTER TABLE GRADUATE_STUDENT ADD ( CONSTRAINT PK_GRADUATE_STUDENT PRIMARY KEY (STUDENT_ID))
/


ALTER TABLE GRAPHIC_CALCULATOR ADD ( CONSTRAINT PK_GRAPHIC_CALCULATOR PRIMARY KEY (CALCULATOR_ID))
/


ALTER TABLE HAND ADD ( CONSTRAINT PK_HAND PRIMARY KEY (ID))
/


ALTER TABLE HANDLE ADD ( CONSTRAINT PK_HANDLE PRIMARY KEY (ID))
/


ALTER TABLE HAND_CARD ADD ( CONSTRAINT PK_HAND_CARD PRIMARY KEY (HAND_ID, CARD_ID))
/


ALTER TABLE HARD_DRIVE ADD ( CONSTRAINT PK_HARD_DRIVE PRIMARY KEY (ID))
/


ALTER TABLE HL7_DATA_TYPE ADD ( CONSTRAINT PK_HL7_DATA_TYPE PRIMARY KEY (ID))
/


ALTER TABLE HUMAN ADD ( CONSTRAINT PK_HUMAN PRIMARY KEY (MAMMAL_ID))
/


ALTER TABLE INTEGER_KEY ADD ( CONSTRAINT PK_INTEGER_KEY PRIMARY KEY (ID))
/


ALTER TABLE INTEGER_PRIMITIVE_KEY ADD ( CONSTRAINT PK_INTEGER_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE IN_LAW ADD ( CONSTRAINT PK_IN_LAW PRIMARY KEY (ID))
/


ALTER TABLE KEYCHAIN ADD ( CONSTRAINT PK_KEYCHAIN PRIMARY KEY (ID))
/


ALTER TABLE LATCH_KEY ADD ( CONSTRAINT PK_LATCH_KEY PRIMARY KEY (ID))
/


ALTER TABLE LCD_MONITOR ADD ( CONSTRAINT PK_LCD_MONITOR PRIMARY KEY (MONITOR_ID))
/


ALTER TABLE LONG_KEY ADD ( CONSTRAINT PK_LONG_KEY PRIMARY KEY (ID))
/


ALTER TABLE LONG_PRIMITIVE_KEY ADD ( CONSTRAINT PK_LONG_PRIMITIVE_KEY PRIMARY KEY (ID))
/


ALTER TABLE LUGGAGE ADD ( CONSTRAINT PK_LUGGAGE PRIMARY KEY (ID))
/


ALTER TABLE ALL_DATA_TYPE_STRING_COLL ADD ( CONSTRAINT FK_ALL_DATA_TYPE_ALL_DATA_TYPE FOREIGN KEY (ALL_DATA_TYPE_ID) REFERENCES ALL_DATA_TYPE (ID) ON DELETE CASCADE)
/


ALTER TABLE ASSISTANT ADD ( CONSTRAINT FK_ASSISTANT_PROFESSOR FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR (ID))
/


ALTER TABLE ASSISTANT_PROFESSOR ADD ( CONSTRAINT FK_ASSISTANT_PROFESS_PROFESSOR FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR (ID))
/


ALTER TABLE ASSOCIATE_PROFESSOR ADD ( CONSTRAINT FK_ASSOCIATE_PROFESS_PROFESSOR FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR (ID))
/


ALTER TABLE AUTHOR_BOOK ADD ( CONSTRAINT FK_AUTHOR_BOOK_BOOK FOREIGN KEY (BOOK_ID) REFERENCES BOOK (ID))
/

ALTER TABLE AUTHOR_BOOK ADD ( CONSTRAINT FK_AUTHOR_BOOK_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR (ID))
/


ALTER TABLE BAG_HANDLE ADD ( CONSTRAINT FK_BAG_HANDLE_HANDLE FOREIGN KEY (HANDLE_ID) REFERENCES HANDLE (ID))
/

ALTER TABLE BAG_HANDLE ADD ( CONSTRAINT FK_BAG_HANDLE_BAG FOREIGN KEY (BAG_ID) REFERENCES BAG (ID))
/


ALTER TABLE BRIDE_FATHER_IN_LAW ADD ( CONSTRAINT FK_BRIDE_FATHER_IN_LAW_IN_LAW FOREIGN KEY (IN_LAW_ID) REFERENCES IN_LAW (ID))
/

ALTER TABLE BRIDE_FATHER_IN_LAW ADD ( CONSTRAINT FK_BRIDE_FATHER_IN_LAW_BRIDE FOREIGN KEY (BRIDE_ID) REFERENCES BRIDE (ID))
/


ALTER TABLE BRIDE_MOTHER_IN_LAW ADD ( CONSTRAINT FK_BRIDE_MOTHER_IN_LAW_IN_LAW FOREIGN KEY (IN_LAW_ID) REFERENCES IN_LAW (ID))
/

ALTER TABLE BRIDE_MOTHER_IN_LAW ADD ( CONSTRAINT FK_BRIDE_MOTHER_IN_LAW_BRIDE FOREIGN KEY (BRIDE_D) REFERENCES BRIDE (ID))
/


ALTER TABLE CARD ADD ( CONSTRAINT FK_CARD_SUIT FOREIGN KEY (SUIT_ID) REFERENCES SUIT (ID))
/


ALTER TABLE CASH ADD ( CONSTRAINT FK_CASH_PAYMENT FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT (ID))
/


ALTER TABLE CHAIN_PENDANT ADD ( CONSTRAINT FK_CHAIN_PENDANT_PENDANT FOREIGN KEY (PENDANT_ID) REFERENCES PENDANT (ID))
/

ALTER TABLE CHAIN_PENDANT ADD ( CONSTRAINT FK_CHAIN_PENDANT_CHAIN FOREIGN KEY (CHAIN_ID) REFERENCES CHAIN (ID))
/


ALTER TABLE CHEF ADD ( CONSTRAINT FK_CHEF_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT (ID))
/


ALTER TABLE CHILD ADD ( CONSTRAINT FK_CHILD_PARENT_M FOREIGN KEY (MOTHER_ID) REFERENCES PARENT (ID))
/

ALTER TABLE CHILD ADD ( CONSTRAINT FK_CHILD_PARENT FOREIGN KEY (FATHER_ID) REFERENCES PARENT (ID))
/


ALTER TABLE CREDIT ADD ( CONSTRAINT FK_CREDIT_PAYMENT FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT (ID))
/

ALTER TABLE CREDIT ADD ( CONSTRAINT FK_CREDIT_BANK FOREIGN KEY (BANK_ID) REFERENCES BANK (ID))
/


ALTER TABLE CRT_MONITOR ADD ( CONSTRAINT FK_CRT_MONITOR_MONITOR FOREIGN KEY (MONITOR_ID) REFERENCES MONITOR (DISPLAY_ID))
/


ALTER TABLE MONITOR ADD ( CONSTRAINT FK_MONITOR_DISPLAY FOREIGN KEY (DISPLAY_ID) REFERENCES DISPLAY (ID))
/


ALTER TABLE PERSON ADD ( CONSTRAINT FK_PERSON_ADDRESS FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS (ID))
/


ALTER TABLE PRIVATE_TEACHER ADD ( CONSTRAINT FK_PRIVATE_TEACHER_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER (ID))
/


ALTER TABLE PRODUCT ADD ( CONSTRAINT FK_PRODUCT_ORDERLINE FOREIGN KEY (ORDERLINE_ID) REFERENCES ORDERLINE (ID))
/


ALTER TABLE PUPIL ADD ( CONSTRAINT FK_PUPIL_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER (ID))
/


ALTER TABLE SALTWATER_FISH_TANK_SUBSTRATE ADD ( CONSTRAINT FK_SWFT_SUBSTRATE_SWFT FOREIGN KEY (SALTWATER_FISH_TANK_ID) REFERENCES SALTWATER_FISH_TANK (ID))
/

ALTER TABLE SALTWATER_FISH_TANK_SUBSTRATE ADD ( CONSTRAINT FK_SWFT_SUBSTRATE_SUBSTRATE FOREIGN KEY (SUBSTRATE_ID) REFERENCES SUBSTRATE (ID))
/


ALTER TABLE SHIRT_BUTTON ADD ( CONSTRAINT FK_SHIRT_BUTTON_SHIRT FOREIGN KEY (SHIRT_ID) REFERENCES SHIRT (ID))
/

ALTER TABLE SHIRT_BUTTON ADD ( CONSTRAINT FK_SHIRT_BUTTON_BUTTON FOREIGN KEY (BUTTON_ID) REFERENCES BUTTON (ID))
/


ALTER TABLE SHOES ADD ( CONSTRAINT FK_SHOES_DESIGNER FOREIGN KEY (DESIGNER_ID) REFERENCES DESIGNER (ID))
/


ALTER TABLE SUIT ADD ( CONSTRAINT FK_SUIT_DECK FOREIGN KEY (DECK_ID) REFERENCES DECK (ID))
/


ALTER TABLE TANK_TANK_ACCESSORY ADD ( CONSTRAINT FK_TANK_TANK_ACCESSORY_TANK FOREIGN KEY (TANK_ID) REFERENCES SALTWATER_FISH_TANK (ID) DISABLE)
/

ALTER TABLE TANK_TANK_ACCESSORY ADD ( CONSTRAINT FK_TANK_TANK_ACCESSORY_TA FOREIGN KEY (TANK_ACCESSORY_ID) REFERENCES TANK_ACCESSORY (ID))
/

ALTER TABLE TENURED_PROFESSOR ADD ( CONSTRAINT FK_TENURED_PROFESSOR_PROFESSOR FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR (ID))
/

ALTER TABLE UNDERGRADUATE_STUDENT ADD ( CONSTRAINT FK_UNDERGRADUATE_STUDE_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (ID))
/


ALTER TABLE DESSERT_UTENSIL ADD ( CONSTRAINT FK_DESSERT_UTENSIL_UTENSIL FOREIGN KEY (UTENSIL_ID) REFERENCES UTENSIL (ID))
/

ALTER TABLE DESSERT_UTENSIL ADD ( CONSTRAINT FK_DESSERT_UTENSIL_DESSERT FOREIGN KEY (DESSERT_ID) REFERENCES DESSERT (ID))
/

ALTER TABLE ELEMENT ADD ( CONSTRAINT FK_ELEMENT_ELEMENT FOREIGN KEY (PARENT_ELEMENT_ID) REFERENCES ELEMENT (ID))
/

ALTER TABLE EMPLOYEE_PROJECT ADD ( CONSTRAINT FK_EMPLOYEE_PROJECT_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (ID))
/

ALTER TABLE EMPLOYEE_PROJECT ADD ( CONSTRAINT FK_EMPLOYEE_PROJECT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (ID))
/

ALTER TABLE FLIGHT_PASSANGER ADD ( CONSTRAINT FK_FLIGHT_PASSANGER_PASSANGER FOREIGN KEY (PASSANGER_ID) REFERENCES PASSANGER (ID))
/

ALTER TABLE FLIGHT_PASSANGER ADD ( CONSTRAINT FK_FLIGHT_PASSANGER_FLIGHT FOREIGN KEY (FLIGHT_ID) REFERENCES FLIGHT (ID))
/

ALTER TABLE GRADUATE_STUDENT ADD ( CONSTRAINT FK_GRADUATE_STUDENT_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT (ID))
/

ALTER TABLE GRAPHIC_CALCULATOR ADD ( CONSTRAINT FK_GRAPHIC_CALCULAT_CALCULATOR FOREIGN KEY (CALCULATOR_ID) REFERENCES CALCULATOR (ID))
/

ALTER TABLE HAND_CARD ADD ( CONSTRAINT FK_HAND_CARD_HAND FOREIGN KEY (HAND_ID) REFERENCES HAND (ID))
/

ALTER TABLE HAND_CARD ADD ( CONSTRAINT FK_HAND_CARD_CARD FOREIGN KEY (CARD_ID) REFERENCES CARD (ID))
/

ALTER TABLE HARD_DRIVE ADD ( CONSTRAINT FK_HARD_DRIVE_COMPUTER FOREIGN KEY (COMPUTER_ID) REFERENCES COMPUTER (ID))
/


ALTER TABLE HUMAN ADD ( CONSTRAINT FK_HUMAN_MAMMAL FOREIGN KEY (MAMMAL_ID) REFERENCES MAMMAL (ID))
/


ALTER TABLE LATCH_KEY ADD ( CONSTRAINT FK_LATCH_KEY_KEYCHAIN FOREIGN KEY (KEYCHAIN_ID) REFERENCES KEYCHAIN (ID))
/


ALTER TABLE LCD_MONITOR ADD ( CONSTRAINT FK_LCD_MONITOR_MONITOR FOREIGN KEY (MONITOR_ID) REFERENCES MONITOR (DISPLAY_ID))
/

ALTER TABLE LUGGAGE ADD ( CONSTRAINT FK_LUGGAGE_WHEEL FOREIGN KEY (WHEEL_ID) REFERENCES WHEEL (ID))
/

COMMIT
/