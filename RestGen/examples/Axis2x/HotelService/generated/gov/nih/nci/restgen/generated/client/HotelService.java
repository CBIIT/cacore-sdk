package gov.nih.nci.restgen.generated.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.2
 * 2013-02-22T09:22:25.962-05:00
 * Generated source version: 2.7.2
 * 
 */
@WebServiceClient(name = "HotelService", 
                  wsdlLocation = "http://localhost:29080/HotelSOAPService/services/HotelService?wsdl",
                  targetNamespace = "http://hotel.example.com") 
public class HotelService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://hotel.example.com", "HotelService");
    public final static QName HotelServiceHttpSoap12Endpoint = new QName("http://hotel.example.com", "HotelServiceHttpSoap12Endpoint");
    public final static QName HotelServiceHttpSoap11Endpoint = new QName("http://hotel.example.com", "HotelServiceHttpSoap11Endpoint");
    public final static QName HotelServiceHttpEndpoint = new QName("http://hotel.example.com", "HotelServiceHttpEndpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:29080/HotelSOAPService/services/HotelService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HotelService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:29080/HotelSOAPService/services/HotelService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HotelService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HotelService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HotelService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpSoap12Endpoint")
    public HotelServicePortType getHotelServiceHttpSoap12Endpoint() {
        return super.getPort(HotelServiceHttpSoap12Endpoint, HotelServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpSoap12Endpoint")
    public HotelServicePortType getHotelServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(HotelServiceHttpSoap12Endpoint, HotelServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpSoap11Endpoint")
    public HotelServicePortType getHotelServiceHttpSoap11Endpoint() {
        return super.getPort(HotelServiceHttpSoap11Endpoint, HotelServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpSoap11Endpoint")
    public HotelServicePortType getHotelServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(HotelServiceHttpSoap11Endpoint, HotelServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpEndpoint")
    public HotelServicePortType getHotelServiceHttpEndpoint() {
        return super.getPort(HotelServiceHttpEndpoint, HotelServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HotelServicePortType
     */
    @WebEndpoint(name = "HotelServiceHttpEndpoint")
    public HotelServicePortType getHotelServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(HotelServiceHttpEndpoint, HotelServicePortType.class, features);
    }

}
