<!--L
   Copyright Ekagra Software Technologies Ltd.
   Copyright SAIC, SAIC-Frederick

   Distributed under the OSI-approved BSD 3-Clause License.
   See http://ncip.github.com/cacore-sdk/LICENSE.txt for details.
L-->

<project name="${appName}" default="compile" basedir=".">
	
	<description>  Build file </description>

	<condition property="operatingSystem" value="windows" else="unix">
		<and><os family="windows"/></and>
	</condition>

	<basename property="appName" file="${basedir}" />
	
	<property file="properties.build" />
	<property name="archive" location="archive" />
	<property name="classes" location="classes" />
	<property name="workspace" location="workspace" />
	<property name="dist" location="dist" />
	<property name="junit-result" location="result" />
	<property name="runtime.lib" location="runtime-lib" />
	<property name="stringTemplate.lib" location="${runtime.lib}/stringTemplate" />	
	<property name="build.only.lib" location="build-only-lib" />
	<property name="bin" location="bin" />
	<property name="src" location="src" />
	<property name="src.shl" location="${src}/shl" />
	<property name="src.java" location="${src}/java" />
	<property name="src.script" location="${src}/script" />	
	<property name="src.javascript" location="${src.script}/javascript" />
	<property name="src.sql" location="${src}/sql" />
	<property name="src.template" location="${src}/template" />
	<property name="src.test" location="${src}/test" />
	<property name="src.cfg" location="${src}/cfg" />
	<property name="src.html" location="${src}/html" />
	<property name="src.images" location="${src}/images" />
	<property name="src.css" location="${src}/css" />
	<property name="src.webapp" location="${src}/webapp" />
	<property name="src.webinf" location="${src.webapp}/WEB-INF" />
	
	<property name="stage" location="stage" />
	<property name="stage.shl" location="${stage}/shl" />
	<property name="stage.java" location="${stage}/java" />
	<property name="stage.javascript" location="${stage}/javascript" />
	<property name="stage.sql" location="${stage}/sql" />
	<property name="stage.template" location="${stage}/template" />
	<property name="stage.test" location="${stage}/test" />
	<property name="stage.cfg" location="${stage}/cfg" />
	<property name="stage.html" location="${stage}/html" />
	<property name="stage.images" location="${stage}/images" />
	<property name="stage.css" location="${stage}/css" />
	<property name="stage.script" location="${stage}/script" />
	<property name="deployDir.shl" location="${deployDir}/shl" />
	<property name="deployDir.sql" location="${deployDir}/sql" />
	<property name="deployDir.java" location="${deployDir}/java" />
	<property name="deployDir.template" location="${deployDir}/template" />
	<property name="deployDir.test" location="${deployDir}/test" />
	<property name="deployDir.cfg" location="${deployDir}/cfg" />
	<property name="deployDir.html" location="${deployDir}/html" />
	<property name="deployDir.javascript" location="${deployDir}/javascript" />
	<property name="deployDir.images" location="${deployDir}/images" />
	<property name="deployDir.css" location="${deployDir}/css" />
	<property name="deployDir.script" location="${deployDir}/script" />
	<property name="deployDir.sequence" location="${deployDir}/sequence" />
	<property name="deployDir.workspace" location="${deployDir}/workspace" />
	<property name="deployDir.bin" location="${deployDir}/bin" />
	<property name="deployDir.lib" location="${deployDir}/lib" />
	<property name="deployDir.log" location="${deployDir}/log" />

	<property name="jar" value="${appName}-${version}.jar" />
	<property name="testJar" value="${appName}Test-${version}.jar" />

	<path id="build.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>

	<path id="run.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${src.cfg}">
			<include name="**/*.xml"/>
		</fileset>
	</path>

	<path id="test.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>		
		<fileset dir="${dist}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement path="${src.cfg}"/>
		<pathelement location="certs"/>
	</path>

	<!-- Clean -->
	<target name="clean" depends="clean-classes, clean-target, clean-plugin" description="This target will remove all artifacts created by this build." />

	<!-- Clean classes -->
	<target name="clean-classes" description="This target removes the compiled classes and the distribution jars created by this build">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<!-- Clean target -->
	<target name="clean-target" description="This target removes artifacts from the archive, deploy, and stage directories">

	    <delete dir="${archive}" />
		<delete dir="${deployDir}" />
		<delete dir="${stage}" />

	</target>

	<!-- Init -->
	<target name="init" description="This target initializes the build directory in preparation for a new build run.">
	   
	    <mkdir dir="${archive}" />
		<mkdir dir="${runtime.lib}" />
		<mkdir dir="${runtime.lib}/javascript" />
		<mkdir dir="${stringTemplate.lib}" />		
		<mkdir dir="${build.only.lib}" />
		
		<mkdir dir="${stage}" />
		<mkdir dir="${stage.shl}" />
		<mkdir dir="${stage.sql}" />
		<mkdir dir="${stage.html}" />
		<mkdir dir="${stage.template}" />
		<mkdir dir="${stage.test}" />
		<mkdir dir="${stage.cfg}" />
		<mkdir dir="${stage.images}" />
		<mkdir dir="${stage.css}" />
		<mkdir dir="${stage.script}" />
		<mkdir dir="${stage.javascript}" />
		<mkdir dir="${stage.cfg}/${appName}" />

		<mkdir dir="${src}" />
		<mkdir dir="${src.shl}" />
		<mkdir dir="${src.sql}" />		
		<mkdir dir="${src.java}" />
		<mkdir dir="${src.javascript}" />
		<mkdir dir="${src.javascript}/server" />
		<mkdir dir="${src.javascript}/${appName}/client" />
		<mkdir dir="${src.template}" />
		<mkdir dir="${src.test}" />
		<mkdir dir="${src.cfg}" />
		<mkdir dir="${src.cfg}/web" />
		<mkdir dir="${src.html}" />
		<mkdir dir="${src.images}" />
		<mkdir dir="${src.css}" />
		<mkdir dir="${src.script}" />
		<mkdir dir="${src.webapp}" />
		<mkdir dir="${src.webinf}" />		

		<mkdir dir="${deployDir}" />
		<mkdir dir="${deployDir.lib}" />
		<mkdir dir="${deployDir.bin}" />
		<mkdir dir="${deployDir.log}" />
		<mkdir dir="${deployDir.sequence}" />
		<mkdir dir="${deployDir.shl}" />
		<mkdir dir="${deployDir.sql}" />		
		<mkdir dir="${deployDir.html}" />
		<mkdir dir="${deployDir.template}" />
		<mkdir dir="${deployDir.javascript}" />
		<mkdir dir="${deployDir.test}" />
		<mkdir dir="${deployDir.cfg}" />
		<mkdir dir="${deployDir.html}" />
		<mkdir dir="${deployDir.images}" />
		<mkdir dir="${deployDir.css}" />
		<mkdir dir="${deployDir.script}" />
		<mkdir dir="${deployDir.cfg}/${appName}" />
		<mkdir dir="${deployDir.javascript}/client" />

		<mkdir dir="${classes}" />
		<mkdir dir="${workspace}" />
		<mkdir dir="${workspace}/search/index" />
		
		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />

		<mkdir dir="${junit-result}" />
		<mkdir dir="${workspace}" />

	</target>

	<!-- Prepare source -->
	<target name="prepareSource" depends="createPackageStructure" description="This target will replace tokens in src files in the stage directory with values defined as properties in this build script.">

	   	<mkdir dir="${stage}" />
			
		<copy todir="${stage}" >
			<fileset dir="${src}" includes="**/*.xml, **/*.properties, **/*.bat, **/*.sh, **/*.0, **/*.cf, **/*.conf, **/*.sql, **/*.ccf" />
		</copy>

		<replace dir="${stage}" propertyFile="properties.build">
		  <include name="**/*.*"/>
		  	<replacefilter token="@DESCRIPTION@" value="${description}"/>
			<replacefilter token="@VERSION@" value="${version}"/>
			<replacefilter token="@APP_NAME@" value="${appName}"/>
			<replacefilter token="@ROOT_PACKAGE@" value="${package}"/>
		</replace>

	</target>

  	<!-- Compile -->
	<target name="recompile" depends="clean-classes, compile" description="This target cleans all build artifacts, then compiles all Java source" />

	<target name="compile" depends="init, prepareSource" description="This target will initialize the build, tokenize all relevant source files, then compile the Java source code">
		<property name="build.class.path" refId="build.class.path"/>
		<echo message="${build.class.path}"/>

		<javac destdir="${classes}" debug="on" excludes="${src.test}/**/*.java">
			<classpath refid="build.class.path"/>
			<src path="${src}"  />
			<compilerarg line=" -s ${src} -version" compiler="modern" />
		</javac>

		<javac destdir="${classes}" debug="on">
			<classpath refid="build.class.path"/>
			<src path="${src.test}"/>
		</javac>
	</target>

	<!-- Jar -->
	<target name="buildJar" depends="compile" description="This target creates a jar file from the build artifacts and the compiled classes">
	   
		<jar destfile="${dist}/lib/${jar}"
		       basedir="${classes}"
			   excludes="**\*Test.class,**\*TestSuite.class"
		  />

		<jar destfile="${dist}/lib/${jar}"
		       basedir="${src.java}"
			   excludes="**\*.java"
			   includes="**\*.properties"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}"
		       basedir="${src.template}"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}"
		       basedir="${src.script}/javascript"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}"
		       basedir="${stage.cfg}/"
			   update="true"
		  />		

		<jar destfile="${dist}/lib/${testJar}"
		       basedir="${classes}"
		  />

		<jar destfile="${dist}/lib/${testJar}"
		       basedir="${src.test}"
			   excludes="*"
			   includes="**\*.xmi, **\*.properties, **\*.xml. **\*.txt"
			   update="true"
		  />

	</target>

	<!-- Redeploy -->
	<target name="redeploy" depends="clean-classes, clean-target, compile, buildJar, deploy" description="This target initializes the build, then executes a deploy"/>
	<target name="redeployTemplate" depends="clean-target, prepareSource, deploy" />

	<!-- Deploy -->
	<target name="deploy" description="This target will copy all relevant artifacts like jar files, build scripts, executables, etc. to the relevant deployment directory">

		<copy todir="${deployDir.lib}" flatten="true">
			<fileset dir="${runtime.lib}" includes="**/*.jar" />
		</copy>

		<copy todir="${deployDir.lib}">
			<fileset dir="${dist}/lib" includes="*.jar" />
		</copy>

		<copy todir="${deployDir.bin}">
			<fileset dir="${stage.shl}" includes="**/*.sh, **/*.bat" />
		</copy>

		<!-- Make application shell scripts executable -->
		<chmod dir="${deployDir.bin}" includes="**/*.sh, **/*.bat"  perm="ugo+rx"/>

		<!-- copy config files -->
		<copy todir="${deployDir.cfg}">
			<fileset dir="${stage.cfg}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.html}">
			<fileset dir="${src.html}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.template}">
			<fileset dir="${src.template}" includes="**/*.*" />
		</copy>
		
		<copy todir="${deployDir.javascript}">
			<fileset dir="${src.javascript}" includes="**/*.js*" />
		</copy>
		
		<copy todir="${deployDir.javascript}">
			<fileset dir="${runtime.lib}/javascript" includes="**/*.js*" />
		</copy>

		<copy todir="${deployDir.images}">
			<fileset dir="${src.images}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.css}">
			<fileset dir="${src.css}" includes="**/*.*" />
		</copy>
		
	</target>

	<target name="createRootPackageDirProperty" description="This target will create the root package dir from the package property defined in the build property file" >

	  <pathconvert property="java.package.dir" targetos="${operatingSystem}" >
		  <path path="${package}" />
		  <mapper>
			 <chainedmapper>
				 <flattenmapper/>
				 <unpackagemapper from="*" to="${src.java}${file.separator}*" casesensitive="yes"/>
			 </chainedmapper>
		  </mapper>
	  </pathconvert>

	</target>

	<target name="createPackageStructure" depends="init, createRootPackageDirProperty" description="This target will create the Java package directories under the java source directory" >
	   
		<mkdir dir="${java.package.dir}" />
		<mkdir dir="${java.package.dir}/util" />
		<mkdir dir="${java.package.dir}/exception" />				
		<mkdir dir="${java.package.dir}/domain" />
		<mkdir dir="${java.package.dir}/domaininterface" />
		<mkdir dir="${java.package.dir}/persist" />
		<mkdir dir="${java.package.dir}/dao" />
		<mkdir dir="${java.package.dir}/dao/search" />
		<mkdir dir="${java.package.dir}/dao/db" />
		<mkdir dir="${java.package.dir}/dao/serialize" />
		<mkdir dir="${java.package.dir}/controllers" />				
		<mkdir dir="${java.package.dir}/servlet" />

		<mkdir dir="${src.javascript}/${appName}" />
		
	</target>

	<target name="unit-test" depends="redeploy" description="this target will execute the builds JUnit tests.  Results are written to the result directory">

		<property name="test.class.path" refId="test.class.path"/>
		<echo message="Class path is:  ${test.class.path}"/>

		<junit printsummary="yes" haltonfailure="no">
			<!--<jvmarg value="-Xmx512m -Xmn512m"/>-->
			<classpath>
				<pathelement path="${test.class.path}"/>
			</classpath>
			<formatter type="plain"/>

			<batchtest fork="yes" todir="${junit-result}">
				<fileset dir="${src.test}">
					<include name="**/*Test.java"/>
					<exclude name="**/*TestSuite.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="runScript" description="This plugin will execute a JavaScript any named script from the script/javascript directory.  Please provide the name of the script (without the extension) as the script property using Ant's -D option">
	   	<property name="run.class.path" refId="run.class.path"/>
		<echo message="${run.class.path}"/>
		<script language="javascript" src="src/script/javascript/${script}.js">
		    <classpath refid="test.class.path"/>
		</script>		
	</target>

	<target name="javadoc" description="This plugin will create JavaDoc documentation for Java files defined in this project">
	   <javadoc
           destdir="${src.doc}/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="${appName} Java API documentation">

		<classpath refid="test.class.path"/>

		<fileset dir="${src}" defaultexcludes="yes" />

		<doctitle><![CDATA[<h1>${appName}</h1>]]></doctitle>
		<bottom><![CDATA[<i>Javadoc for Application ${appName}</i>]]></bottom>
		<tag name="todo" scope="all" description="To do:"/>
		<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
	   </javadoc>
	</target>
</project>